/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["/assets/js/main"],{

/***/ "./resources/dashboardkit/js/pcoded.min.js":
/*!*************************************************!*\
  !*** ./resources/dashboardkit/js/pcoded.min.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n\n\nfunction horizontalmobilemenuclick() {\n  $(window)[0].innerWidth;\n  $(\".pc-navbar li\").off(\"click\"), $(\".pc-navbar > li:not(.pc-caption)\").on(\"click\", function () {\n    $(this).children(\".pc-submenu\").removeAttr(\"style\"), $(this).hasClass(\"pc-trigger\") ? $(this).removeClass(\"pc-trigger\") : ($(\"li.pc-trigger\").removeClass(\"pc-trigger\"), $(this).addClass(\"pc-trigger\"));\n  }), $(\".pc-navbar > li:not(.pc-caption) li\").on(\"click\", function (e) {\n    e.stopPropagation(), $(this).hasClass(\"pc-trigger\") ? $(this).removeClass(\"pc-trigger\") : ($(this).parent(\".pc-submenu\").find(\"li.pc-trigger\").removeClass(\"pc-trigger\"), $(this).addClass(\"pc-trigger\"));\n  });\n}\n\nfunction addscroller() {\n  if (rmmini(), menuclick(), $(\".navbar-content\")[0]) {\n    new PerfectScrollbar(\".navbar-content\", {\n      wheelSpeed: .5,\n      swipeEasing: 0,\n      suppressScrollX: !0,\n      wheelPropagation: 1,\n      minScrollbarLength: 40\n    });\n  }\n}\n\nfunction menuclick() {\n  $(window)[0].innerWidth;\n  $(\".pc-navbar li\").off(\"click\"), $(\"body\").hasClass(\"minimenu\") || ($(\".pc-navbar li:not(.pc-trigger) .pc-submenu\").slideUp(), $(\".pc-navbar > li:not(.pc-caption)\").on(\"click\", function () {\n    $(this).hasClass(\"pc-trigger\") ? ($(this).removeClass(\"pc-trigger\"), $(this).children(\".pc-submenu\").slideUp(\"fast\")) : ($(\"li.pc-trigger\").children(\".pc-submenu\").slideUp(\"fast\"), $(\"li.pc-trigger\").removeClass(\"pc-trigger\"), $(this).addClass(\"pc-trigger\"), $(this).children(\".pc-submenu\").slideDown(\"fast\"));\n  }), $(\".pc-navbar > li:not(.pc-caption) li\").on(\"click\", function (e) {\n    e.stopPropagation(), $(this).hasClass(\"pc-trigger\") ? ($(this).removeClass(\"pc-trigger\"), $(this).children(\".pc-submenu\").slideUp(\"fast\")) : ($(this).parent(\".pc-submenu\").find(\"li.pc-trigger\").children(\".pc-submenu\").slideUp(\"fast\"), $(this).parent(\".pc-submenu\").find(\"li.pc-trigger\").removeClass(\"pc-trigger\"), $(this).addClass(\"pc-trigger\"), $(this).children(\".pc-submenu\").slideDown(\"fast\"));\n  }));\n}\n\nfunction rmdrp() {\n  $(\".pc-header:not(.pc-mob-header) .pc-mob-drp\").removeClass(\"mob-drp-active\"), $(\".pc-header:not(.pc-mob-header) .pc-md-overlay\").remove();\n}\n\nfunction rmthead() {\n  $(\".pc-header:not(.pc-mob-header)\").removeClass(\"mob-header-active\"), $(\".pc-header:not(.pc-mob-header) .pc-md-overlay\").remove();\n}\n\nfunction rmmenu() {\n  $(\".pc-sidebar\").removeClass(\"mob-sidebar-active\"), $(\".topbar\").removeClass(\"mob-sidebar-active\"), $(\".pc-sidebar .pc-menu-overlay\").remove(), $(\".topbar .pc-menu-overlay\").remove();\n}\n\nfunction rmovermenu() {\n  $(\".pc-sidebar\").removeClass(\"pc-over-menu-active\"), $(\".topbar\").removeClass(\"mob-sidebar-active\"), $(\".pc-sidebar .pc-menu-overlay\").remove(), $(\".topbar .pc-menu-overlay\").remove();\n}\n\nfunction rmactive() {\n  $(\".pc-sidebar .pc-navbar li\").removeClass(\"active\"), $(\".pc-sidebar .pc-navbar li\").removeClass(\"pc-trigger\"), $(\".topbar .dropdown\").removeClass(\"show\"), $(\".topbar .dropdown-menu\").removeClass(\"show\"), $(\".pc-sidebar .pc-menu-overlay\").remove(), $(\".topbar .pc-menu-overlay\").remove();\n}\n\nfunction rmmini() {\n  var e = $(window)[0].innerWidth;\n  e <= 1024 ? $(\"body\").hasClass(\"minimenu\") && ($(\"body\").removeClass(\"minimenu\"), flg = \"1\") : e > 1024 && \"1\" == flg && ($(\"body\").addClass(\"minimenu\"), flg = \"0\");\n}\n\nfunction collapseedge() {\n  var e,\n      a = $(window).height();\n  $(window).width() > 1024 && $(\".minimenu .pc-sidebar .pc-submenu .pc-hasmenu\").hover(function () {\n    var s = $(this).children(\".pc-submenu\"),\n        i = s.offset(),\n        o = (i.left, i.top),\n        r = (s.width(), s.height()),\n        c = $(window).scrollTop();\n\n    if (!(o + r <= a)) {\n      var n = o - c;\n      s.addClass(\"scroll-menu\"), s.css(\"max-height\", \"calc(100vh - \" + n + \"px)\"), e = new PerfectScrollbar(\".scroll-menu\", {\n        wheelSpeed: .5,\n        swipeEasing: 0,\n        suppressScrollX: !0,\n        wheelPropagation: 1,\n        minScrollbarLength: 40\n      });\n    }\n  }, function () {\n    e.destroy(), $(\".scroll-menu\").removeAttr(\"style\"), $(\".scroll-menu\").removeClass(\"scroll-menu\");\n  });\n}\n\nvar flg = \"0\";\n\nif ($(document).ready(function () {\n  function e(e) {\n    try {\n      e.attr(\"placeholder\").length;\n    } catch (e) {\n      0;\n    }\n\n    e.val().length > 0 ? e.parent(\".form-group\").addClass(\"fill\") : e.parent(\".form-group\").removeClass(\"fill\");\n  }\n\n  feather.replace(), setTimeout(function () {\n    $(\".loader-bg\").fadeOut(\"slow\", function () {\n      $(this).remove();\n    });\n  }, 400), $(\"body\").hasClass(\"pc-horizontal\") || addscroller(), $(\".pc-horizontal\").hasClass(\"navbar-overlay\") && addscroller(), $(\".hamburger:not(.is-active)\").on(\"click\", function () {\n    $(this).hasClass(\"is-active\") ? $(this).removeClass(\"is-active\") : $(this).addClass(\"is-active\");\n  }), $(\"#overlay-menu\").on(\"click\", function () {\n    menuclick(), $(\".pc-sidebar\").hasClass(\"pc-over-menu-active\") ? rmovermenu() : ($(\".pc-sidebar\").addClass(\"pc-over-menu-active\"), $(\".pc-sidebar\").append(\"<div class=\\\"pc-menu-overlay\\\"></div>\"), $(\".pc-menu-overlay\").on(\"click\", function () {\n      rmovermenu(), $(\".hamburger\").removeClass(\"is-active\");\n    }));\n  }), $(\"#vertical-nav-toggle\").on(\"click\", function () {\n    console.log(\"123\"), $(\"body\").hasClass(\"minimenu\") ? ($(\"body\").removeClass(\"minimenu\"), menuclick()) : ($(\"body\").addClass(\"minimenu\"), $(\".pc-navbar li:not(.pc-trigger) .pc-submenu\").removeAttr(\"style\"), collapseedge());\n  }), $(\"#mobile-collapse\").on(\"click\", function () {\n    $(\"body\").hasClass(\"pc-horizontal\") || menuclick(), $(\".pc-sidebar\").hasClass(\"mob-sidebar-active\") ? rmmenu() : ($(\".pc-sidebar\").addClass(\"mob-sidebar-active\"), $(\".pc-sidebar\").append(\"<div class=\\\"pc-menu-overlay\\\"></div>\"), $(\".pc-menu-overlay\").on(\"click\", function () {\n      rmmenu(), $(\".hamburger\").removeClass(\"is-active\");\n    }));\n  }), $(\".pc-horizontal #mobile-collapse\").on(\"click\", function () {\n    $(\".topbar\").hasClass(\"mob-sidebar-active\") ? rmmenu() : ($(\".topbar\").addClass(\"mob-sidebar-active\"), $(\".topbar\").append(\"<div class=\\\"pc-menu-overlay\\\"></div>\"), $(\".pc-menu-overlay\").on(\"click\", function () {\n      rmmenu(), $(\".hamburger\").removeClass(\"is-active\");\n    }));\n  }), $(\"#header-collapse\").on(\"click\", function () {\n    $(\".pc-header:not(.pc-mob-header)\").hasClass(\"mob-header-active\") ? rmthead() : ($(\".pc-header:not(.pc-mob-header)\").addClass(\"mob-header-active\"), $(\".pc-header:not(.pc-mob-header)\").append(\"<div class=\\\"pc-md-overlay\\\"></div>\"), $(\".pc-md-overlay\").on(\"click\", function () {\n      rmthead();\n    }));\n  }), $(\"#headerdrp-collapse\").on(\"click\", function () {\n    $(\".pc-header:not(.pc-mob-header) .pc-mob-drp\").hasClass(\"mob-drp-active\") ? rmdrp() : ($(\".pc-header:not(.pc-mob-header) .pc-mob-drp\").addClass(\"mob-drp-active\"), $(\".pc-header:not(.pc-mob-header)\").append(\"<div class=\\\"pc-md-overlay\\\"></div>\"), $(\".pc-md-overlay\").on(\"click\", function () {\n      rmdrp();\n    }));\n  }), $(\".pc-horizontal .topbar .pc-navbar>li>a\").on(\"click\", function (e) {\n    setTimeout(function () {\n      $(this).parents(\".dropdown\").children(\".dropdown-menu\").removeAttr(\"style\");\n    }, 1e3);\n  }), $(\".form-v2 .form-control\").each(function () {\n    e($(this));\n  }), $(\".form-v2 .form-control\").on(\"blur\", function () {\n    e($(this));\n  }), $(\".form-v2 .form-control\").on(\"focus\", function () {\n    $(this).parent(\".form-group\").addClass(\"fill\");\n  }), $(\"body\").hasClass(\"pc-horizontal\") && horizontalmobilemenuclick(), $(\"body\").hasClass(\"minimenu\") && collapseedge();\n}), $(\".email-more-link\").on(\"click\", function (e) {\n  $(this).children(\"span\").slideToggle(1);\n}), $(window).resize(function () {\n  $(\"body\").hasClass(\"pc-horizontal\") || (rmmini(), menuclick()), $(\"body\").hasClass(\"pc-horizontal\") && rmactive();\n}), $(window).scroll(function () {}), $(window).on(\"load\", function () {\n  var e = [].slice.call(document.querySelectorAll(\"[data-toggle=\\\"tooltip\\\"]\")),\n      a = (e.map(function (e) {\n    return new bootstrap.Tooltip(e);\n  }), [].slice.call(document.querySelectorAll(\"[data-toggle=\\\"popover\\\"]\")));\n  a.map(function (e) {\n    return new bootstrap.Popover(e);\n  });\n}), $(\".pc-sidebar .pc-navbar a\").each(function () {\n  var e = window.location.href.split(/[?#]/)[0];\n\n  if (this.href == e && \"\" != $(this).attr(\"href\") && ($(this).parent(\"li\").addClass(\"active\"), $(this).parent(\"li\").parent().parent(\".pc-hasmenu\").addClass(\"active\").addClass(\"pc-trigger\"), $(this).parent(\"li\").parent().parent(\".pc-hasmenu\").parent().parent(\".pc-hasmenu\").addClass(\"active\").addClass(\"pc-trigger\"), $(this).parent(\"li\").parent().parent(\".sidelink\").addClass(\"active\"), $(this).parents(\".pc-tabcontent\").addClass(\"active\"), $(\"body\").hasClass(\"tab-layout\"))) {\n    var a = $(\".pc-tabcontent.active\").attr(\"data-value\");\n    $(\".tab-sidemenu > li\").removeClass(\"active\"), $(\".tab-sidemenu > li > a[data-cont=\\\"\" + a + \"\\\"]\").parent(\"li\").addClass(\"active\");\n  }\n}), $(\".tab-sidemenu > ul >li\").on(\"click\", function () {\n  var e = $(this).children(\"a\").attr(\"data-cont\");\n  $(\".navbar-content .pc-tabcontent\").removeClass(\"active\"), $(\".tab-sidemenu > ul > li\").removeClass(\"active\"), $(this).addClass(\"active\"), $(\".navbar-content .pc-tabcontent[data-value=\\\"\" + e + \"\\\"]\").addClass(\"active\");\n}), $(\".pc-toggle-sidemenu\").click(function () {\n  $(\".pc-toggle-sidemenu\").hasClass(\"active\") ? $(\".pc-sideoverlay,.page-sidebar,.pc-toggle-sidemenu\").removeClass(\"active\") : $(\".pc-sideoverlay,.page-sidebar,.pc-toggle-sidemenu\").addClass(\"active\");\n}), $(\".pc-sideoverlay, .pc-toggle-sidemenu.active\").click(function () {\n  $(\".pc-sideoverlay,.page-sidebar,.pc-toggle-sidemenu\").removeClass(\"active\");\n}), $(\"body\").hasClass(\"layout-topbar\") && $(\".pc-header .list-unstyled > .dropdown\").hover(function () {\n  $(this).children(\".dropdown-menu\").addClass(\"show\");\n}, function () {\n  $(this).children(\".dropdown-menu\").removeClass(\"show\");\n}), $(\"body\").hasClass(\"pc-horizontal\")) {\n  var hpx,\n      docH = $(window).height(),\n      docW = $(window).width();\n  docW > 1024 && $(\".pc-horizontal .topbar .pc-submenu .pc-hasmenu\").hover(function () {\n    var e = $(this).children(\".pc-submenu\"),\n        a = e.offset(),\n        s = a.left,\n        i = a.top,\n        o = e.width(),\n        r = e.height(),\n        c = $(window).scrollTop();\n\n    if (s + o <= docW || e.addClass(\"edge\"), !(i + r <= docH)) {\n      var n = i - c;\n      e.addClass(\"scroll-menu\"), e.css(\"max-height\", \"calc(100vh - \" + n + \"px)\"), hpx = new PerfectScrollbar(\".scroll-menu\", {\n        wheelSpeed: .5,\n        swipeEasing: 0,\n        suppressScrollX: !0,\n        wheelPropagation: 1,\n        minScrollbarLength: 40\n      });\n    }\n  }, function () {\n    hpx.destroy(), $(\".scroll-menu\").removeAttr(\"style\"), $(\".scroll-menu\").removeClass(\"scroll-menu\");\n  });\n}\n\n$(\".prod-likes .form-check-input\").change(function () {\n  $(this).is(\":checked\") ? ($(this).parent(\".prod-likes\").append(\"<div class=\\\"pc-like\\\"><div class=\\\"like-wrapper\\\"><span><span class=\\\"pc-group\\\"><span class=\\\"pc-dots\\\"></span><span class=\\\"pc-dots\\\"></span><span class=\\\"pc-dots\\\"></span><span class=\\\"pc-dots\\\"></span></span></span></div></div>\"), $(this).parent(\".prod-likes\").find(\".pc-like\").addClass(\"pc-like-animate\"), setTimeout(function () {\n    $(this).parent(\".prod-likes\").find(\".pc-like\").remove();\n  }, 3e3)) : $(this).parent(\".prod-likes\").find(\".pc-like\").remove();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/dashboardkit/js/pcoded.min.js\n");

/***/ }),

/***/ "./resources/dashboardkit/js/vendor-all.min.js":
/*!*****************************************************!*\
  !*** ./resources/dashboardkit/js/vendor-all.min.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n!function (e, t) {\n  \"use strict\";\n\n  \"object\" == ( false ? 0 : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = e.document ? t(e, !0) : function (e) {\n    if (!e.document) throw new Error(\"jQuery requires a window with a document\");\n    return t(e);\n  } : t(e);\n}(\"undefined\" != typeof window ? window : this, function (e, t) {\n  \"use strict\";\n\n  var n = [],\n      r = e.document,\n      i = Object.getPrototypeOf,\n      o = n.slice,\n      s = n.concat,\n      a = n.push,\n      l = n.indexOf,\n      c = {},\n      u = c.toString,\n      f = c.hasOwnProperty,\n      p = f.toString,\n      d = p.call(Object),\n      h = {},\n      g = function g(e) {\n    return \"function\" == typeof e && \"number\" != typeof e.nodeType;\n  },\n      m = function m(e) {\n    return null != e && e === e.window;\n  },\n      v = {\n    type: !0,\n    src: !0,\n    nonce: !0,\n    noModule: !0\n  };\n\n  function y(e, t, n) {\n    var i,\n        o,\n        s = (n = n || r).createElement(\"script\");\n    if (s.text = e, t) for (i in v) {\n      (o = t[i] || t.getAttribute && t.getAttribute(i)) && s.setAttribute(i, o);\n    }\n    n.head.appendChild(s).parentNode.removeChild(s);\n  }\n\n  function b(e) {\n    return null == e ? e + \"\" : \"object\" == _typeof(e) || \"function\" == typeof e ? c[u.call(e)] || \"object\" : _typeof(e);\n  }\n\n  var x = \"3.4.1\",\n      w = function w(e, t) {\n    return new w.fn.init(e, t);\n  },\n      T = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n  function E(e) {\n    var t = !!e && \"length\" in e && e.length,\n        n = b(e);\n    return !g(e) && !m(e) && (\"array\" === n || 0 === t || \"number\" == typeof t && 0 < t && t - 1 in e);\n  }\n\n  w.fn = w.prototype = {\n    jquery: x,\n    constructor: w,\n    length: 0,\n    toArray: function toArray() {\n      return o.call(this);\n    },\n    get: function get(e) {\n      return null == e ? o.call(this) : e < 0 ? this[e + this.length] : this[e];\n    },\n    pushStack: function pushStack(e) {\n      var t = w.merge(this.constructor(), e);\n      return t.prevObject = this, t;\n    },\n    each: function each(e) {\n      return w.each(this, e);\n    },\n    map: function map(e) {\n      return this.pushStack(w.map(this, function (t, n) {\n        return e.call(t, n, t);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(o.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(e) {\n      var t = this.length,\n          n = +e + (e < 0 ? t : 0);\n      return this.pushStack(0 <= n && n < t ? [this[n]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    push: a,\n    sort: n.sort,\n    splice: n.splice\n  }, w.extend = w.fn.extend = function () {\n    var e,\n        t,\n        n,\n        r,\n        i,\n        o,\n        s = arguments[0] || {},\n        a = 1,\n        l = arguments.length,\n        c = !1;\n\n    for (\"boolean\" == typeof s && (c = s, s = arguments[a] || {}, a++), \"object\" == _typeof(s) || g(s) || (s = {}), a === l && (s = this, a--); a < l; a++) {\n      if (null != (e = arguments[a])) for (t in e) {\n        r = e[t], \"__proto__\" !== t && s !== r && (c && r && (w.isPlainObject(r) || (i = Array.isArray(r))) ? (n = s[t], o = i && !Array.isArray(n) ? [] : i || w.isPlainObject(n) ? n : {}, i = !1, s[t] = w.extend(c, o, r)) : void 0 !== r && (s[t] = r));\n      }\n    }\n\n    return s;\n  }, w.extend({\n    expando: \"jQuery\" + (x + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(e) {\n      throw new Error(e);\n    },\n    noop: function noop() {},\n    isPlainObject: function isPlainObject(e) {\n      var t, n;\n      return !(!e || \"[object Object]\" !== u.call(e) || (t = i(e)) && (\"function\" != typeof (n = f.call(t, \"constructor\") && t.constructor) || p.call(n) !== d));\n    },\n    isEmptyObject: function isEmptyObject(e) {\n      var t;\n\n      for (t in e) {\n        return !1;\n      }\n\n      return !0;\n    },\n    globalEval: function globalEval(e, t) {\n      y(e, {\n        nonce: t && t.nonce\n      });\n    },\n    each: function each(e, t) {\n      var n,\n          r = 0;\n      if (E(e)) for (n = e.length; r < n && !1 !== t.call(e[r], r, e[r]); r++) {\n        ;\n      } else for (r in e) {\n        if (!1 === t.call(e[r], r, e[r])) break;\n      }\n      return e;\n    },\n    trim: function trim(e) {\n      return null == e ? \"\" : (e + \"\").replace(T, \"\");\n    },\n    makeArray: function makeArray(e, t) {\n      var n = t || [];\n      return null != e && (E(Object(e)) ? w.merge(n, \"string\" == typeof e ? [e] : e) : a.call(n, e)), n;\n    },\n    inArray: function inArray(e, t, n) {\n      return null == t ? -1 : l.call(t, e, n);\n    },\n    merge: function merge(e, t) {\n      for (var n = +t.length, r = 0, i = e.length; r < n; r++) {\n        e[i++] = t[r];\n      }\n\n      return e.length = i, e;\n    },\n    grep: function grep(e, t, n) {\n      for (var r = [], i = 0, o = e.length, s = !n; i < o; i++) {\n        !t(e[i], i) !== s && r.push(e[i]);\n      }\n\n      return r;\n    },\n    map: function map(e, t, n) {\n      var r,\n          i,\n          o = 0,\n          a = [];\n      if (E(e)) for (r = e.length; o < r; o++) {\n        null != (i = t(e[o], o, n)) && a.push(i);\n      } else for (o in e) {\n        null != (i = t(e[o], o, n)) && a.push(i);\n      }\n      return s.apply([], a);\n    },\n    guid: 1,\n    support: h\n  }), \"function\" == typeof Symbol && (w.fn[Symbol.iterator] = n[Symbol.iterator]), w.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (e, t) {\n    c[\"[object \" + t + \"]\"] = t.toLowerCase();\n  });\n\n  var C = function (e) {\n    var t,\n        n,\n        r,\n        i,\n        o,\n        s,\n        a,\n        l,\n        c,\n        u,\n        f,\n        p,\n        d,\n        h,\n        g,\n        m,\n        v,\n        y,\n        b,\n        x = \"sizzle\" + 1 * new Date(),\n        w = e.document,\n        T = 0,\n        E = 0,\n        C = le(),\n        S = le(),\n        L = le(),\n        k = le(),\n        A = function A(e, t) {\n      return e === t && (f = !0), 0;\n    },\n        D = {}.hasOwnProperty,\n        N = [],\n        H = N.pop,\n        j = N.push,\n        W = N.push,\n        R = N.slice,\n        O = function O(e, t) {\n      for (var n = 0, r = e.length; n < r; n++) {\n        if (e[n] === t) return n;\n      }\n\n      return -1;\n    },\n        P = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        Y = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        q = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n        M = \"\\\\[\" + Y + \"*(\" + q + \")(?:\" + Y + \"*([*^$|!~]?=)\" + Y + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + q + \"))|)\" + Y + \"*\\\\]\",\n        X = \":(\" + q + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + M + \")*)|.*)\\\\)|)\",\n        B = new RegExp(Y + \"+\", \"g\"),\n        I = new RegExp(\"^\" + Y + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + Y + \"+$\", \"g\"),\n        F = new RegExp(\"^\" + Y + \"*,\" + Y + \"*\"),\n        $ = new RegExp(\"^\" + Y + \"*([>+~]|\" + Y + \")\" + Y + \"*\"),\n        _ = new RegExp(Y + \"|>\"),\n        U = new RegExp(X),\n        z = new RegExp(\"^\" + q + \"$\"),\n        V = {\n      ID: new RegExp(\"^#(\" + q + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + q + \")\"),\n      TAG: new RegExp(\"^(\" + q + \"|[*])\"),\n      ATTR: new RegExp(\"^\" + M),\n      PSEUDO: new RegExp(\"^\" + X),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + Y + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + Y + \"*(?:([+-]|)\" + Y + \"*(\\\\d+)|))\" + Y + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + P + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + Y + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + Y + \"*((?:-\\\\d)?\\\\d*)\" + Y + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        K = /HTML$/i,\n        G = /^(?:input|select|textarea|button)$/i,\n        Q = /^h\\d$/i,\n        J = /^[^{]+\\{\\s*\\[native \\w/,\n        Z = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        ee = /[+~]/,\n        te = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + Y + \"?|(\" + Y + \")|.)\", \"ig\"),\n        ne = function ne(e, t, n) {\n      var r = \"0x\" + t - 65536;\n      return r != r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);\n    },\n        re = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        ie = function ie(e, t) {\n      return t ? \"\\0\" === e ? \"\\uFFFD\" : e.slice(0, -1) + \"\\\\\" + e.charCodeAt(e.length - 1).toString(16) + \" \" : \"\\\\\" + e;\n    },\n        oe = function oe() {\n      p();\n    },\n        se = xe(function (e) {\n      return !0 === e.disabled && \"fieldset\" === e.nodeName.toLowerCase();\n    }, {\n      dir: \"parentNode\",\n      next: \"legend\"\n    });\n\n    try {\n      W.apply(N = R.call(w.childNodes), w.childNodes), N[w.childNodes.length].nodeType;\n    } catch (t) {\n      W = {\n        apply: N.length ? function (e, t) {\n          j.apply(e, R.call(t));\n        } : function (e, t) {\n          for (var n = e.length, r = 0; e[n++] = t[r++];) {\n            ;\n          }\n\n          e.length = n - 1;\n        }\n      };\n    }\n\n    function ae(e, t, r, i) {\n      var o,\n          a,\n          c,\n          u,\n          f,\n          h,\n          v,\n          y = t && t.ownerDocument,\n          T = t ? t.nodeType : 9;\n      if (r = r || [], \"string\" != typeof e || !e || 1 !== T && 9 !== T && 11 !== T) return r;\n\n      if (!i && ((t ? t.ownerDocument || t : w) !== d && p(t), t = t || d, g)) {\n        if (11 !== T && (f = Z.exec(e))) if (o = f[1]) {\n          if (9 === T) {\n            if (!(c = t.getElementById(o))) return r;\n            if (c.id === o) return r.push(c), r;\n          } else if (y && (c = y.getElementById(o)) && b(t, c) && c.id === o) return r.push(c), r;\n        } else {\n          if (f[2]) return W.apply(r, t.getElementsByTagName(e)), r;\n          if ((o = f[3]) && n.getElementsByClassName && t.getElementsByClassName) return W.apply(r, t.getElementsByClassName(o)), r;\n        }\n\n        if (n.qsa && !k[e + \" \"] && (!m || !m.test(e)) && (1 !== T || \"object\" !== t.nodeName.toLowerCase())) {\n          if (v = e, y = t, 1 === T && _.test(e)) {\n            for ((u = t.getAttribute(\"id\")) ? u = u.replace(re, ie) : t.setAttribute(\"id\", u = x), a = (h = s(e)).length; a--;) {\n              h[a] = \"#\" + u + \" \" + be(h[a]);\n            }\n\n            v = h.join(\",\"), y = ee.test(e) && ve(t.parentNode) || t;\n          }\n\n          try {\n            return W.apply(r, y.querySelectorAll(v)), r;\n          } catch (t) {\n            k(e, !0);\n          } finally {\n            u === x && t.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return l(e.replace(I, \"$1\"), t, r, i);\n    }\n\n    function le() {\n      var e = [];\n      return function t(n, i) {\n        return e.push(n + \" \") > r.cacheLength && delete t[e.shift()], t[n + \" \"] = i;\n      };\n    }\n\n    function ce(e) {\n      return e[x] = !0, e;\n    }\n\n    function ue(e) {\n      var t = d.createElement(\"fieldset\");\n\n      try {\n        return !!e(t);\n      } catch (e) {\n        return !1;\n      } finally {\n        t.parentNode && t.parentNode.removeChild(t), t = null;\n      }\n    }\n\n    function fe(e, t) {\n      for (var n = e.split(\"|\"), i = n.length; i--;) {\n        r.attrHandle[n[i]] = t;\n      }\n    }\n\n    function pe(e, t) {\n      var n = t && e,\n          r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;\n      if (r) return r;\n      if (n) for (; n = n.nextSibling;) {\n        if (n === t) return -1;\n      }\n      return e ? 1 : -1;\n    }\n\n    function de(e) {\n      return function (t) {\n        return \"input\" === t.nodeName.toLowerCase() && t.type === e;\n      };\n    }\n\n    function he(e) {\n      return function (t) {\n        var n = t.nodeName.toLowerCase();\n        return (\"input\" === n || \"button\" === n) && t.type === e;\n      };\n    }\n\n    function ge(e) {\n      return function (t) {\n        return \"form\" in t ? t.parentNode && !1 === t.disabled ? \"label\" in t ? \"label\" in t.parentNode ? t.parentNode.disabled === e : t.disabled === e : t.isDisabled === e || t.isDisabled !== !e && se(t) === e : t.disabled === e : \"label\" in t && t.disabled === e;\n      };\n    }\n\n    function me(e) {\n      return ce(function (t) {\n        return t = +t, ce(function (n, r) {\n          for (var i, o = e([], n.length, t), s = o.length; s--;) {\n            n[i = o[s]] && (n[i] = !(r[i] = n[i]));\n          }\n        });\n      });\n    }\n\n    function ve(e) {\n      return e && void 0 !== e.getElementsByTagName && e;\n    }\n\n    for (t in n = ae.support = {}, o = ae.isXML = function (e) {\n      var t = e.namespaceURI,\n          n = (e.ownerDocument || e).documentElement;\n      return !K.test(t || n && n.nodeName || \"HTML\");\n    }, p = ae.setDocument = function (e) {\n      var t,\n          i,\n          s = e ? e.ownerDocument || e : w;\n      return s !== d && 9 === s.nodeType && s.documentElement && (h = (d = s).documentElement, g = !o(d), w !== d && (i = d.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener(\"unload\", oe, !1) : i.attachEvent && i.attachEvent(\"onunload\", oe)), n.attributes = ue(function (e) {\n        return e.className = \"i\", !e.getAttribute(\"className\");\n      }), n.getElementsByTagName = ue(function (e) {\n        return e.appendChild(d.createComment(\"\")), !e.getElementsByTagName(\"*\").length;\n      }), n.getElementsByClassName = J.test(d.getElementsByClassName), n.getById = ue(function (e) {\n        return h.appendChild(e).id = x, !d.getElementsByName || !d.getElementsByName(x).length;\n      }), n.getById ? (r.filter.ID = function (e) {\n        var t = e.replace(te, ne);\n        return function (e) {\n          return e.getAttribute(\"id\") === t;\n        };\n      }, r.find.ID = function (e, t) {\n        if (void 0 !== t.getElementById && g) {\n          var n = t.getElementById(e);\n          return n ? [n] : [];\n        }\n      }) : (r.filter.ID = function (e) {\n        var t = e.replace(te, ne);\n        return function (e) {\n          var n = void 0 !== e.getAttributeNode && e.getAttributeNode(\"id\");\n          return n && n.value === t;\n        };\n      }, r.find.ID = function (e, t) {\n        if (void 0 !== t.getElementById && g) {\n          var n,\n              r,\n              i,\n              o = t.getElementById(e);\n\n          if (o) {\n            if ((n = o.getAttributeNode(\"id\")) && n.value === e) return [o];\n\n            for (i = t.getElementsByName(e), r = 0; o = i[r++];) {\n              if ((n = o.getAttributeNode(\"id\")) && n.value === e) return [o];\n            }\n          }\n\n          return [];\n        }\n      }), r.find.TAG = n.getElementsByTagName ? function (e, t) {\n        return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : n.qsa ? t.querySelectorAll(e) : void 0;\n      } : function (e, t) {\n        var n,\n            r = [],\n            i = 0,\n            o = t.getElementsByTagName(e);\n\n        if (\"*\" === e) {\n          for (; n = o[i++];) {\n            1 === n.nodeType && r.push(n);\n          }\n\n          return r;\n        }\n\n        return o;\n      }, r.find.CLASS = n.getElementsByClassName && function (e, t) {\n        if (void 0 !== t.getElementsByClassName && g) return t.getElementsByClassName(e);\n      }, v = [], m = [], (n.qsa = J.test(d.querySelectorAll)) && (ue(function (e) {\n        h.appendChild(e).innerHTML = \"<a id='\" + x + \"'></a><select id='\" + x + \"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\", e.querySelectorAll(\"[msallowcapture^='']\").length && m.push(\"[*^$]=\" + Y + \"*(?:''|\\\"\\\")\"), e.querySelectorAll(\"[selected]\").length || m.push(\"\\\\[\" + Y + \"*(?:value|\" + P + \")\"), e.querySelectorAll(\"[id~=\" + x + \"-]\").length || m.push(\"~=\"), e.querySelectorAll(\":checked\").length || m.push(\":checked\"), e.querySelectorAll(\"a#\" + x + \"+*\").length || m.push(\".#.+[+~]\");\n      }), ue(function (e) {\n        e.innerHTML = \"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";\n        var t = d.createElement(\"input\");\n        t.setAttribute(\"type\", \"hidden\"), e.appendChild(t).setAttribute(\"name\", \"D\"), e.querySelectorAll(\"[name=d]\").length && m.push(\"name\" + Y + \"*[*^$|!~]?=\"), 2 !== e.querySelectorAll(\":enabled\").length && m.push(\":enabled\", \":disabled\"), h.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(\":disabled\").length && m.push(\":enabled\", \":disabled\"), e.querySelectorAll(\"*,:x\"), m.push(\",.*:\");\n      })), (n.matchesSelector = J.test(y = h.matches || h.webkitMatchesSelector || h.mozMatchesSelector || h.oMatchesSelector || h.msMatchesSelector)) && ue(function (e) {\n        n.disconnectedMatch = y.call(e, \"*\"), y.call(e, \"[s!='']:x\"), v.push(\"!=\", X);\n      }), m = m.length && new RegExp(m.join(\"|\")), v = v.length && new RegExp(v.join(\"|\")), t = J.test(h.compareDocumentPosition), b = t || J.test(h.contains) ? function (e, t) {\n        var n = 9 === e.nodeType ? e.documentElement : e,\n            r = t && t.parentNode;\n        return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));\n      } : function (e, t) {\n        if (t) for (; t = t.parentNode;) {\n          if (t === e) return !0;\n        }\n        return !1;\n      }, A = t ? function (e, t) {\n        if (e === t) return f = !0, 0;\n        var r = !e.compareDocumentPosition - !t.compareDocumentPosition;\n        return r || (1 & (r = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !n.sortDetached && t.compareDocumentPosition(e) === r ? e === d || e.ownerDocument === w && b(w, e) ? -1 : t === d || t.ownerDocument === w && b(w, t) ? 1 : u ? O(u, e) - O(u, t) : 0 : 4 & r ? -1 : 1);\n      } : function (e, t) {\n        if (e === t) return f = !0, 0;\n        var n,\n            r = 0,\n            i = e.parentNode,\n            o = t.parentNode,\n            s = [e],\n            a = [t];\n        if (!i || !o) return e === d ? -1 : t === d ? 1 : i ? -1 : o ? 1 : u ? O(u, e) - O(u, t) : 0;\n        if (i === o) return pe(e, t);\n\n        for (n = e; n = n.parentNode;) {\n          s.unshift(n);\n        }\n\n        for (n = t; n = n.parentNode;) {\n          a.unshift(n);\n        }\n\n        for (; s[r] === a[r];) {\n          r++;\n        }\n\n        return r ? pe(s[r], a[r]) : s[r] === w ? -1 : a[r] === w ? 1 : 0;\n      }), d;\n    }, ae.matches = function (e, t) {\n      return ae(e, null, null, t);\n    }, ae.matchesSelector = function (e, t) {\n      if ((e.ownerDocument || e) !== d && p(e), n.matchesSelector && g && !k[t + \" \"] && (!v || !v.test(t)) && (!m || !m.test(t))) try {\n        var r = y.call(e, t);\n        if (r || n.disconnectedMatch || e.document && 11 !== e.document.nodeType) return r;\n      } catch (e) {\n        k(t, !0);\n      }\n      return 0 < ae(t, d, null, [e]).length;\n    }, ae.contains = function (e, t) {\n      return (e.ownerDocument || e) !== d && p(e), b(e, t);\n    }, ae.attr = function (e, t) {\n      (e.ownerDocument || e) !== d && p(e);\n      var i = r.attrHandle[t.toLowerCase()],\n          o = i && D.call(r.attrHandle, t.toLowerCase()) ? i(e, t, !g) : void 0;\n      return void 0 !== o ? o : n.attributes || !g ? e.getAttribute(t) : (o = e.getAttributeNode(t)) && o.specified ? o.value : null;\n    }, ae.escape = function (e) {\n      return (e + \"\").replace(re, ie);\n    }, ae.error = function (e) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + e);\n    }, ae.uniqueSort = function (e) {\n      var t,\n          r = [],\n          i = 0,\n          o = 0;\n\n      if (f = !n.detectDuplicates, u = !n.sortStable && e.slice(0), e.sort(A), f) {\n        for (; t = e[o++];) {\n          t === e[o] && (i = r.push(o));\n        }\n\n        for (; i--;) {\n          e.splice(r[i], 1);\n        }\n      }\n\n      return u = null, e;\n    }, i = ae.getText = function (e) {\n      var t,\n          n = \"\",\n          r = 0,\n          o = e.nodeType;\n\n      if (o) {\n        if (1 === o || 9 === o || 11 === o) {\n          if (\"string\" == typeof e.textContent) return e.textContent;\n\n          for (e = e.firstChild; e; e = e.nextSibling) {\n            n += i(e);\n          }\n        } else if (3 === o || 4 === o) return e.nodeValue;\n      } else for (; t = e[r++];) {\n        n += i(t);\n      }\n\n      return n;\n    }, (r = ae.selectors = {\n      cacheLength: 50,\n      createPseudo: ce,\n      match: V,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(e) {\n          return e[1] = e[1].replace(te, ne), e[3] = (e[3] || e[4] || e[5] || \"\").replace(te, ne), \"~=\" === e[2] && (e[3] = \" \" + e[3] + \" \"), e.slice(0, 4);\n        },\n        CHILD: function CHILD(e) {\n          return e[1] = e[1].toLowerCase(), \"nth\" === e[1].slice(0, 3) ? (e[3] || ae.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * (\"even\" === e[3] || \"odd\" === e[3])), e[5] = +(e[7] + e[8] || \"odd\" === e[3])) : e[3] && ae.error(e[0]), e;\n        },\n        PSEUDO: function PSEUDO(e) {\n          var t,\n              n = !e[6] && e[2];\n          return V.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || \"\" : n && U.test(n) && (t = s(n, !0)) && (t = n.indexOf(\")\", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(e) {\n          var t = e.replace(te, ne).toLowerCase();\n          return \"*\" === e ? function () {\n            return !0;\n          } : function (e) {\n            return e.nodeName && e.nodeName.toLowerCase() === t;\n          };\n        },\n        CLASS: function CLASS(e) {\n          var t = C[e + \" \"];\n          return t || (t = new RegExp(\"(^|\" + Y + \")\" + e + \"(\" + Y + \"|$)\")) && C(e, function (e) {\n            return t.test(\"string\" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(e, t, n) {\n          return function (r) {\n            var i = ae.attr(r, e);\n            return null == i ? \"!=\" === t : !t || (i += \"\", \"=\" === t ? i === n : \"!=\" === t ? i !== n : \"^=\" === t ? n && 0 === i.indexOf(n) : \"*=\" === t ? n && -1 < i.indexOf(n) : \"$=\" === t ? n && i.slice(-n.length) === n : \"~=\" === t ? -1 < (\" \" + i.replace(B, \" \") + \" \").indexOf(n) : \"|=\" === t && (i === n || i.slice(0, n.length + 1) === n + \"-\"));\n          };\n        },\n        CHILD: function CHILD(e, t, n, r, i) {\n          var o = \"nth\" !== e.slice(0, 3),\n              s = \"last\" !== e.slice(-4),\n              a = \"of-type\" === t;\n          return 1 === r && 0 === i ? function (e) {\n            return !!e.parentNode;\n          } : function (t, n, l) {\n            var c,\n                u,\n                f,\n                p,\n                d,\n                h,\n                g = o !== s ? \"nextSibling\" : \"previousSibling\",\n                m = t.parentNode,\n                v = a && t.nodeName.toLowerCase(),\n                y = !l && !a,\n                b = !1;\n\n            if (m) {\n              if (o) {\n                for (; g;) {\n                  for (p = t; p = p[g];) {\n                    if (a ? p.nodeName.toLowerCase() === v : 1 === p.nodeType) return !1;\n                  }\n\n                  h = g = \"only\" === e && !h && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (h = [s ? m.firstChild : m.lastChild], s && y) {\n                for (b = (d = (c = (u = (f = (p = m)[x] || (p[x] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && c[1]) && c[2], p = d && m.childNodes[d]; p = ++d && p && p[g] || (b = d = 0) || h.pop();) {\n                  if (1 === p.nodeType && ++b && p === t) {\n                    u[e] = [T, d, b];\n                    break;\n                  }\n                }\n              } else if (y && (b = d = (c = (u = (f = (p = t)[x] || (p[x] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && c[1]), !1 === b) for (; (p = ++d && p && p[g] || (b = d = 0) || h.pop()) && ((a ? p.nodeName.toLowerCase() !== v : 1 !== p.nodeType) || !++b || (y && ((u = (f = p[x] || (p[x] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] = [T, b]), p !== t));) {\n                ;\n              }\n\n              return (b -= i) === r || b % r == 0 && 0 <= b / r;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(e, t) {\n          var n,\n              i = r.pseudos[e] || r.setFilters[e.toLowerCase()] || ae.error(\"unsupported pseudo: \" + e);\n          return i[x] ? i(t) : 1 < i.length ? (n = [e, e, \"\", t], r.setFilters.hasOwnProperty(e.toLowerCase()) ? ce(function (e, n) {\n            for (var r, o = i(e, t), s = o.length; s--;) {\n              e[r = O(e, o[s])] = !(n[r] = o[s]);\n            }\n          }) : function (e) {\n            return i(e, 0, n);\n          }) : i;\n        }\n      },\n      pseudos: {\n        not: ce(function (e) {\n          var t = [],\n              n = [],\n              r = a(e.replace(I, \"$1\"));\n          return r[x] ? ce(function (e, t, n, i) {\n            for (var o, s = r(e, null, i, []), a = e.length; a--;) {\n              (o = s[a]) && (e[a] = !(t[a] = o));\n            }\n          }) : function (e, i, o) {\n            return t[0] = e, r(t, null, o, n), t[0] = null, !n.pop();\n          };\n        }),\n        has: ce(function (e) {\n          return function (t) {\n            return 0 < ae(e, t).length;\n          };\n        }),\n        contains: ce(function (e) {\n          return e = e.replace(te, ne), function (t) {\n            return -1 < (t.textContent || i(t)).indexOf(e);\n          };\n        }),\n        lang: ce(function (e) {\n          return z.test(e || \"\") || ae.error(\"unsupported lang: \" + e), e = e.replace(te, ne).toLowerCase(), function (t) {\n            var n;\n\n            do {\n              if (n = g ? t.lang : t.getAttribute(\"xml:lang\") || t.getAttribute(\"lang\")) return (n = n.toLowerCase()) === e || 0 === n.indexOf(e + \"-\");\n            } while ((t = t.parentNode) && 1 === t.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function target(t) {\n          var n = e.location && e.location.hash;\n          return n && n.slice(1) === t.id;\n        },\n        root: function root(e) {\n          return e === h;\n        },\n        focus: function focus(e) {\n          return e === d.activeElement && (!d.hasFocus || d.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);\n        },\n        enabled: ge(!1),\n        disabled: ge(!0),\n        checked: function checked(e) {\n          var t = e.nodeName.toLowerCase();\n          return \"input\" === t && !!e.checked || \"option\" === t && !!e.selected;\n        },\n        selected: function selected(e) {\n          return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;\n        },\n        empty: function empty(e) {\n          for (e = e.firstChild; e; e = e.nextSibling) {\n            if (e.nodeType < 6) return !1;\n          }\n\n          return !0;\n        },\n        parent: function parent(e) {\n          return !r.pseudos.empty(e);\n        },\n        header: function header(e) {\n          return Q.test(e.nodeName);\n        },\n        input: function input(e) {\n          return G.test(e.nodeName);\n        },\n        button: function button(e) {\n          var t = e.nodeName.toLowerCase();\n          return \"input\" === t && \"button\" === e.type || \"button\" === t;\n        },\n        text: function text(e) {\n          var t;\n          return \"input\" === e.nodeName.toLowerCase() && \"text\" === e.type && (null == (t = e.getAttribute(\"type\")) || \"text\" === t.toLowerCase());\n        },\n        first: me(function () {\n          return [0];\n        }),\n        last: me(function (e, t) {\n          return [t - 1];\n        }),\n        eq: me(function (e, t, n) {\n          return [n < 0 ? n + t : n];\n        }),\n        even: me(function (e, t) {\n          for (var n = 0; n < t; n += 2) {\n            e.push(n);\n          }\n\n          return e;\n        }),\n        odd: me(function (e, t) {\n          for (var n = 1; n < t; n += 2) {\n            e.push(n);\n          }\n\n          return e;\n        }),\n        lt: me(function (e, t, n) {\n          for (var r = n < 0 ? n + t : t < n ? t : n; 0 <= --r;) {\n            e.push(r);\n          }\n\n          return e;\n        }),\n        gt: me(function (e, t, n) {\n          for (var r = n < 0 ? n + t : n; ++r < t;) {\n            e.push(r);\n          }\n\n          return e;\n        })\n      }\n    }).pseudos.nth = r.pseudos.eq, {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) {\n      r.pseudos[t] = de(t);\n    }\n\n    for (t in {\n      submit: !0,\n      reset: !0\n    }) {\n      r.pseudos[t] = he(t);\n    }\n\n    function ye() {}\n\n    function be(e) {\n      for (var t = 0, n = e.length, r = \"\"; t < n; t++) {\n        r += e[t].value;\n      }\n\n      return r;\n    }\n\n    function xe(e, t, n) {\n      var r = t.dir,\n          i = t.next,\n          o = i || r,\n          s = n && \"parentNode\" === o,\n          a = E++;\n      return t.first ? function (t, n, i) {\n        for (; t = t[r];) {\n          if (1 === t.nodeType || s) return e(t, n, i);\n        }\n\n        return !1;\n      } : function (t, n, l) {\n        var c,\n            u,\n            f,\n            p = [T, a];\n\n        if (l) {\n          for (; t = t[r];) {\n            if ((1 === t.nodeType || s) && e(t, n, l)) return !0;\n          }\n        } else for (; t = t[r];) {\n          if (1 === t.nodeType || s) if (u = (f = t[x] || (t[x] = {}))[t.uniqueID] || (f[t.uniqueID] = {}), i && i === t.nodeName.toLowerCase()) t = t[r] || t;else {\n            if ((c = u[o]) && c[0] === T && c[1] === a) return p[2] = c[2];\n            if ((u[o] = p)[2] = e(t, n, l)) return !0;\n          }\n        }\n\n        return !1;\n      };\n    }\n\n    function we(e) {\n      return 1 < e.length ? function (t, n, r) {\n        for (var i = e.length; i--;) {\n          if (!e[i](t, n, r)) return !1;\n        }\n\n        return !0;\n      } : e[0];\n    }\n\n    function Te(e, t, n, r, i) {\n      for (var o, s = [], a = 0, l = e.length, c = null != t; a < l; a++) {\n        (o = e[a]) && (n && !n(o, r, i) || (s.push(o), c && t.push(a)));\n      }\n\n      return s;\n    }\n\n    function Ee(e, t, n, r, i, o) {\n      return r && !r[x] && (r = Ee(r)), i && !i[x] && (i = Ee(i, o)), ce(function (o, s, a, l) {\n        var c,\n            u,\n            f,\n            p = [],\n            d = [],\n            h = s.length,\n            g = o || function (e, t, n) {\n          for (var r = 0, i = t.length; r < i; r++) {\n            ae(e, t[r], n);\n          }\n\n          return n;\n        }(t || \"*\", a.nodeType ? [a] : a, []),\n            m = !e || !o && t ? g : Te(g, p, e, a, l),\n            v = n ? i || (o ? e : h || r) ? [] : s : m;\n\n        if (n && n(m, v, a, l), r) for (c = Te(v, d), r(c, [], a, l), u = c.length; u--;) {\n          (f = c[u]) && (v[d[u]] = !(m[d[u]] = f));\n        }\n\n        if (o) {\n          if (i || e) {\n            if (i) {\n              for (c = [], u = v.length; u--;) {\n                (f = v[u]) && c.push(m[u] = f);\n              }\n\n              i(null, v = [], c, l);\n            }\n\n            for (u = v.length; u--;) {\n              (f = v[u]) && -1 < (c = i ? O(o, f) : p[u]) && (o[c] = !(s[c] = f));\n            }\n          }\n        } else v = Te(v === s ? v.splice(h, v.length) : v), i ? i(null, s, v, l) : W.apply(s, v);\n      });\n    }\n\n    function Ce(e) {\n      for (var t, n, i, o = e.length, s = r.relative[e[0].type], a = s || r.relative[\" \"], l = s ? 1 : 0, u = xe(function (e) {\n        return e === t;\n      }, a, !0), f = xe(function (e) {\n        return -1 < O(t, e);\n      }, a, !0), p = [function (e, n, r) {\n        var i = !s && (r || n !== c) || ((t = n).nodeType ? u(e, n, r) : f(e, n, r));\n        return t = null, i;\n      }]; l < o; l++) {\n        if (n = r.relative[e[l].type]) p = [xe(we(p), n)];else {\n          if ((n = r.filter[e[l].type].apply(null, e[l].matches))[x]) {\n            for (i = ++l; i < o && !r.relative[e[i].type]; i++) {\n              ;\n            }\n\n            return Ee(1 < l && we(p), 1 < l && be(e.slice(0, l - 1).concat({\n              value: \" \" === e[l - 2].type ? \"*\" : \"\"\n            })).replace(I, \"$1\"), n, l < i && Ce(e.slice(l, i)), i < o && Ce(e = e.slice(i)), i < o && be(e));\n          }\n\n          p.push(n);\n        }\n      }\n\n      return we(p);\n    }\n\n    return ye.prototype = r.filters = r.pseudos, r.setFilters = new ye(), s = ae.tokenize = function (e, t) {\n      var n,\n          i,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u = S[e + \" \"];\n      if (u) return t ? 0 : u.slice(0);\n\n      for (a = e, l = [], c = r.preFilter; a;) {\n        for (s in n && !(i = F.exec(a)) || (i && (a = a.slice(i[0].length) || a), l.push(o = [])), n = !1, (i = $.exec(a)) && (n = i.shift(), o.push({\n          value: n,\n          type: i[0].replace(I, \" \")\n        }), a = a.slice(n.length)), r.filter) {\n          !(i = V[s].exec(a)) || c[s] && !(i = c[s](i)) || (n = i.shift(), o.push({\n            value: n,\n            type: s,\n            matches: i\n          }), a = a.slice(n.length));\n        }\n\n        if (!n) break;\n      }\n\n      return t ? a.length : a ? ae.error(e) : S(e, l).slice(0);\n    }, a = ae.compile = function (e, t) {\n      var n,\n          i,\n          o,\n          a,\n          l,\n          u,\n          f = [],\n          h = [],\n          m = L[e + \" \"];\n\n      if (!m) {\n        for (t || (t = s(e)), n = t.length; n--;) {\n          (m = Ce(t[n]))[x] ? f.push(m) : h.push(m);\n        }\n\n        (m = L(e, (i = h, a = 0 < (o = f).length, l = 0 < i.length, u = function u(e, t, n, s, _u) {\n          var f,\n              h,\n              m,\n              v = 0,\n              y = \"0\",\n              b = e && [],\n              x = [],\n              w = c,\n              E = e || l && r.find.TAG(\"*\", _u),\n              C = T += null == w ? 1 : Math.random() || .1,\n              S = E.length;\n\n          for (_u && (c = t === d || t || _u); y !== S && null != (f = E[y]); y++) {\n            if (l && f) {\n              for (h = 0, t || f.ownerDocument === d || (p(f), n = !g); m = i[h++];) {\n                if (m(f, t || d, n)) {\n                  s.push(f);\n                  break;\n                }\n              }\n\n              _u && (T = C);\n            }\n\n            a && ((f = !m && f) && v--, e && b.push(f));\n          }\n\n          if (v += y, a && y !== v) {\n            for (h = 0; m = o[h++];) {\n              m(b, x, t, n);\n            }\n\n            if (e) {\n              if (0 < v) for (; y--;) {\n                b[y] || x[y] || (x[y] = H.call(s));\n              }\n              x = Te(x);\n            }\n\n            W.apply(s, x), _u && !e && 0 < x.length && 1 < v + o.length && ae.uniqueSort(s);\n          }\n\n          return _u && (T = C, c = w), b;\n        }, a ? ce(u) : u))).selector = e;\n      }\n\n      return m;\n    }, l = ae.select = function (e, t, n, i) {\n      var o,\n          l,\n          c,\n          u,\n          f,\n          p = \"function\" == typeof e && e,\n          d = !i && s(e = p.selector || e);\n\n      if (n = n || [], 1 === d.length) {\n        if (2 < (l = d[0] = d[0].slice(0)).length && \"ID\" === (c = l[0]).type && 9 === t.nodeType && g && r.relative[l[1].type]) {\n          if (!(t = (r.find.ID(c.matches[0].replace(te, ne), t) || [])[0])) return n;\n          p && (t = t.parentNode), e = e.slice(l.shift().value.length);\n        }\n\n        for (o = V.needsContext.test(e) ? 0 : l.length; o-- && (c = l[o], !r.relative[u = c.type]);) {\n          if ((f = r.find[u]) && (i = f(c.matches[0].replace(te, ne), ee.test(l[0].type) && ve(t.parentNode) || t))) {\n            if (l.splice(o, 1), !(e = i.length && be(l))) return W.apply(n, i), n;\n            break;\n          }\n        }\n      }\n\n      return (p || a(e, d))(i, t, !g, n, !t || ee.test(e) && ve(t.parentNode) || t), n;\n    }, n.sortStable = x.split(\"\").sort(A).join(\"\") === x, n.detectDuplicates = !!f, p(), n.sortDetached = ue(function (e) {\n      return 1 & e.compareDocumentPosition(d.createElement(\"fieldset\"));\n    }), ue(function (e) {\n      return e.innerHTML = \"<a href='#'></a>\", \"#\" === e.firstChild.getAttribute(\"href\");\n    }) || fe(\"type|href|height|width\", function (e, t, n) {\n      if (!n) return e.getAttribute(t, \"type\" === t.toLowerCase() ? 1 : 2);\n    }), n.attributes && ue(function (e) {\n      return e.innerHTML = \"<input/>\", e.firstChild.setAttribute(\"value\", \"\"), \"\" === e.firstChild.getAttribute(\"value\");\n    }) || fe(\"value\", function (e, t, n) {\n      if (!n && \"input\" === e.nodeName.toLowerCase()) return e.defaultValue;\n    }), ue(function (e) {\n      return null == e.getAttribute(\"disabled\");\n    }) || fe(P, function (e, t, n) {\n      var r;\n      if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;\n    }), ae;\n  }(e);\n\n  w.find = C, w.expr = C.selectors, w.expr[\":\"] = w.expr.pseudos, w.uniqueSort = w.unique = C.uniqueSort, w.text = C.getText, w.isXMLDoc = C.isXML, w.contains = C.contains, w.escapeSelector = C.escape;\n\n  var S = function S(e, t, n) {\n    for (var r = [], i = void 0 !== n; (e = e[t]) && 9 !== e.nodeType;) {\n      if (1 === e.nodeType) {\n        if (i && w(e).is(n)) break;\n        r.push(e);\n      }\n    }\n\n    return r;\n  },\n      L = function L(e, t) {\n    for (var n = []; e; e = e.nextSibling) {\n      1 === e.nodeType && e !== t && n.push(e);\n    }\n\n    return n;\n  },\n      k = w.expr.match.needsContext;\n\n  function A(e, t) {\n    return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();\n  }\n\n  var D = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n\n  function N(e, t, n) {\n    return g(t) ? w.grep(e, function (e, r) {\n      return !!t.call(e, r, e) !== n;\n    }) : t.nodeType ? w.grep(e, function (e) {\n      return e === t !== n;\n    }) : \"string\" != typeof t ? w.grep(e, function (e) {\n      return -1 < l.call(t, e) !== n;\n    }) : w.filter(t, e, n);\n  }\n\n  w.filter = function (e, t, n) {\n    var r = t[0];\n    return n && (e = \":not(\" + e + \")\"), 1 === t.length && 1 === r.nodeType ? w.find.matchesSelector(r, e) ? [r] : [] : w.find.matches(e, w.grep(t, function (e) {\n      return 1 === e.nodeType;\n    }));\n  }, w.fn.extend({\n    find: function find(e) {\n      var t,\n          n,\n          r = this.length,\n          i = this;\n      if (\"string\" != typeof e) return this.pushStack(w(e).filter(function () {\n        for (t = 0; t < r; t++) {\n          if (w.contains(i[t], this)) return !0;\n        }\n      }));\n\n      for (n = this.pushStack([]), t = 0; t < r; t++) {\n        w.find(e, i[t], n);\n      }\n\n      return 1 < r ? w.uniqueSort(n) : n;\n    },\n    filter: function filter(e) {\n      return this.pushStack(N(this, e || [], !1));\n    },\n    not: function not(e) {\n      return this.pushStack(N(this, e || [], !0));\n    },\n    is: function is(e) {\n      return !!N(this, \"string\" == typeof e && k.test(e) ? w(e) : e || [], !1).length;\n    }\n  });\n  var H,\n      j = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;\n  (w.fn.init = function (e, t, n) {\n    var i, o;\n    if (!e) return this;\n\n    if (n = n || H, \"string\" == typeof e) {\n      if (!(i = \"<\" === e[0] && \">\" === e[e.length - 1] && 3 <= e.length ? [null, e, null] : j.exec(e)) || !i[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);\n\n      if (i[1]) {\n        if (t = t instanceof w ? t[0] : t, w.merge(this, w.parseHTML(i[1], t && t.nodeType ? t.ownerDocument || t : r, !0)), D.test(i[1]) && w.isPlainObject(t)) for (i in t) {\n          g(this[i]) ? this[i](t[i]) : this.attr(i, t[i]);\n        }\n        return this;\n      }\n\n      return (o = r.getElementById(i[2])) && (this[0] = o, this.length = 1), this;\n    }\n\n    return e.nodeType ? (this[0] = e, this.length = 1, this) : g(e) ? void 0 !== n.ready ? n.ready(e) : e(w) : w.makeArray(e, this);\n  }).prototype = w.fn, H = w(r);\n  var W = /^(?:parents|prev(?:Until|All))/,\n      R = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n\n  function O(e, t) {\n    for (; (e = e[t]) && 1 !== e.nodeType;) {\n      ;\n    }\n\n    return e;\n  }\n\n  w.fn.extend({\n    has: function has(e) {\n      var t = w(e, this),\n          n = t.length;\n      return this.filter(function () {\n        for (var e = 0; e < n; e++) {\n          if (w.contains(this, t[e])) return !0;\n        }\n      });\n    },\n    closest: function closest(e, t) {\n      var n,\n          r = 0,\n          i = this.length,\n          o = [],\n          s = \"string\" != typeof e && w(e);\n      if (!k.test(e)) for (; r < i; r++) {\n        for (n = this[r]; n && n !== t; n = n.parentNode) {\n          if (n.nodeType < 11 && (s ? -1 < s.index(n) : 1 === n.nodeType && w.find.matchesSelector(n, e))) {\n            o.push(n);\n            break;\n          }\n        }\n      }\n      return this.pushStack(1 < o.length ? w.uniqueSort(o) : o);\n    },\n    index: function index(e) {\n      return e ? \"string\" == typeof e ? l.call(w(e), this[0]) : l.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(e, t) {\n      return this.pushStack(w.uniqueSort(w.merge(this.get(), w(e, t))));\n    },\n    addBack: function addBack(e) {\n      return this.add(null == e ? this.prevObject : this.prevObject.filter(e));\n    }\n  }), w.each({\n    parent: function parent(e) {\n      var t = e.parentNode;\n      return t && 11 !== t.nodeType ? t : null;\n    },\n    parents: function parents(e) {\n      return S(e, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(e, t, n) {\n      return S(e, \"parentNode\", n);\n    },\n    next: function next(e) {\n      return O(e, \"nextSibling\");\n    },\n    prev: function prev(e) {\n      return O(e, \"previousSibling\");\n    },\n    nextAll: function nextAll(e) {\n      return S(e, \"nextSibling\");\n    },\n    prevAll: function prevAll(e) {\n      return S(e, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(e, t, n) {\n      return S(e, \"nextSibling\", n);\n    },\n    prevUntil: function prevUntil(e, t, n) {\n      return S(e, \"previousSibling\", n);\n    },\n    siblings: function siblings(e) {\n      return L((e.parentNode || {}).firstChild, e);\n    },\n    children: function children(e) {\n      return L(e.firstChild);\n    },\n    contents: function contents(e) {\n      return void 0 !== e.contentDocument ? e.contentDocument : (A(e, \"template\") && (e = e.content || e), w.merge([], e.childNodes));\n    }\n  }, function (e, t) {\n    w.fn[e] = function (n, r) {\n      var i = w.map(this, t, n);\n      return \"Until\" !== e.slice(-5) && (r = n), r && \"string\" == typeof r && (i = w.filter(r, i)), 1 < this.length && (R[e] || w.uniqueSort(i), W.test(e) && i.reverse()), this.pushStack(i);\n    };\n  });\n  var P = /[^\\x20\\t\\r\\n\\f]+/g;\n\n  function Y(e) {\n    return e;\n  }\n\n  function q(e) {\n    throw e;\n  }\n\n  function M(e, t, n, r) {\n    var i;\n\n    try {\n      e && g(i = e.promise) ? i.call(e).done(t).fail(n) : e && g(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r));\n    } catch (e) {\n      n.apply(void 0, [e]);\n    }\n  }\n\n  w.Callbacks = function (e) {\n    var t, n;\n    e = \"string\" == typeof e ? (t = e, n = {}, w.each(t.match(P) || [], function (e, t) {\n      n[t] = !0;\n    }), n) : w.extend({}, e);\n\n    var r,\n        i,\n        o,\n        s,\n        a = [],\n        l = [],\n        c = -1,\n        u = function u() {\n      for (s = s || e.once, o = r = !0; l.length; c = -1) {\n        for (i = l.shift(); ++c < a.length;) {\n          !1 === a[c].apply(i[0], i[1]) && e.stopOnFalse && (c = a.length, i = !1);\n        }\n      }\n\n      e.memory || (i = !1), r = !1, s && (a = i ? [] : \"\");\n    },\n        f = {\n      add: function add() {\n        return a && (i && !r && (c = a.length - 1, l.push(i)), function t(n) {\n          w.each(n, function (n, r) {\n            g(r) ? e.unique && f.has(r) || a.push(r) : r && r.length && \"string\" !== b(r) && t(r);\n          });\n        }(arguments), i && !r && u()), this;\n      },\n      remove: function remove() {\n        return w.each(arguments, function (e, t) {\n          for (var n; -1 < (n = w.inArray(t, a, n));) {\n            a.splice(n, 1), n <= c && c--;\n          }\n        }), this;\n      },\n      has: function has(e) {\n        return e ? -1 < w.inArray(e, a) : 0 < a.length;\n      },\n      empty: function empty() {\n        return a && (a = []), this;\n      },\n      disable: function disable() {\n        return s = l = [], a = i = \"\", this;\n      },\n      disabled: function disabled() {\n        return !a;\n      },\n      lock: function lock() {\n        return s = l = [], i || r || (a = i = \"\"), this;\n      },\n      locked: function locked() {\n        return !!s;\n      },\n      fireWith: function fireWith(e, t) {\n        return s || (t = [e, (t = t || []).slice ? t.slice() : t], l.push(t), r || u()), this;\n      },\n      fire: function fire() {\n        return f.fireWith(this, arguments), this;\n      },\n      fired: function fired() {\n        return !!o;\n      }\n    };\n\n    return f;\n  }, w.extend({\n    Deferred: function Deferred(t) {\n      var n = [[\"notify\", \"progress\", w.Callbacks(\"memory\"), w.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", w.Callbacks(\"once memory\"), w.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", w.Callbacks(\"once memory\"), w.Callbacks(\"once memory\"), 1, \"rejected\"]],\n          r = \"pending\",\n          i = {\n        state: function state() {\n          return r;\n        },\n        always: function always() {\n          return o.done(arguments).fail(arguments), this;\n        },\n        \"catch\": function _catch(e) {\n          return i.then(null, e);\n        },\n        pipe: function pipe() {\n          var e = arguments;\n          return w.Deferred(function (t) {\n            w.each(n, function (n, r) {\n              var i = g(e[r[4]]) && e[r[4]];\n              o[r[1]](function () {\n                var e = i && i.apply(this, arguments);\n                e && g(e.promise) ? e.promise().progress(t.notify).done(t.resolve).fail(t.reject) : t[r[0] + \"With\"](this, i ? [e] : arguments);\n              });\n            }), e = null;\n          }).promise();\n        },\n        then: function then(t, r, i) {\n          var o = 0;\n\n          function s(t, n, r, i) {\n            return function () {\n              var a = this,\n                  l = arguments,\n                  c = function c() {\n                var e, c;\n\n                if (!(t < o)) {\n                  if ((e = r.apply(a, l)) === n.promise()) throw new TypeError(\"Thenable self-resolution\");\n                  c = e && (\"object\" == _typeof(e) || \"function\" == typeof e) && e.then, g(c) ? i ? c.call(e, s(o, n, Y, i), s(o, n, q, i)) : (o++, c.call(e, s(o, n, Y, i), s(o, n, q, i), s(o, n, Y, n.notifyWith))) : (r !== Y && (a = void 0, l = [e]), (i || n.resolveWith)(a, l));\n                }\n              },\n                  u = i ? c : function () {\n                try {\n                  c();\n                } catch (e) {\n                  w.Deferred.exceptionHook && w.Deferred.exceptionHook(e, u.stackTrace), o <= t + 1 && (r !== q && (a = void 0, l = [e]), n.rejectWith(a, l));\n                }\n              };\n\n              t ? u() : (w.Deferred.getStackHook && (u.stackTrace = w.Deferred.getStackHook()), e.setTimeout(u));\n            };\n          }\n\n          return w.Deferred(function (e) {\n            n[0][3].add(s(0, e, g(i) ? i : Y, e.notifyWith)), n[1][3].add(s(0, e, g(t) ? t : Y)), n[2][3].add(s(0, e, g(r) ? r : q));\n          }).promise();\n        },\n        promise: function promise(e) {\n          return null != e ? w.extend(e, i) : i;\n        }\n      },\n          o = {};\n      return w.each(n, function (e, t) {\n        var s = t[2],\n            a = t[5];\n        i[t[1]] = s.add, a && s.add(function () {\n          r = a;\n        }, n[3 - e][2].disable, n[3 - e][3].disable, n[0][2].lock, n[0][3].lock), s.add(t[3].fire), o[t[0]] = function () {\n          return o[t[0] + \"With\"](this === o ? void 0 : this, arguments), this;\n        }, o[t[0] + \"With\"] = s.fireWith;\n      }), i.promise(o), t && t.call(o, o), o;\n    },\n    when: function when(e) {\n      var t = arguments.length,\n          n = t,\n          r = Array(n),\n          i = o.call(arguments),\n          s = w.Deferred(),\n          a = function a(e) {\n        return function (n) {\n          r[e] = this, i[e] = 1 < arguments.length ? o.call(arguments) : n, --t || s.resolveWith(r, i);\n        };\n      };\n\n      if (t <= 1 && (M(e, s.done(a(n)).resolve, s.reject, !t), \"pending\" === s.state() || g(i[n] && i[n].then))) return s.then();\n\n      for (; n--;) {\n        M(i[n], a(n), s.reject);\n      }\n\n      return s.promise();\n    }\n  });\n  var X = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n  w.Deferred.exceptionHook = function (t, n) {\n    e.console && e.console.warn && t && X.test(t.name) && e.console.warn(\"jQuery.Deferred exception: \" + t.message, t.stack, n);\n  }, w.readyException = function (t) {\n    e.setTimeout(function () {\n      throw t;\n    });\n  };\n  var B = w.Deferred();\n\n  function I() {\n    r.removeEventListener(\"DOMContentLoaded\", I), e.removeEventListener(\"load\", I), w.ready();\n  }\n\n  w.fn.ready = function (e) {\n    return B.then(e)[\"catch\"](function (e) {\n      w.readyException(e);\n    }), this;\n  }, w.extend({\n    isReady: !1,\n    readyWait: 1,\n    ready: function ready(e) {\n      (!0 === e ? --w.readyWait : w.isReady) || (w.isReady = !0) !== e && 0 < --w.readyWait || B.resolveWith(r, [w]);\n    }\n  }), w.ready.then = B.then, \"complete\" === r.readyState || \"loading\" !== r.readyState && !r.documentElement.doScroll ? e.setTimeout(w.ready) : (r.addEventListener(\"DOMContentLoaded\", I), e.addEventListener(\"load\", I));\n\n  var F = function F(e, t, n, r, i, o, s) {\n    var a = 0,\n        l = e.length,\n        c = null == n;\n    if (\"object\" === b(n)) for (a in i = !0, n) {\n      F(e, t, a, n[a], !0, o, s);\n    } else if (void 0 !== r && (i = !0, g(r) || (s = !0), c && (s ? (t.call(e, r), t = null) : (c = t, t = function t(e, _t2, n) {\n      return c.call(w(e), n);\n    })), t)) for (; a < l; a++) {\n      t(e[a], n, s ? r : r.call(e[a], a, t(e[a], n)));\n    }\n    return i ? e : c ? t.call(e) : l ? t(e[0], n) : o;\n  },\n      $ = /^-ms-/,\n      _ = /-([a-z])/g;\n\n  function U(e, t) {\n    return t.toUpperCase();\n  }\n\n  function z(e) {\n    return e.replace($, \"ms-\").replace(_, U);\n  }\n\n  var V = function V(e) {\n    return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;\n  };\n\n  function K() {\n    this.expando = w.expando + K.uid++;\n  }\n\n  K.uid = 1, K.prototype = {\n    cache: function cache(e) {\n      var t = e[this.expando];\n      return t || (t = {}, V(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {\n        value: t,\n        configurable: !0\n      }))), t;\n    },\n    set: function set(e, t, n) {\n      var r,\n          i = this.cache(e);\n      if (\"string\" == typeof t) i[z(t)] = n;else for (r in t) {\n        i[z(r)] = t[r];\n      }\n      return i;\n    },\n    get: function get(e, t) {\n      return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][z(t)];\n    },\n    access: function access(e, t, n) {\n      return void 0 === t || t && \"string\" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t);\n    },\n    remove: function remove(e, t) {\n      var n,\n          r = e[this.expando];\n\n      if (void 0 !== r) {\n        if (void 0 !== t) {\n          n = (t = Array.isArray(t) ? t.map(z) : (t = z(t)) in r ? [t] : t.match(P) || []).length;\n\n          for (; n--;) {\n            delete r[t[n]];\n          }\n        }\n\n        (void 0 === t || w.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);\n      }\n    },\n    hasData: function hasData(e) {\n      var t = e[this.expando];\n      return void 0 !== t && !w.isEmptyObject(t);\n    }\n  };\n  var G = new K(),\n      Q = new K(),\n      J = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      Z = /[A-Z]/g;\n\n  function ee(e, t, n) {\n    var r, i;\n    if (void 0 === n && 1 === e.nodeType) if (r = \"data-\" + t.replace(Z, \"-$&\").toLowerCase(), \"string\" == typeof (n = e.getAttribute(r))) {\n      try {\n        n = \"true\" === (i = n) || \"false\" !== i && (\"null\" === i ? null : i === +i + \"\" ? +i : J.test(i) ? JSON.parse(i) : i);\n      } catch (e) {}\n\n      Q.set(e, t, n);\n    } else n = void 0;\n    return n;\n  }\n\n  w.extend({\n    hasData: function hasData(e) {\n      return Q.hasData(e) || G.hasData(e);\n    },\n    data: function data(e, t, n) {\n      return Q.access(e, t, n);\n    },\n    removeData: function removeData(e, t) {\n      Q.remove(e, t);\n    },\n    _data: function _data(e, t, n) {\n      return G.access(e, t, n);\n    },\n    _removeData: function _removeData(e, t) {\n      G.remove(e, t);\n    }\n  }), w.fn.extend({\n    data: function data(e, t) {\n      var n,\n          r,\n          i,\n          o = this[0],\n          s = o && o.attributes;\n\n      if (void 0 === e) {\n        if (this.length && (i = Q.get(o), 1 === o.nodeType && !G.get(o, \"hasDataAttrs\"))) {\n          for (n = s.length; n--;) {\n            s[n] && 0 === (r = s[n].name).indexOf(\"data-\") && (r = z(r.slice(5)), ee(o, r, i[r]));\n          }\n\n          G.set(o, \"hasDataAttrs\", !0);\n        }\n\n        return i;\n      }\n\n      return \"object\" == _typeof(e) ? this.each(function () {\n        Q.set(this, e);\n      }) : F(this, function (t) {\n        var n;\n        if (o && void 0 === t) return void 0 !== (n = Q.get(o, e)) ? n : void 0 !== (n = ee(o, e)) ? n : void 0;\n        this.each(function () {\n          Q.set(this, e, t);\n        });\n      }, null, t, 1 < arguments.length, null, !0);\n    },\n    removeData: function removeData(e) {\n      return this.each(function () {\n        Q.remove(this, e);\n      });\n    }\n  }), w.extend({\n    queue: function queue(e, t, n) {\n      var r;\n      if (e) return t = (t || \"fx\") + \"queue\", r = G.get(e, t), n && (!r || Array.isArray(n) ? r = G.access(e, t, w.makeArray(n)) : r.push(n)), r || [];\n    },\n    dequeue: function dequeue(e, t) {\n      t = t || \"fx\";\n\n      var n = w.queue(e, t),\n          r = n.length,\n          i = n.shift(),\n          o = w._queueHooks(e, t);\n\n      \"inprogress\" === i && (i = n.shift(), r--), i && (\"fx\" === t && n.unshift(\"inprogress\"), delete o.stop, i.call(e, function () {\n        w.dequeue(e, t);\n      }, o)), !r && o && o.empty.fire();\n    },\n    _queueHooks: function _queueHooks(e, t) {\n      var n = t + \"queueHooks\";\n      return G.get(e, n) || G.access(e, n, {\n        empty: w.Callbacks(\"once memory\").add(function () {\n          G.remove(e, [t + \"queue\", n]);\n        })\n      });\n    }\n  }), w.fn.extend({\n    queue: function queue(e, t) {\n      var n = 2;\n      return \"string\" != typeof e && (t = e, e = \"fx\", n--), arguments.length < n ? w.queue(this[0], e) : void 0 === t ? this : this.each(function () {\n        var n = w.queue(this, e, t);\n        w._queueHooks(this, e), \"fx\" === e && \"inprogress\" !== n[0] && w.dequeue(this, e);\n      });\n    },\n    dequeue: function dequeue(e) {\n      return this.each(function () {\n        w.dequeue(this, e);\n      });\n    },\n    clearQueue: function clearQueue(e) {\n      return this.queue(e || \"fx\", []);\n    },\n    promise: function promise(e, t) {\n      var n,\n          r = 1,\n          i = w.Deferred(),\n          o = this,\n          s = this.length,\n          a = function a() {\n        --r || i.resolveWith(o, [o]);\n      };\n\n      for (\"string\" != typeof e && (t = e, e = void 0), e = e || \"fx\"; s--;) {\n        (n = G.get(o[s], e + \"queueHooks\")) && n.empty && (r++, n.empty.add(a));\n      }\n\n      return a(), i.promise(t);\n    }\n  });\n\n  var te = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      ne = new RegExp(\"^(?:([+-])=|)(\" + te + \")([a-z%]*)$\", \"i\"),\n      re = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      ie = r.documentElement,\n      oe = function oe(e) {\n    return w.contains(e.ownerDocument, e);\n  },\n      se = {\n    composed: !0\n  };\n\n  ie.getRootNode && (oe = function oe(e) {\n    return w.contains(e.ownerDocument, e) || e.getRootNode(se) === e.ownerDocument;\n  });\n\n  var ae = function ae(e, t) {\n    return \"none\" === (e = t || e).style.display || \"\" === e.style.display && oe(e) && \"none\" === w.css(e, \"display\");\n  },\n      le = function le(e, t, n, r) {\n    var i,\n        o,\n        s = {};\n\n    for (o in t) {\n      s[o] = e.style[o], e.style[o] = t[o];\n    }\n\n    for (o in i = n.apply(e, r || []), t) {\n      e.style[o] = s[o];\n    }\n\n    return i;\n  };\n\n  function ce(e, t, n, r) {\n    var i,\n        o,\n        s = 20,\n        a = r ? function () {\n      return r.cur();\n    } : function () {\n      return w.css(e, t, \"\");\n    },\n        l = a(),\n        c = n && n[3] || (w.cssNumber[t] ? \"\" : \"px\"),\n        u = e.nodeType && (w.cssNumber[t] || \"px\" !== c && +l) && ne.exec(w.css(e, t));\n\n    if (u && u[3] !== c) {\n      for (l /= 2, c = c || u[3], u = +l || 1; s--;) {\n        w.style(e, t, u + c), (1 - o) * (1 - (o = a() / l || .5)) <= 0 && (s = 0), u /= o;\n      }\n\n      u *= 2, w.style(e, t, u + c), n = n || [];\n    }\n\n    return n && (u = +u || +l || 0, i = n[1] ? u + (n[1] + 1) * n[2] : +n[2], r && (r.unit = c, r.start = u, r.end = i)), i;\n  }\n\n  var ue = {};\n\n  function fe(e, t) {\n    for (var n, r, i, o, s, a, l, c = [], u = 0, f = e.length; u < f; u++) {\n      (r = e[u]).style && (n = r.style.display, t ? (\"none\" === n && (c[u] = G.get(r, \"display\") || null, c[u] || (r.style.display = \"\")), \"\" === r.style.display && ae(r) && (c[u] = (l = s = o = void 0, s = (i = r).ownerDocument, a = i.nodeName, (l = ue[a]) || (o = s.body.appendChild(s.createElement(a)), l = w.css(o, \"display\"), o.parentNode.removeChild(o), \"none\" === l && (l = \"block\"), ue[a] = l)))) : \"none\" !== n && (c[u] = \"none\", G.set(r, \"display\", n)));\n    }\n\n    for (u = 0; u < f; u++) {\n      null != c[u] && (e[u].style.display = c[u]);\n    }\n\n    return e;\n  }\n\n  w.fn.extend({\n    show: function show() {\n      return fe(this, !0);\n    },\n    hide: function hide() {\n      return fe(this);\n    },\n    toggle: function toggle(e) {\n      return \"boolean\" == typeof e ? e ? this.show() : this.hide() : this.each(function () {\n        ae(this) ? w(this).show() : w(this).hide();\n      });\n    }\n  });\n  var pe = /^(?:checkbox|radio)$/i,\n      de = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,\n      he = /^$|^module$|\\/(?:java|ecma)script/i,\n      ge = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n\n  function me(e, t) {\n    var n;\n    return n = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || \"*\") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || \"*\") : [], void 0 === t || t && A(e, t) ? w.merge([e], n) : n;\n  }\n\n  function ve(e, t) {\n    for (var n = 0, r = e.length; n < r; n++) {\n      G.set(e[n], \"globalEval\", !t || G.get(t[n], \"globalEval\"));\n    }\n  }\n\n  ge.optgroup = ge.option, ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td;\n  var ye,\n      be,\n      xe = /<|&#?\\w+;/;\n\n  function we(e, t, n, r, i) {\n    for (var o, s, a, l, c, u, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) {\n      if ((o = e[d]) || 0 === o) if (\"object\" === b(o)) w.merge(p, o.nodeType ? [o] : o);else if (xe.test(o)) {\n        for (s = s || f.appendChild(t.createElement(\"div\")), a = (de.exec(o) || [\"\", \"\"])[1].toLowerCase(), l = ge[a] || ge._default, s.innerHTML = l[1] + w.htmlPrefilter(o) + l[2], u = l[0]; u--;) {\n          s = s.lastChild;\n        }\n\n        w.merge(p, s.childNodes), (s = f.firstChild).textContent = \"\";\n      } else p.push(t.createTextNode(o));\n    }\n\n    for (f.textContent = \"\", d = 0; o = p[d++];) {\n      if (r && -1 < w.inArray(o, r)) i && i.push(o);else if (c = oe(o), s = me(f.appendChild(o), \"script\"), c && ve(s), n) for (u = 0; o = s[u++];) {\n        he.test(o.type || \"\") && n.push(o);\n      }\n    }\n\n    return f;\n  }\n\n  ye = r.createDocumentFragment().appendChild(r.createElement(\"div\")), (be = r.createElement(\"input\")).setAttribute(\"type\", \"radio\"), be.setAttribute(\"checked\", \"checked\"), be.setAttribute(\"name\", \"t\"), ye.appendChild(be), h.checkClone = ye.cloneNode(!0).cloneNode(!0).lastChild.checked, ye.innerHTML = \"<textarea>x</textarea>\", h.noCloneChecked = !!ye.cloneNode(!0).lastChild.defaultValue;\n  var Te = /^key/,\n      Ee = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n      Ce = /^([^.]*)(?:\\.(.+)|)/;\n\n  function Se() {\n    return !0;\n  }\n\n  function Le() {\n    return !1;\n  }\n\n  function ke(e, t) {\n    return e === function () {\n      try {\n        return r.activeElement;\n      } catch (e) {}\n    }() == (\"focus\" === t);\n  }\n\n  function Ae(e, t, n, r, i, o) {\n    var s, a;\n\n    if (\"object\" == _typeof(t)) {\n      for (a in \"string\" != typeof n && (r = r || n, n = void 0), t) {\n        Ae(e, a, n, r, t[a], o);\n      }\n\n      return e;\n    }\n\n    if (null == r && null == i ? (i = n, r = n = void 0) : null == i && (\"string\" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = Le;else if (!i) return e;\n    return 1 === o && (s = i, (i = function i(e) {\n      return w().off(e), s.apply(this, arguments);\n    }).guid = s.guid || (s.guid = w.guid++)), e.each(function () {\n      w.event.add(this, t, i, r, n);\n    });\n  }\n\n  function De(e, t, n) {\n    n ? (G.set(e, t, !1), w.event.add(e, t, {\n      namespace: !1,\n      handler: function handler(e) {\n        var r,\n            i,\n            s = G.get(this, t);\n\n        if (1 & e.isTrigger && this[t]) {\n          if (s.length) (w.event.special[t] || {}).delegateType && e.stopPropagation();else if (s = o.call(arguments), G.set(this, t, s), r = n(this, t), this[t](), s !== (i = G.get(this, t)) || r ? G.set(this, t, !1) : i = {}, s !== i) return e.stopImmediatePropagation(), e.preventDefault(), i.value;\n        } else s.length && (G.set(this, t, {\n          value: w.event.trigger(w.extend(s[0], w.Event.prototype), s.slice(1), this)\n        }), e.stopImmediatePropagation());\n      }\n    })) : void 0 === G.get(e, t) && w.event.add(e, t, Se);\n  }\n\n  w.event = {\n    global: {},\n    add: function add(e, t, n, r, i) {\n      var o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          f,\n          p,\n          d,\n          h,\n          g,\n          m = G.get(e);\n      if (m) for (n.handler && (n = (o = n).handler, i = o.selector), i && w.find.matchesSelector(ie, i), n.guid || (n.guid = w.guid++), (l = m.events) || (l = m.events = {}), (s = m.handle) || (s = m.handle = function (t) {\n        return void 0 !== w && w.event.triggered !== t.type ? w.event.dispatch.apply(e, arguments) : void 0;\n      }), c = (t = (t || \"\").match(P) || [\"\"]).length; c--;) {\n        d = g = (a = Ce.exec(t[c]) || [])[1], h = (a[2] || \"\").split(\".\").sort(), d && (f = w.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = w.event.special[d] || {}, u = w.extend({\n          type: d,\n          origType: g,\n          data: r,\n          handler: n,\n          guid: n.guid,\n          selector: i,\n          needsContext: i && w.expr.match.needsContext.test(i),\n          namespace: h.join(\".\")\n        }, o), (p = l[d]) || ((p = l[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(e, r, h, s) || e.addEventListener && e.addEventListener(d, s)), f.add && (f.add.call(e, u), u.handler.guid || (u.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, u) : p.push(u), w.event.global[d] = !0);\n      }\n    },\n    remove: function remove(e, t, n, r, i) {\n      var o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          f,\n          p,\n          d,\n          h,\n          g,\n          m = G.hasData(e) && G.get(e);\n\n      if (m && (l = m.events)) {\n        for (c = (t = (t || \"\").match(P) || [\"\"]).length; c--;) {\n          if (d = g = (a = Ce.exec(t[c]) || [])[1], h = (a[2] || \"\").split(\".\").sort(), d) {\n            for (f = w.event.special[d] || {}, p = l[d = (r ? f.delegateType : f.bindType) || d] || [], a = a[2] && new RegExp(\"(^|\\\\.)\" + h.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), s = o = p.length; o--;) {\n              u = p[o], !i && g !== u.origType || n && n.guid !== u.guid || a && !a.test(u.namespace) || r && r !== u.selector && (\"**\" !== r || !u.selector) || (p.splice(o, 1), u.selector && p.delegateCount--, f.remove && f.remove.call(e, u));\n            }\n\n            s && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, m.handle) || w.removeEvent(e, d, m.handle), delete l[d]);\n          } else for (d in l) {\n            w.event.remove(e, d + t[c], n, r, !0);\n          }\n        }\n\n        w.isEmptyObject(l) && G.remove(e, \"handle events\");\n      }\n    },\n    dispatch: function dispatch(e) {\n      var t,\n          n,\n          r,\n          i,\n          o,\n          s,\n          a = w.event.fix(e),\n          l = new Array(arguments.length),\n          c = (G.get(this, \"events\") || {})[a.type] || [],\n          u = w.event.special[a.type] || {};\n\n      for (l[0] = a, t = 1; t < arguments.length; t++) {\n        l[t] = arguments[t];\n      }\n\n      if (a.delegateTarget = this, !u.preDispatch || !1 !== u.preDispatch.call(this, a)) {\n        for (s = w.event.handlers.call(this, a, c), t = 0; (i = s[t++]) && !a.isPropagationStopped();) {\n          for (a.currentTarget = i.elem, n = 0; (o = i.handlers[n++]) && !a.isImmediatePropagationStopped();) {\n            a.rnamespace && !1 !== o.namespace && !a.rnamespace.test(o.namespace) || (a.handleObj = o, a.data = o.data, void 0 !== (r = ((w.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, l)) && !1 === (a.result = r) && (a.preventDefault(), a.stopPropagation()));\n          }\n        }\n\n        return u.postDispatch && u.postDispatch.call(this, a), a.result;\n      }\n    },\n    handlers: function handlers(e, t) {\n      var n,\n          r,\n          i,\n          o,\n          s,\n          a = [],\n          l = t.delegateCount,\n          c = e.target;\n      if (l && c.nodeType && !(\"click\" === e.type && 1 <= e.button)) for (; c !== this; c = c.parentNode || this) {\n        if (1 === c.nodeType && (\"click\" !== e.type || !0 !== c.disabled)) {\n          for (o = [], s = {}, n = 0; n < l; n++) {\n            void 0 === s[i = (r = t[n]).selector + \" \"] && (s[i] = r.needsContext ? -1 < w(i, this).index(c) : w.find(i, this, null, [c]).length), s[i] && o.push(r);\n          }\n\n          o.length && a.push({\n            elem: c,\n            handlers: o\n          });\n        }\n      }\n      return c = this, l < t.length && a.push({\n        elem: c,\n        handlers: t.slice(l)\n      }), a;\n    },\n    addProp: function addProp(e, t) {\n      Object.defineProperty(w.Event.prototype, e, {\n        enumerable: !0,\n        configurable: !0,\n        get: g(t) ? function () {\n          if (this.originalEvent) return t(this.originalEvent);\n        } : function () {\n          if (this.originalEvent) return this.originalEvent[e];\n        },\n        set: function set(t) {\n          Object.defineProperty(this, e, {\n            enumerable: !0,\n            configurable: !0,\n            writable: !0,\n            value: t\n          });\n        }\n      });\n    },\n    fix: function fix(e) {\n      return e[w.expando] ? e : new w.Event(e);\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      click: {\n        setup: function setup(e) {\n          var t = this || e;\n          return pe.test(t.type) && t.click && A(t, \"input\") && De(t, \"click\", Se), !1;\n        },\n        trigger: function trigger(e) {\n          var t = this || e;\n          return pe.test(t.type) && t.click && A(t, \"input\") && De(t, \"click\"), !0;\n        },\n        _default: function _default(e) {\n          var t = e.target;\n          return pe.test(t.type) && t.click && A(t, \"input\") && G.get(t, \"click\") || A(t, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(e) {\n          void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);\n        }\n      }\n    }\n  }, w.removeEvent = function (e, t, n) {\n    e.removeEventListener && e.removeEventListener(t, n);\n  }, w.Event = function (e, t) {\n    if (!(this instanceof w.Event)) return new w.Event(e, t);\n    e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? Se : Le, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && w.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[w.expando] = !0;\n  }, w.Event.prototype = {\n    constructor: w.Event,\n    isDefaultPrevented: Le,\n    isPropagationStopped: Le,\n    isImmediatePropagationStopped: Le,\n    isSimulated: !1,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = Se, e && !this.isSimulated && e.preventDefault();\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = Se, e && !this.isSimulated && e.stopPropagation();\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = Se, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, w.each({\n    altKey: !0,\n    bubbles: !0,\n    cancelable: !0,\n    changedTouches: !0,\n    ctrlKey: !0,\n    detail: !0,\n    eventPhase: !0,\n    metaKey: !0,\n    pageX: !0,\n    pageY: !0,\n    shiftKey: !0,\n    view: !0,\n    \"char\": !0,\n    code: !0,\n    charCode: !0,\n    key: !0,\n    keyCode: !0,\n    button: !0,\n    buttons: !0,\n    clientX: !0,\n    clientY: !0,\n    offsetX: !0,\n    offsetY: !0,\n    pointerId: !0,\n    pointerType: !0,\n    screenX: !0,\n    screenY: !0,\n    targetTouches: !0,\n    toElement: !0,\n    touches: !0,\n    which: function which(e) {\n      var t = e.button;\n      return null == e.which && Te.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && Ee.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;\n    }\n  }, w.event.addProp), w.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (e, t) {\n    w.event.special[e] = {\n      setup: function setup() {\n        return De(this, e, ke), !1;\n      },\n      trigger: function trigger() {\n        return De(this, e), !0;\n      },\n      delegateType: t\n    };\n  }), w.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (e, t) {\n    w.event.special[e] = {\n      delegateType: t,\n      bindType: t,\n      handle: function handle(e) {\n        var n,\n            r = e.relatedTarget,\n            i = e.handleObj;\n        return r && (r === this || w.contains(this, r)) || (e.type = i.origType, n = i.handler.apply(this, arguments), e.type = t), n;\n      }\n    };\n  }), w.fn.extend({\n    on: function on(e, t, n, r) {\n      return Ae(this, e, t, n, r);\n    },\n    one: function one(e, t, n, r) {\n      return Ae(this, e, t, n, r, 1);\n    },\n    off: function off(e, t, n) {\n      var r, i;\n      if (e && e.preventDefault && e.handleObj) return r = e.handleObj, w(e.delegateTarget).off(r.namespace ? r.origType + \".\" + r.namespace : r.origType, r.selector, r.handler), this;\n\n      if (\"object\" == _typeof(e)) {\n        for (i in e) {\n          this.off(i, t, e[i]);\n        }\n\n        return this;\n      }\n\n      return !1 !== t && \"function\" != typeof t || (n = t, t = void 0), !1 === n && (n = Le), this.each(function () {\n        w.event.remove(this, e, n, t);\n      });\n    }\n  });\n  var Ne = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n      He = /<script|<style|<link/i,\n      je = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      We = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n  function Re(e, t) {\n    return A(e, \"table\") && A(11 !== t.nodeType ? t : t.firstChild, \"tr\") && w(e).children(\"tbody\")[0] || e;\n  }\n\n  function Oe(e) {\n    return e.type = (null !== e.getAttribute(\"type\")) + \"/\" + e.type, e;\n  }\n\n  function Pe(e) {\n    return \"true/\" === (e.type || \"\").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute(\"type\"), e;\n  }\n\n  function Ye(e, t) {\n    var n, r, i, o, s, a, l, c;\n\n    if (1 === t.nodeType) {\n      if (G.hasData(e) && (o = G.access(e), s = G.set(t, o), c = o.events)) for (i in delete s.handle, s.events = {}, c) {\n        for (n = 0, r = c[i].length; n < r; n++) {\n          w.event.add(t, i, c[i][n]);\n        }\n      }\n      Q.hasData(e) && (a = Q.access(e), l = w.extend({}, a), Q.set(t, l));\n    }\n  }\n\n  function qe(e, t, n, r) {\n    t = s.apply([], t);\n    var i,\n        o,\n        a,\n        l,\n        c,\n        u,\n        f = 0,\n        p = e.length,\n        d = p - 1,\n        m = t[0],\n        v = g(m);\n    if (v || 1 < p && \"string\" == typeof m && !h.checkClone && je.test(m)) return e.each(function (i) {\n      var o = e.eq(i);\n      v && (t[0] = m.call(this, i, o.html())), qe(o, t, n, r);\n    });\n\n    if (p && (o = (i = we(t, e[0].ownerDocument, !1, e, r)).firstChild, 1 === i.childNodes.length && (i = o), o || r)) {\n      for (l = (a = w.map(me(i, \"script\"), Oe)).length; f < p; f++) {\n        c = i, f !== d && (c = w.clone(c, !0, !0), l && w.merge(a, me(c, \"script\"))), n.call(e[f], c, f);\n      }\n\n      if (l) for (u = a[a.length - 1].ownerDocument, w.map(a, Pe), f = 0; f < l; f++) {\n        c = a[f], he.test(c.type || \"\") && !G.access(c, \"globalEval\") && w.contains(u, c) && (c.src && \"module\" !== (c.type || \"\").toLowerCase() ? w._evalUrl && !c.noModule && w._evalUrl(c.src, {\n          nonce: c.nonce || c.getAttribute(\"nonce\")\n        }) : y(c.textContent.replace(We, \"\"), c, u));\n      }\n    }\n\n    return e;\n  }\n\n  function Me(e, t, n) {\n    for (var r, i = t ? w.filter(t, e) : e, o = 0; null != (r = i[o]); o++) {\n      n || 1 !== r.nodeType || w.cleanData(me(r)), r.parentNode && (n && oe(r) && ve(me(r, \"script\")), r.parentNode.removeChild(r));\n    }\n\n    return e;\n  }\n\n  w.extend({\n    htmlPrefilter: function htmlPrefilter(e) {\n      return e.replace(Ne, \"<$1></$2>\");\n    },\n    clone: function clone(e, t, n) {\n      var r,\n          i,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u = e.cloneNode(!0),\n          f = oe(e);\n      if (!(h.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || w.isXMLDoc(e))) for (s = me(u), r = 0, i = (o = me(e)).length; r < i; r++) {\n        a = o[r], \"input\" === (c = (l = s[r]).nodeName.toLowerCase()) && pe.test(a.type) ? l.checked = a.checked : \"input\" !== c && \"textarea\" !== c || (l.defaultValue = a.defaultValue);\n      }\n      if (t) if (n) for (o = o || me(e), s = s || me(u), r = 0, i = o.length; r < i; r++) {\n        Ye(o[r], s[r]);\n      } else Ye(e, u);\n      return 0 < (s = me(u, \"script\")).length && ve(s, !f && me(e, \"script\")), u;\n    },\n    cleanData: function cleanData(e) {\n      for (var t, n, r, i = w.event.special, o = 0; void 0 !== (n = e[o]); o++) {\n        if (V(n)) {\n          if (t = n[G.expando]) {\n            if (t.events) for (r in t.events) {\n              i[r] ? w.event.remove(n, r) : w.removeEvent(n, r, t.handle);\n            }\n            n[G.expando] = void 0;\n          }\n\n          n[Q.expando] && (n[Q.expando] = void 0);\n        }\n      }\n    }\n  }), w.fn.extend({\n    detach: function detach(e) {\n      return Me(this, e, !0);\n    },\n    remove: function remove(e) {\n      return Me(this, e);\n    },\n    text: function text(e) {\n      return F(this, function (e) {\n        return void 0 === e ? w.text(this) : this.empty().each(function () {\n          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);\n        });\n      }, null, e, arguments.length);\n    },\n    append: function append() {\n      return qe(this, arguments, function (e) {\n        1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Re(this, e).appendChild(e);\n      });\n    },\n    prepend: function prepend() {\n      return qe(this, arguments, function (e) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var t = Re(this, e);\n          t.insertBefore(e, t.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return qe(this, arguments, function (e) {\n        this.parentNode && this.parentNode.insertBefore(e, this);\n      });\n    },\n    after: function after() {\n      return qe(this, arguments, function (e) {\n        this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);\n      });\n    },\n    empty: function empty() {\n      for (var e, t = 0; null != (e = this[t]); t++) {\n        1 === e.nodeType && (w.cleanData(me(e, !1)), e.textContent = \"\");\n      }\n\n      return this;\n    },\n    clone: function clone(e, t) {\n      return e = null != e && e, t = null == t ? e : t, this.map(function () {\n        return w.clone(this, e, t);\n      });\n    },\n    html: function html(e) {\n      return F(this, function (e) {\n        var t = this[0] || {},\n            n = 0,\n            r = this.length;\n        if (void 0 === e && 1 === t.nodeType) return t.innerHTML;\n\n        if (\"string\" == typeof e && !He.test(e) && !ge[(de.exec(e) || [\"\", \"\"])[1].toLowerCase()]) {\n          e = w.htmlPrefilter(e);\n\n          try {\n            for (; n < r; n++) {\n              1 === (t = this[n] || {}).nodeType && (w.cleanData(me(t, !1)), t.innerHTML = e);\n            }\n\n            t = 0;\n          } catch (e) {}\n        }\n\n        t && this.empty().append(e);\n      }, null, e, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var e = [];\n      return qe(this, arguments, function (t) {\n        var n = this.parentNode;\n        w.inArray(this, e) < 0 && (w.cleanData(me(this)), n && n.replaceChild(t, this));\n      }, e);\n    }\n  }), w.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (e, t) {\n    w.fn[e] = function (e) {\n      for (var n, r = [], i = w(e), o = i.length - 1, s = 0; s <= o; s++) {\n        n = s === o ? this : this.clone(!0), w(i[s])[t](n), a.apply(r, n.get());\n      }\n\n      return this.pushStack(r);\n    };\n  });\n\n  var Xe = new RegExp(\"^(\" + te + \")(?!px)[a-z%]+$\", \"i\"),\n      Be = function Be(t) {\n    var n = t.ownerDocument.defaultView;\n    return n && n.opener || (n = e), n.getComputedStyle(t);\n  },\n      Ie = new RegExp(re.join(\"|\"), \"i\");\n\n  function Fe(e, t, n) {\n    var r,\n        i,\n        o,\n        s,\n        a = e.style;\n    return (n = n || Be(e)) && (\"\" !== (s = n.getPropertyValue(t) || n[t]) || oe(e) || (s = w.style(e, t)), !h.pixelBoxStyles() && Xe.test(s) && Ie.test(t) && (r = a.width, i = a.minWidth, o = a.maxWidth, a.minWidth = a.maxWidth = a.width = s, s = n.width, a.width = r, a.minWidth = i, a.maxWidth = o)), void 0 !== s ? s + \"\" : s;\n  }\n\n  function $e(e, t) {\n    return {\n      get: function get() {\n        if (!e()) return (this.get = t).apply(this, arguments);\n        delete this.get;\n      }\n    };\n  }\n\n  !function () {\n    function t() {\n      if (u) {\n        c.style.cssText = \"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\", u.style.cssText = \"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\", ie.appendChild(c).appendChild(u);\n        var t = e.getComputedStyle(u);\n        i = \"1%\" !== t.top, l = 12 === n(t.marginLeft), u.style.right = \"60%\", a = 36 === n(t.right), o = 36 === n(t.width), u.style.position = \"absolute\", s = 12 === n(u.offsetWidth / 3), ie.removeChild(c), u = null;\n      }\n    }\n\n    function n(e) {\n      return Math.round(parseFloat(e));\n    }\n\n    var i,\n        o,\n        s,\n        a,\n        l,\n        c = r.createElement(\"div\"),\n        u = r.createElement(\"div\");\n    u.style && (u.style.backgroundClip = \"content-box\", u.cloneNode(!0).style.backgroundClip = \"\", h.clearCloneStyle = \"content-box\" === u.style.backgroundClip, w.extend(h, {\n      boxSizingReliable: function boxSizingReliable() {\n        return t(), o;\n      },\n      pixelBoxStyles: function pixelBoxStyles() {\n        return t(), a;\n      },\n      pixelPosition: function pixelPosition() {\n        return t(), i;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        return t(), l;\n      },\n      scrollboxSize: function scrollboxSize() {\n        return t(), s;\n      }\n    }));\n  }();\n  var _e = [\"Webkit\", \"Moz\", \"ms\"],\n      Ue = r.createElement(\"div\").style,\n      ze = {};\n\n  function Ve(e) {\n    return w.cssProps[e] || ze[e] || (e in Ue ? e : ze[e] = function (e) {\n      for (var t = e[0].toUpperCase() + e.slice(1), n = _e.length; n--;) {\n        if ((e = _e[n] + t) in Ue) return e;\n      }\n    }(e) || e);\n  }\n\n  var Ke = /^(none|table(?!-c[ea]).+)/,\n      Ge = /^--/,\n      Qe = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      Je = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  };\n\n  function Ze(e, t, n) {\n    var r = ne.exec(t);\n    return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || \"px\") : t;\n  }\n\n  function et(e, t, n, r, i, o) {\n    var s = \"width\" === t ? 1 : 0,\n        a = 0,\n        l = 0;\n    if (n === (r ? \"border\" : \"content\")) return 0;\n\n    for (; s < 4; s += 2) {\n      \"margin\" === n && (l += w.css(e, n + re[s], !0, i)), r ? (\"content\" === n && (l -= w.css(e, \"padding\" + re[s], !0, i)), \"margin\" !== n && (l -= w.css(e, \"border\" + re[s] + \"Width\", !0, i))) : (l += w.css(e, \"padding\" + re[s], !0, i), \"padding\" !== n ? l += w.css(e, \"border\" + re[s] + \"Width\", !0, i) : a += w.css(e, \"border\" + re[s] + \"Width\", !0, i));\n    }\n\n    return !r && 0 <= o && (l += Math.max(0, Math.ceil(e[\"offset\" + t[0].toUpperCase() + t.slice(1)] - o - l - a - .5)) || 0), l;\n  }\n\n  function tt(e, t, n) {\n    var r = Be(e),\n        i = (!h.boxSizingReliable() || n) && \"border-box\" === w.css(e, \"boxSizing\", !1, r),\n        o = i,\n        s = Fe(e, t, r),\n        a = \"offset\" + t[0].toUpperCase() + t.slice(1);\n\n    if (Xe.test(s)) {\n      if (!n) return s;\n      s = \"auto\";\n    }\n\n    return (!h.boxSizingReliable() && i || \"auto\" === s || !parseFloat(s) && \"inline\" === w.css(e, \"display\", !1, r)) && e.getClientRects().length && (i = \"border-box\" === w.css(e, \"boxSizing\", !1, r), (o = a in e) && (s = e[a])), (s = parseFloat(s) || 0) + et(e, t, n || (i ? \"border\" : \"content\"), o, r, s) + \"px\";\n  }\n\n  function nt(e, t, n, r, i) {\n    return new nt.prototype.init(e, t, n, r, i);\n  }\n\n  w.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(e, t) {\n          if (t) {\n            var n = Fe(e, \"opacity\");\n            return \"\" === n ? \"1\" : n;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      animationIterationCount: !0,\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      gridArea: !0,\n      gridColumn: !0,\n      gridColumnEnd: !0,\n      gridColumnStart: !0,\n      gridRow: !0,\n      gridRowEnd: !0,\n      gridRowStart: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {},\n    style: function style(e, t, n, r) {\n      if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {\n        var i,\n            o,\n            s,\n            a = z(t),\n            l = Ge.test(t),\n            c = e.style;\n        if (l || (t = Ve(a)), s = w.cssHooks[t] || w.cssHooks[a], void 0 === n) return s && \"get\" in s && void 0 !== (i = s.get(e, !1, r)) ? i : c[t];\n        \"string\" == (o = _typeof(n)) && (i = ne.exec(n)) && i[1] && (n = ce(e, t, i), o = \"number\"), null != n && n == n && (\"number\" !== o || l || (n += i && i[3] || (w.cssNumber[a] ? \"\" : \"px\")), h.clearCloneStyle || \"\" !== n || 0 !== t.indexOf(\"background\") || (c[t] = \"inherit\"), s && \"set\" in s && void 0 === (n = s.set(e, n, r)) || (l ? c.setProperty(t, n) : c[t] = n));\n      }\n    },\n    css: function css(e, t, n, r) {\n      var i,\n          o,\n          s,\n          a = z(t);\n      return Ge.test(t) || (t = Ve(a)), (s = w.cssHooks[t] || w.cssHooks[a]) && \"get\" in s && (i = s.get(e, !0, n)), void 0 === i && (i = Fe(e, t, r)), \"normal\" === i && t in Je && (i = Je[t]), \"\" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i;\n    }\n  }), w.each([\"height\", \"width\"], function (e, t) {\n    w.cssHooks[t] = {\n      get: function get(e, n, r) {\n        if (n) return !Ke.test(w.css(e, \"display\")) || e.getClientRects().length && e.getBoundingClientRect().width ? tt(e, t, r) : le(e, Qe, function () {\n          return tt(e, t, r);\n        });\n      },\n      set: function set(e, n, r) {\n        var i,\n            o = Be(e),\n            s = !h.scrollboxSize() && \"absolute\" === o.position,\n            a = (s || r) && \"border-box\" === w.css(e, \"boxSizing\", !1, o),\n            l = r ? et(e, t, r, a, o) : 0;\n        return a && s && (l -= Math.ceil(e[\"offset\" + t[0].toUpperCase() + t.slice(1)] - parseFloat(o[t]) - et(e, t, \"border\", !1, o) - .5)), l && (i = ne.exec(n)) && \"px\" !== (i[3] || \"px\") && (e.style[t] = n, n = w.css(e, t)), Ze(0, n, l);\n      }\n    };\n  }), w.cssHooks.marginLeft = $e(h.reliableMarginLeft, function (e, t) {\n    if (t) return (parseFloat(Fe(e, \"marginLeft\")) || e.getBoundingClientRect().left - le(e, {\n      marginLeft: 0\n    }, function () {\n      return e.getBoundingClientRect().left;\n    })) + \"px\";\n  }), w.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (e, t) {\n    w.cssHooks[e + t] = {\n      expand: function expand(n) {\n        for (var r = 0, i = {}, o = \"string\" == typeof n ? n.split(\" \") : [n]; r < 4; r++) {\n          i[e + re[r] + t] = o[r] || o[r - 2] || o[0];\n        }\n\n        return i;\n      }\n    }, \"margin\" !== e && (w.cssHooks[e + t].set = Ze);\n  }), w.fn.extend({\n    css: function css(e, t) {\n      return F(this, function (e, t, n) {\n        var r,\n            i,\n            o = {},\n            s = 0;\n\n        if (Array.isArray(t)) {\n          for (r = Be(e), i = t.length; s < i; s++) {\n            o[t[s]] = w.css(e, t[s], !1, r);\n          }\n\n          return o;\n        }\n\n        return void 0 !== n ? w.style(e, t, n) : w.css(e, t);\n      }, e, t, 1 < arguments.length);\n    }\n  }), ((w.Tween = nt).prototype = {\n    constructor: nt,\n    init: function init(e, t, n, r, i, o) {\n      this.elem = e, this.prop = n, this.easing = i || w.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (w.cssNumber[n] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var e = nt.propHooks[this.prop];\n      return e && e.get ? e.get(this) : nt.propHooks._default.get(this);\n    },\n    run: function run(e) {\n      var t,\n          n = nt.propHooks[this.prop];\n      return this.options.duration ? this.pos = t = w.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : nt.propHooks._default.set(this), this;\n    }\n  }).init.prototype = nt.prototype, (nt.propHooks = {\n    _default: {\n      get: function get(e) {\n        var t;\n        return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = w.css(e.elem, e.prop, \"\")) && \"auto\" !== t ? t : 0;\n      },\n      set: function set(e) {\n        w.fx.step[e.prop] ? w.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !w.cssHooks[e.prop] && null == e.elem.style[Ve(e.prop)] ? e.elem[e.prop] = e.now : w.style(e.elem, e.prop, e.now + e.unit);\n      }\n    }\n  }).scrollTop = nt.propHooks.scrollLeft = {\n    set: function set(e) {\n      e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);\n    }\n  }, w.easing = {\n    linear: function linear(e) {\n      return e;\n    },\n    swing: function swing(e) {\n      return .5 - Math.cos(e * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  }, w.fx = nt.prototype.init, w.fx.step = {};\n  var rt,\n      it,\n      ot,\n      st,\n      at = /^(?:toggle|show|hide)$/,\n      lt = /queueHooks$/;\n\n  function ct() {\n    it && (!1 === r.hidden && e.requestAnimationFrame ? e.requestAnimationFrame(ct) : e.setTimeout(ct, w.fx.interval), w.fx.tick());\n  }\n\n  function ut() {\n    return e.setTimeout(function () {\n      rt = void 0;\n    }), rt = Date.now();\n  }\n\n  function ft(e, t) {\n    var n,\n        r = 0,\n        i = {\n      height: e\n    };\n\n    for (t = t ? 1 : 0; r < 4; r += 2 - t) {\n      i[\"margin\" + (n = re[r])] = i[\"padding\" + n] = e;\n    }\n\n    return t && (i.opacity = i.width = e), i;\n  }\n\n  function pt(e, t, n) {\n    for (var r, i = (dt.tweeners[t] || []).concat(dt.tweeners[\"*\"]), o = 0, s = i.length; o < s; o++) {\n      if (r = i[o].call(n, t, e)) return r;\n    }\n  }\n\n  function dt(e, t, n) {\n    var r,\n        i,\n        o = 0,\n        s = dt.prefilters.length,\n        a = w.Deferred().always(function () {\n      delete l.elem;\n    }),\n        l = function l() {\n      if (i) return !1;\n\n      for (var t = rt || ut(), n = Math.max(0, c.startTime + c.duration - t), r = 1 - (n / c.duration || 0), o = 0, s = c.tweens.length; o < s; o++) {\n        c.tweens[o].run(r);\n      }\n\n      return a.notifyWith(e, [c, r, n]), r < 1 && s ? n : (s || a.notifyWith(e, [c, 1, 0]), a.resolveWith(e, [c]), !1);\n    },\n        c = a.promise({\n      elem: e,\n      props: w.extend({}, t),\n      opts: w.extend(!0, {\n        specialEasing: {},\n        easing: w.easing._default\n      }, n),\n      originalProperties: t,\n      originalOptions: n,\n      startTime: rt || ut(),\n      duration: n.duration,\n      tweens: [],\n      createTween: function createTween(t, n) {\n        var r = w.Tween(e, c.opts, t, n, c.opts.specialEasing[t] || c.opts.easing);\n        return c.tweens.push(r), r;\n      },\n      stop: function stop(t) {\n        var n = 0,\n            r = t ? c.tweens.length : 0;\n        if (i) return this;\n\n        for (i = !0; n < r; n++) {\n          c.tweens[n].run(1);\n        }\n\n        return t ? (a.notifyWith(e, [c, 1, 0]), a.resolveWith(e, [c, t])) : a.rejectWith(e, [c, t]), this;\n      }\n    }),\n        u = c.props;\n\n    for (function (e, t) {\n      var n, r, i, o, s;\n\n      for (n in e) {\n        if (i = t[r = z(n)], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (s = w.cssHooks[r]) && (\"expand\" in s)) for (n in o = s.expand(o), delete e[r], o) {\n          (n in e) || (e[n] = o[n], t[n] = i);\n        } else t[r] = i;\n      }\n    }(u, c.opts.specialEasing); o < s; o++) {\n      if (r = dt.prefilters[o].call(c, e, u, c.opts)) return g(r.stop) && (w._queueHooks(c.elem, c.opts.queue).stop = r.stop.bind(r)), r;\n    }\n\n    return w.map(u, pt, c), g(c.opts.start) && c.opts.start.call(e, c), c.progress(c.opts.progress).done(c.opts.done, c.opts.complete).fail(c.opts.fail).always(c.opts.always), w.fx.timer(w.extend(l, {\n      elem: e,\n      anim: c,\n      queue: c.opts.queue\n    })), c;\n  }\n\n  w.Animation = w.extend(dt, {\n    tweeners: {\n      \"*\": [function (e, t) {\n        var n = this.createTween(e, t);\n        return ce(n.elem, e, ne.exec(t), n), n;\n      }]\n    },\n    tweener: function tweener(e, t) {\n      g(e) ? (t = e, e = [\"*\"]) : e = e.match(P);\n\n      for (var n, r = 0, i = e.length; r < i; r++) {\n        n = e[r], dt.tweeners[n] = dt.tweeners[n] || [], dt.tweeners[n].unshift(t);\n      }\n    },\n    prefilters: [function (e, t, n) {\n      var r,\n          i,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          f = \"width\" in t || \"height\" in t,\n          p = this,\n          d = {},\n          h = e.style,\n          g = e.nodeType && ae(e),\n          m = G.get(e, \"fxshow\");\n\n      for (r in n.queue || (null == (s = w._queueHooks(e, \"fx\")).unqueued && (s.unqueued = 0, a = s.empty.fire, s.empty.fire = function () {\n        s.unqueued || a();\n      }), s.unqueued++, p.always(function () {\n        p.always(function () {\n          s.unqueued--, w.queue(e, \"fx\").length || s.empty.fire();\n        });\n      })), t) {\n        if (i = t[r], at.test(i)) {\n          if (delete t[r], o = o || \"toggle\" === i, i === (g ? \"hide\" : \"show\")) {\n            if (\"show\" !== i || !m || void 0 === m[r]) continue;\n            g = !0;\n          }\n\n          d[r] = m && m[r] || w.style(e, r);\n        }\n      }\n\n      if ((l = !w.isEmptyObject(t)) || !w.isEmptyObject(d)) for (r in f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (c = m && m.display) && (c = G.get(e, \"display\")), \"none\" === (u = w.css(e, \"display\")) && (c ? u = c : (fe([e], !0), c = e.style.display || c, u = w.css(e, \"display\"), fe([e]))), (\"inline\" === u || \"inline-block\" === u && null != c) && \"none\" === w.css(e, \"float\") && (l || (p.done(function () {\n        h.display = c;\n      }), null == c && (u = h.display, c = \"none\" === u ? \"\" : u)), h.display = \"inline-block\")), n.overflow && (h.overflow = \"hidden\", p.always(function () {\n        h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];\n      })), l = !1, d) {\n        l || (m ? \"hidden\" in m && (g = m.hidden) : m = G.access(e, \"fxshow\", {\n          display: c\n        }), o && (m.hidden = !g), g && fe([e], !0), p.done(function () {\n          for (r in g || fe([e]), G.remove(e, \"fxshow\"), d) {\n            w.style(e, r, d[r]);\n          }\n        })), l = pt(g ? m[r] : 0, r, p), r in m || (m[r] = l.start, g && (l.end = l.start, l.start = 0));\n      }\n    }],\n    prefilter: function prefilter(e, t) {\n      t ? dt.prefilters.unshift(e) : dt.prefilters.push(e);\n    }\n  }), w.speed = function (e, t, n) {\n    var r = e && \"object\" == _typeof(e) ? w.extend({}, e) : {\n      complete: n || !n && t || g(e) && e,\n      duration: e,\n      easing: n && t || t && !g(t) && t\n    };\n    return w.fx.off ? r.duration = 0 : \"number\" != typeof r.duration && (r.duration in w.fx.speeds ? r.duration = w.fx.speeds[r.duration] : r.duration = w.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = \"fx\"), r.old = r.complete, r.complete = function () {\n      g(r.old) && r.old.call(this), r.queue && w.dequeue(this, r.queue);\n    }, r;\n  }, w.fn.extend({\n    fadeTo: function fadeTo(e, t, n, r) {\n      return this.filter(ae).css(\"opacity\", 0).show().end().animate({\n        opacity: t\n      }, e, n, r);\n    },\n    animate: function animate(e, t, n, r) {\n      var i = w.isEmptyObject(e),\n          o = w.speed(t, n, r),\n          s = function s() {\n        var t = dt(this, w.extend({}, e), o);\n        (i || G.get(this, \"finish\")) && t.stop(!0);\n      };\n\n      return s.finish = s, i || !1 === o.queue ? this.each(s) : this.queue(o.queue, s);\n    },\n    stop: function stop(e, t, n) {\n      var r = function r(e) {\n        var t = e.stop;\n        delete e.stop, t(n);\n      };\n\n      return \"string\" != typeof e && (n = t, t = e, e = void 0), t && !1 !== e && this.queue(e || \"fx\", []), this.each(function () {\n        var t = !0,\n            i = null != e && e + \"queueHooks\",\n            o = w.timers,\n            s = G.get(this);\n        if (i) s[i] && s[i].stop && r(s[i]);else for (i in s) {\n          s[i] && s[i].stop && lt.test(i) && r(s[i]);\n        }\n\n        for (i = o.length; i--;) {\n          o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), t = !1, o.splice(i, 1));\n        }\n\n        !t && n || w.dequeue(this, e);\n      });\n    },\n    finish: function finish(e) {\n      return !1 !== e && (e = e || \"fx\"), this.each(function () {\n        var t,\n            n = G.get(this),\n            r = n[e + \"queue\"],\n            i = n[e + \"queueHooks\"],\n            o = w.timers,\n            s = r ? r.length : 0;\n\n        for (n.finish = !0, w.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--;) {\n          o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));\n        }\n\n        for (t = 0; t < s; t++) {\n          r[t] && r[t].finish && r[t].finish.call(this);\n        }\n\n        delete n.finish;\n      });\n    }\n  }), w.each([\"toggle\", \"show\", \"hide\"], function (e, t) {\n    var n = w.fn[t];\n\n    w.fn[t] = function (e, r, i) {\n      return null == e || \"boolean\" == typeof e ? n.apply(this, arguments) : this.animate(ft(t, !0), e, r, i);\n    };\n  }), w.each({\n    slideDown: ft(\"show\"),\n    slideUp: ft(\"hide\"),\n    slideToggle: ft(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (e, t) {\n    w.fn[e] = function (e, n, r) {\n      return this.animate(t, e, n, r);\n    };\n  }), w.timers = [], w.fx.tick = function () {\n    var e,\n        t = 0,\n        n = w.timers;\n\n    for (rt = Date.now(); t < n.length; t++) {\n      (e = n[t])() || n[t] !== e || n.splice(t--, 1);\n    }\n\n    n.length || w.fx.stop(), rt = void 0;\n  }, w.fx.timer = function (e) {\n    w.timers.push(e), w.fx.start();\n  }, w.fx.interval = 13, w.fx.start = function () {\n    it || (it = !0, ct());\n  }, w.fx.stop = function () {\n    it = null;\n  }, w.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, w.fn.delay = function (t, n) {\n    return t = w.fx && w.fx.speeds[t] || t, n = n || \"fx\", this.queue(n, function (n, r) {\n      var i = e.setTimeout(n, t);\n\n      r.stop = function () {\n        e.clearTimeout(i);\n      };\n    });\n  }, ot = r.createElement(\"input\"), st = r.createElement(\"select\").appendChild(r.createElement(\"option\")), ot.type = \"checkbox\", h.checkOn = \"\" !== ot.value, h.optSelected = st.selected, (ot = r.createElement(\"input\")).value = \"t\", ot.type = \"radio\", h.radioValue = \"t\" === ot.value;\n  var ht,\n      gt = w.expr.attrHandle;\n  w.fn.extend({\n    attr: function attr(e, t) {\n      return F(this, w.attr, e, t, 1 < arguments.length);\n    },\n    removeAttr: function removeAttr(e) {\n      return this.each(function () {\n        w.removeAttr(this, e);\n      });\n    }\n  }), w.extend({\n    attr: function attr(e, t, n) {\n      var r,\n          i,\n          o = e.nodeType;\n      if (3 !== o && 8 !== o && 2 !== o) return void 0 === e.getAttribute ? w.prop(e, t, n) : (1 === o && w.isXMLDoc(e) || (i = w.attrHooks[t.toLowerCase()] || (w.expr.match.bool.test(t) ? ht : void 0)), void 0 !== n ? null === n ? void w.removeAttr(e, t) : i && \"set\" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + \"\"), n) : i && \"get\" in i && null !== (r = i.get(e, t)) ? r : null == (r = w.find.attr(e, t)) ? void 0 : r);\n    },\n    attrHooks: {\n      type: {\n        set: function set(e, t) {\n          if (!h.radioValue && \"radio\" === t && A(e, \"input\")) {\n            var n = e.value;\n            return e.setAttribute(\"type\", t), n && (e.value = n), t;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(e, t) {\n      var n,\n          r = 0,\n          i = t && t.match(P);\n      if (i && 1 === e.nodeType) for (; n = i[r++];) {\n        e.removeAttribute(n);\n      }\n    }\n  }), ht = {\n    set: function set(e, t, n) {\n      return !1 === t ? w.removeAttr(e, n) : e.setAttribute(n, n), n;\n    }\n  }, w.each(w.expr.match.bool.source.match(/\\w+/g), function (e, t) {\n    var n = gt[t] || w.find.attr;\n\n    gt[t] = function (e, t, r) {\n      var i,\n          o,\n          s = t.toLowerCase();\n      return r || (o = gt[s], gt[s] = i, i = null != n(e, t, r) ? s : null, gt[s] = o), i;\n    };\n  });\n  var mt = /^(?:input|select|textarea|button)$/i,\n      vt = /^(?:a|area)$/i;\n\n  function yt(e) {\n    return (e.match(P) || []).join(\" \");\n  }\n\n  function bt(e) {\n    return e.getAttribute && e.getAttribute(\"class\") || \"\";\n  }\n\n  function xt(e) {\n    return Array.isArray(e) ? e : \"string\" == typeof e && e.match(P) || [];\n  }\n\n  w.fn.extend({\n    prop: function prop(e, t) {\n      return F(this, w.prop, e, t, 1 < arguments.length);\n    },\n    removeProp: function removeProp(e) {\n      return this.each(function () {\n        delete this[w.propFix[e] || e];\n      });\n    }\n  }), w.extend({\n    prop: function prop(e, t, n) {\n      var r,\n          i,\n          o = e.nodeType;\n      if (3 !== o && 8 !== o && 2 !== o) return 1 === o && w.isXMLDoc(e) || (t = w.propFix[t] || t, i = w.propHooks[t]), void 0 !== n ? i && \"set\" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && \"get\" in i && null !== (r = i.get(e, t)) ? r : e[t];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(e) {\n          var t = w.find.attr(e, \"tabindex\");\n          return t ? parseInt(t, 10) : mt.test(e.nodeName) || vt.test(e.nodeName) && e.href ? 0 : -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }), h.optSelected || (w.propHooks.selected = {\n    get: function get(e) {\n      var t = e.parentNode;\n      return t && t.parentNode && t.parentNode.selectedIndex, null;\n    },\n    set: function set(e) {\n      var t = e.parentNode;\n      t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);\n    }\n  }), w.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    w.propFix[this.toLowerCase()] = this;\n  }), w.fn.extend({\n    addClass: function addClass(e) {\n      var t,\n          n,\n          r,\n          i,\n          o,\n          s,\n          a,\n          l = 0;\n      if (g(e)) return this.each(function (t) {\n        w(this).addClass(e.call(this, t, bt(this)));\n      });\n      if ((t = xt(e)).length) for (; n = this[l++];) {\n        if (i = bt(n), r = 1 === n.nodeType && \" \" + yt(i) + \" \") {\n          for (s = 0; o = t[s++];) {\n            r.indexOf(\" \" + o + \" \") < 0 && (r += o + \" \");\n          }\n\n          i !== (a = yt(r)) && n.setAttribute(\"class\", a);\n        }\n      }\n      return this;\n    },\n    removeClass: function removeClass(e) {\n      var t,\n          n,\n          r,\n          i,\n          o,\n          s,\n          a,\n          l = 0;\n      if (g(e)) return this.each(function (t) {\n        w(this).removeClass(e.call(this, t, bt(this)));\n      });\n      if (!arguments.length) return this.attr(\"class\", \"\");\n      if ((t = xt(e)).length) for (; n = this[l++];) {\n        if (i = bt(n), r = 1 === n.nodeType && \" \" + yt(i) + \" \") {\n          for (s = 0; o = t[s++];) {\n            for (; -1 < r.indexOf(\" \" + o + \" \");) {\n              r = r.replace(\" \" + o + \" \", \" \");\n            }\n          }\n\n          i !== (a = yt(r)) && n.setAttribute(\"class\", a);\n        }\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(e, t) {\n      var n = _typeof(e),\n          r = \"string\" === n || Array.isArray(e);\n\n      return \"boolean\" == typeof t && r ? t ? this.addClass(e) : this.removeClass(e) : g(e) ? this.each(function (n) {\n        w(this).toggleClass(e.call(this, n, bt(this), t), t);\n      }) : this.each(function () {\n        var t, i, o, s;\n        if (r) for (i = 0, o = w(this), s = xt(e); t = s[i++];) {\n          o.hasClass(t) ? o.removeClass(t) : o.addClass(t);\n        } else void 0 !== e && \"boolean\" !== n || ((t = bt(this)) && G.set(this, \"__className__\", t), this.setAttribute && this.setAttribute(\"class\", t || !1 === e ? \"\" : G.get(this, \"__className__\") || \"\"));\n      });\n    },\n    hasClass: function hasClass(e) {\n      var t,\n          n,\n          r = 0;\n\n      for (t = \" \" + e + \" \"; n = this[r++];) {\n        if (1 === n.nodeType && -1 < (\" \" + yt(bt(n)) + \" \").indexOf(t)) return !0;\n      }\n\n      return !1;\n    }\n  });\n  var wt = /\\r/g;\n  w.fn.extend({\n    val: function val(e) {\n      var t,\n          n,\n          r,\n          i = this[0];\n      return arguments.length ? (r = g(e), this.each(function (n) {\n        var i;\n        1 === this.nodeType && (null == (i = r ? e.call(this, n, w(this).val()) : e) ? i = \"\" : \"number\" == typeof i ? i += \"\" : Array.isArray(i) && (i = w.map(i, function (e) {\n          return null == e ? \"\" : e + \"\";\n        })), (t = w.valHooks[this.type] || w.valHooks[this.nodeName.toLowerCase()]) && \"set\" in t && void 0 !== t.set(this, i, \"value\") || (this.value = i));\n      })) : i ? (t = w.valHooks[i.type] || w.valHooks[i.nodeName.toLowerCase()]) && \"get\" in t && void 0 !== (n = t.get(i, \"value\")) ? n : \"string\" == typeof (n = i.value) ? n.replace(wt, \"\") : null == n ? \"\" : n : void 0;\n    }\n  }), w.extend({\n    valHooks: {\n      option: {\n        get: function get(e) {\n          var t = w.find.attr(e, \"value\");\n          return null != t ? t : yt(w.text(e));\n        }\n      },\n      select: {\n        get: function get(e) {\n          var t,\n              n,\n              r,\n              i = e.options,\n              o = e.selectedIndex,\n              s = \"select-one\" === e.type,\n              a = s ? null : [],\n              l = s ? o + 1 : i.length;\n\n          for (r = o < 0 ? l : s ? o : 0; r < l; r++) {\n            if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !A(n.parentNode, \"optgroup\"))) {\n              if (t = w(n).val(), s) return t;\n              a.push(t);\n            }\n          }\n\n          return a;\n        },\n        set: function set(e, t) {\n          for (var n, r, i = e.options, o = w.makeArray(t), s = i.length; s--;) {\n            ((r = i[s]).selected = -1 < w.inArray(w.valHooks.option.get(r), o)) && (n = !0);\n          }\n\n          return n || (e.selectedIndex = -1), o;\n        }\n      }\n    }\n  }), w.each([\"radio\", \"checkbox\"], function () {\n    w.valHooks[this] = {\n      set: function set(e, t) {\n        if (Array.isArray(t)) return e.checked = -1 < w.inArray(w(e).val(), t);\n      }\n    }, h.checkOn || (w.valHooks[this].get = function (e) {\n      return null === e.getAttribute(\"value\") ? \"on\" : e.value;\n    });\n  }), h.focusin = \"onfocusin\" in e;\n\n  var Tt = /^(?:focusinfocus|focusoutblur)$/,\n      Et = function Et(e) {\n    e.stopPropagation();\n  };\n\n  w.extend(w.event, {\n    trigger: function trigger(t, n, i, o) {\n      var s,\n          a,\n          l,\n          c,\n          u,\n          p,\n          d,\n          h,\n          v = [i || r],\n          y = f.call(t, \"type\") ? t.type : t,\n          b = f.call(t, \"namespace\") ? t.namespace.split(\".\") : [];\n\n      if (a = h = l = i = i || r, 3 !== i.nodeType && 8 !== i.nodeType && !Tt.test(y + w.event.triggered) && (-1 < y.indexOf(\".\") && (y = (b = y.split(\".\")).shift(), b.sort()), u = y.indexOf(\":\") < 0 && \"on\" + y, (t = t[w.expando] ? t : new w.Event(y, \"object\" == _typeof(t) && t)).isTrigger = o ? 2 : 3, t.namespace = b.join(\".\"), t.rnamespace = t.namespace ? new RegExp(\"(^|\\\\.)\" + b.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, t.result = void 0, t.target || (t.target = i), n = null == n ? [t] : w.makeArray(n, [t]), d = w.event.special[y] || {}, o || !d.trigger || !1 !== d.trigger.apply(i, n))) {\n        if (!o && !d.noBubble && !m(i)) {\n          for (c = d.delegateType || y, Tt.test(c + y) || (a = a.parentNode); a; a = a.parentNode) {\n            v.push(a), l = a;\n          }\n\n          l === (i.ownerDocument || r) && v.push(l.defaultView || l.parentWindow || e);\n        }\n\n        for (s = 0; (a = v[s++]) && !t.isPropagationStopped();) {\n          h = a, t.type = 1 < s ? c : d.bindType || y, (p = (G.get(a, \"events\") || {})[t.type] && G.get(a, \"handle\")) && p.apply(a, n), (p = u && a[u]) && p.apply && V(a) && (t.result = p.apply(a, n), !1 === t.result && t.preventDefault());\n        }\n\n        return t.type = y, o || t.isDefaultPrevented() || d._default && !1 !== d._default.apply(v.pop(), n) || !V(i) || u && g(i[y]) && !m(i) && ((l = i[u]) && (i[u] = null), w.event.triggered = y, t.isPropagationStopped() && h.addEventListener(y, Et), i[y](), t.isPropagationStopped() && h.removeEventListener(y, Et), w.event.triggered = void 0, l && (i[u] = l)), t.result;\n      }\n    },\n    simulate: function simulate(e, t, n) {\n      var r = w.extend(new w.Event(), n, {\n        type: e,\n        isSimulated: !0\n      });\n      w.event.trigger(r, null, t);\n    }\n  }), w.fn.extend({\n    trigger: function trigger(e, t) {\n      return this.each(function () {\n        w.event.trigger(e, t, this);\n      });\n    },\n    triggerHandler: function triggerHandler(e, t) {\n      var n = this[0];\n      if (n) return w.event.trigger(e, t, n, !0);\n    }\n  }), h.focusin || w.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (e, t) {\n    var n = function n(e) {\n      w.event.simulate(t, e.target, w.event.fix(e));\n    };\n\n    w.event.special[t] = {\n      setup: function setup() {\n        var r = this.ownerDocument || this,\n            i = G.access(r, t);\n        i || r.addEventListener(e, n, !0), G.access(r, t, (i || 0) + 1);\n      },\n      teardown: function teardown() {\n        var r = this.ownerDocument || this,\n            i = G.access(r, t) - 1;\n        i ? G.access(r, t, i) : (r.removeEventListener(e, n, !0), G.remove(r, t));\n      }\n    };\n  });\n  var Ct = e.location,\n      St = Date.now(),\n      Lt = /\\?/;\n\n  w.parseXML = function (t) {\n    var n;\n    if (!t || \"string\" != typeof t) return null;\n\n    try {\n      n = new e.DOMParser().parseFromString(t, \"text/xml\");\n    } catch (t) {\n      n = void 0;\n    }\n\n    return n && !n.getElementsByTagName(\"parsererror\").length || w.error(\"Invalid XML: \" + t), n;\n  };\n\n  var kt = /\\[\\]$/,\n      At = /\\r?\\n/g,\n      Dt = /^(?:submit|button|image|reset|file)$/i,\n      Nt = /^(?:input|select|textarea|keygen)/i;\n\n  function Ht(e, t, n, r) {\n    var i;\n    if (Array.isArray(t)) w.each(t, function (t, i) {\n      n || kt.test(e) ? r(e, i) : Ht(e + \"[\" + (\"object\" == _typeof(i) && null != i ? t : \"\") + \"]\", i, n, r);\n    });else if (n || \"object\" !== b(t)) r(e, t);else for (i in t) {\n      Ht(e + \"[\" + i + \"]\", t[i], n, r);\n    }\n  }\n\n  w.param = function (e, t) {\n    var n,\n        r = [],\n        i = function i(e, t) {\n      var n = g(t) ? t() : t;\n      r[r.length] = encodeURIComponent(e) + \"=\" + encodeURIComponent(null == n ? \"\" : n);\n    };\n\n    if (null == e) return \"\";\n    if (Array.isArray(e) || e.jquery && !w.isPlainObject(e)) w.each(e, function () {\n      i(this.name, this.value);\n    });else for (n in e) {\n      Ht(n, e[n], t, i);\n    }\n    return r.join(\"&\");\n  }, w.fn.extend({\n    serialize: function serialize() {\n      return w.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var e = w.prop(this, \"elements\");\n        return e ? w.makeArray(e) : this;\n      }).filter(function () {\n        var e = this.type;\n        return this.name && !w(this).is(\":disabled\") && Nt.test(this.nodeName) && !Dt.test(e) && (this.checked || !pe.test(e));\n      }).map(function (e, t) {\n        var n = w(this).val();\n        return null == n ? null : Array.isArray(n) ? w.map(n, function (e) {\n          return {\n            name: t.name,\n            value: e.replace(At, \"\\r\\n\")\n          };\n        }) : {\n          name: t.name,\n          value: n.replace(At, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var jt = /%20/g,\n      Wt = /#.*$/,\n      Rt = /([?&])_=[^&]*/,\n      Ot = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm,\n      Pt = /^(?:GET|HEAD)$/,\n      Yt = /^\\/\\//,\n      qt = {},\n      Mt = {},\n      Xt = \"*/\".concat(\"*\"),\n      Bt = r.createElement(\"a\");\n\n  function It(e) {\n    return function (t, n) {\n      \"string\" != typeof t && (n = t, t = \"*\");\n      var r,\n          i = 0,\n          o = t.toLowerCase().match(P) || [];\n      if (g(n)) for (; r = o[i++];) {\n        \"+\" === r[0] ? (r = r.slice(1) || \"*\", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);\n      }\n    };\n  }\n\n  function Ft(e, t, n, r) {\n    var i = {},\n        o = e === Mt;\n\n    function s(a) {\n      var l;\n      return i[a] = !0, w.each(e[a] || [], function (e, a) {\n        var c = a(t, n, r);\n        return \"string\" != typeof c || o || i[c] ? o ? !(l = c) : void 0 : (t.dataTypes.unshift(c), s(c), !1);\n      }), l;\n    }\n\n    return s(t.dataTypes[0]) || !i[\"*\"] && s(\"*\");\n  }\n\n  function $t(e, t) {\n    var n,\n        r,\n        i = w.ajaxSettings.flatOptions || {};\n\n    for (n in t) {\n      void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);\n    }\n\n    return r && w.extend(!0, e, r), e;\n  }\n\n  Bt.href = Ct.href, w.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: Ct.href,\n      type: \"GET\",\n      isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ct.protocol),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": Xt,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": JSON.parse,\n        \"text xml\": w.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function ajaxSetup(e, t) {\n      return t ? $t($t(e, w.ajaxSettings), t) : $t(w.ajaxSettings, e);\n    },\n    ajaxPrefilter: It(qt),\n    ajaxTransport: It(Mt),\n    ajax: function ajax(t, n) {\n      \"object\" == _typeof(t) && (n = t, t = void 0), n = n || {};\n      var i,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          f,\n          p,\n          d,\n          h = w.ajaxSetup({}, n),\n          g = h.context || h,\n          m = h.context && (g.nodeType || g.jquery) ? w(g) : w.event,\n          v = w.Deferred(),\n          y = w.Callbacks(\"once memory\"),\n          b = h.statusCode || {},\n          x = {},\n          T = {},\n          E = \"canceled\",\n          C = {\n        readyState: 0,\n        getResponseHeader: function getResponseHeader(e) {\n          var t;\n\n          if (u) {\n            if (!a) for (a = {}; t = Ot.exec(s);) {\n              a[t[1].toLowerCase() + \" \"] = (a[t[1].toLowerCase() + \" \"] || []).concat(t[2]);\n            }\n            t = a[e.toLowerCase() + \" \"];\n          }\n\n          return null == t ? null : t.join(\", \");\n        },\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return u ? s : null;\n        },\n        setRequestHeader: function setRequestHeader(e, t) {\n          return null == u && (e = T[e.toLowerCase()] = T[e.toLowerCase()] || e, x[e] = t), this;\n        },\n        overrideMimeType: function overrideMimeType(e) {\n          return null == u && (h.mimeType = e), this;\n        },\n        statusCode: function statusCode(e) {\n          var t;\n          if (e) if (u) C.always(e[C.status]);else for (t in e) {\n            b[t] = [b[t], e[t]];\n          }\n          return this;\n        },\n        abort: function abort(e) {\n          var t = e || E;\n          return i && i.abort(t), S(0, t), this;\n        }\n      };\n\n      if (v.promise(C), h.url = ((t || h.url || Ct.href) + \"\").replace(Yt, Ct.protocol + \"//\"), h.type = n.method || n.type || h.method || h.type, h.dataTypes = (h.dataType || \"*\").toLowerCase().match(P) || [\"\"], null == h.crossDomain) {\n        c = r.createElement(\"a\");\n\n        try {\n          c.href = h.url, c.href = c.href, h.crossDomain = Bt.protocol + \"//\" + Bt.host != c.protocol + \"//\" + c.host;\n        } catch (t) {\n          h.crossDomain = !0;\n        }\n      }\n\n      if (h.data && h.processData && \"string\" != typeof h.data && (h.data = w.param(h.data, h.traditional)), Ft(qt, h, n, C), u) return C;\n\n      for (p in (f = w.event && h.global) && 0 == w.active++ && w.event.trigger(\"ajaxStart\"), h.type = h.type.toUpperCase(), h.hasContent = !Pt.test(h.type), o = h.url.replace(Wt, \"\"), h.hasContent ? h.data && h.processData && 0 === (h.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && (h.data = h.data.replace(jt, \"+\")) : (d = h.url.slice(o.length), h.data && (h.processData || \"string\" == typeof h.data) && (o += (Lt.test(o) ? \"&\" : \"?\") + h.data, delete h.data), !1 === h.cache && (o = o.replace(Rt, \"$1\"), d = (Lt.test(o) ? \"&\" : \"?\") + \"_=\" + St++ + d), h.url = o + d), h.ifModified && (w.lastModified[o] && C.setRequestHeader(\"If-Modified-Since\", w.lastModified[o]), w.etag[o] && C.setRequestHeader(\"If-None-Match\", w.etag[o])), (h.data && h.hasContent && !1 !== h.contentType || n.contentType) && C.setRequestHeader(\"Content-Type\", h.contentType), C.setRequestHeader(\"Accept\", h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + (\"*\" !== h.dataTypes[0] ? \", \" + Xt + \"; q=0.01\" : \"\") : h.accepts[\"*\"]), h.headers) {\n        C.setRequestHeader(p, h.headers[p]);\n      }\n\n      if (h.beforeSend && (!1 === h.beforeSend.call(g, C, h) || u)) return C.abort();\n\n      if (E = \"abort\", y.add(h.complete), C.done(h.success), C.fail(h.error), i = Ft(Mt, h, n, C)) {\n        if (C.readyState = 1, f && m.trigger(\"ajaxSend\", [C, h]), u) return C;\n        h.async && 0 < h.timeout && (l = e.setTimeout(function () {\n          C.abort(\"timeout\");\n        }, h.timeout));\n\n        try {\n          u = !1, i.send(x, S);\n        } catch (t) {\n          if (u) throw t;\n          S(-1, t);\n        }\n      } else S(-1, \"No Transport\");\n\n      function S(t, n, r, a) {\n        var c,\n            p,\n            d,\n            x,\n            T,\n            E = n;\n        u || (u = !0, l && e.clearTimeout(l), i = void 0, s = a || \"\", C.readyState = 0 < t ? 4 : 0, c = 200 <= t && t < 300 || 304 === t, r && (x = function (e, t, n) {\n          for (var r, i, o, s, a = e.contents, l = e.dataTypes; \"*\" === l[0];) {\n            l.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader(\"Content-Type\"));\n          }\n\n          if (r) for (i in a) {\n            if (a[i] && a[i].test(r)) {\n              l.unshift(i);\n              break;\n            }\n          }\n          if (l[0] in n) o = l[0];else {\n            for (i in n) {\n              if (!l[0] || e.converters[i + \" \" + l[0]]) {\n                o = i;\n                break;\n              }\n\n              s || (s = i);\n            }\n\n            o = o || s;\n          }\n          if (o) return o !== l[0] && l.unshift(o), n[o];\n        }(h, C, r)), x = function (e, t, n, r) {\n          var i,\n              o,\n              s,\n              a,\n              l,\n              c = {},\n              u = e.dataTypes.slice();\n          if (u[1]) for (s in e.converters) {\n            c[s.toLowerCase()] = e.converters[s];\n          }\n\n          for (o = u.shift(); o;) {\n            if (e.responseFields[o] && (n[e.responseFields[o]] = t), !l && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), l = o, o = u.shift()) if (\"*\" === o) o = l;else if (\"*\" !== l && l !== o) {\n              if (!(s = c[l + \" \" + o] || c[\"* \" + o])) for (i in c) {\n                if ((a = i.split(\" \"))[1] === o && (s = c[l + \" \" + a[0]] || c[\"* \" + a[0]])) {\n                  !0 === s ? s = c[i] : !0 !== c[i] && (o = a[0], u.unshift(a[1]));\n                  break;\n                }\n              }\n              if (!0 !== s) if (s && e[\"throws\"]) t = s(t);else try {\n                t = s(t);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: s ? e : \"No conversion from \" + l + \" to \" + o\n                };\n              }\n            }\n          }\n\n          return {\n            state: \"success\",\n            data: t\n          };\n        }(h, x, C, c), c ? (h.ifModified && ((T = C.getResponseHeader(\"Last-Modified\")) && (w.lastModified[o] = T), (T = C.getResponseHeader(\"etag\")) && (w.etag[o] = T)), 204 === t || \"HEAD\" === h.type ? E = \"nocontent\" : 304 === t ? E = \"notmodified\" : (E = x.state, p = x.data, c = !(d = x.error))) : (d = E, !t && E || (E = \"error\", t < 0 && (t = 0))), C.status = t, C.statusText = (n || E) + \"\", c ? v.resolveWith(g, [p, E, C]) : v.rejectWith(g, [C, E, d]), C.statusCode(b), b = void 0, f && m.trigger(c ? \"ajaxSuccess\" : \"ajaxError\", [C, h, c ? p : d]), y.fireWith(g, [C, E]), f && (m.trigger(\"ajaxComplete\", [C, h]), --w.active || w.event.trigger(\"ajaxStop\")));\n      }\n\n      return C;\n    },\n    getJSON: function getJSON(e, t, n) {\n      return w.get(e, t, n, \"json\");\n    },\n    getScript: function getScript(e, t) {\n      return w.get(e, void 0, t, \"script\");\n    }\n  }), w.each([\"get\", \"post\"], function (e, t) {\n    w[t] = function (e, n, r, i) {\n      return g(n) && (i = i || r, r = n, n = void 0), w.ajax(w.extend({\n        url: e,\n        type: t,\n        dataType: i,\n        data: n,\n        success: r\n      }, w.isPlainObject(e) && e));\n    };\n  }), w._evalUrl = function (e, t) {\n    return w.ajax({\n      url: e,\n      type: \"GET\",\n      dataType: \"script\",\n      cache: !0,\n      async: !1,\n      global: !1,\n      converters: {\n        \"text script\": function textScript() {}\n      },\n      dataFilter: function dataFilter(e) {\n        w.globalEval(e, t);\n      }\n    });\n  }, w.fn.extend({\n    wrapAll: function wrapAll(e) {\n      var t;\n      return this[0] && (g(e) && (e = e.call(this[0])), t = w(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () {\n        for (var e = this; e.firstElementChild;) {\n          e = e.firstElementChild;\n        }\n\n        return e;\n      }).append(this)), this;\n    },\n    wrapInner: function wrapInner(e) {\n      return g(e) ? this.each(function (t) {\n        w(this).wrapInner(e.call(this, t));\n      }) : this.each(function () {\n        var t = w(this),\n            n = t.contents();\n        n.length ? n.wrapAll(e) : t.append(e);\n      });\n    },\n    wrap: function wrap(e) {\n      var t = g(e);\n      return this.each(function (n) {\n        w(this).wrapAll(t ? e.call(this, n) : e);\n      });\n    },\n    unwrap: function unwrap(e) {\n      return this.parent(e).not(\"body\").each(function () {\n        w(this).replaceWith(this.childNodes);\n      }), this;\n    }\n  }), w.expr.pseudos.hidden = function (e) {\n    return !w.expr.pseudos.visible(e);\n  }, w.expr.pseudos.visible = function (e) {\n    return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);\n  }, w.ajaxSettings.xhr = function () {\n    try {\n      return new e.XMLHttpRequest();\n    } catch (e) {}\n  };\n  var _t = {\n    0: 200,\n    1223: 204\n  },\n      Ut = w.ajaxSettings.xhr();\n  h.cors = !!Ut && \"withCredentials\" in Ut, h.ajax = Ut = !!Ut, w.ajaxTransport(function (t) {\n    var _n, r;\n\n    if (h.cors || Ut && !t.crossDomain) return {\n      send: function send(i, o) {\n        var s,\n            a = t.xhr();\n        if (a.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields) for (s in t.xhrFields) {\n          a[s] = t.xhrFields[s];\n        }\n\n        for (s in t.mimeType && a.overrideMimeType && a.overrideMimeType(t.mimeType), t.crossDomain || i[\"X-Requested-With\"] || (i[\"X-Requested-With\"] = \"XMLHttpRequest\"), i) {\n          a.setRequestHeader(s, i[s]);\n        }\n\n        _n = function n(e) {\n          return function () {\n            _n && (_n = r = a.onload = a.onerror = a.onabort = a.ontimeout = a.onreadystatechange = null, \"abort\" === e ? a.abort() : \"error\" === e ? \"number\" != typeof a.status ? o(0, \"error\") : o(a.status, a.statusText) : o(_t[a.status] || a.status, a.statusText, \"text\" !== (a.responseType || \"text\") || \"string\" != typeof a.responseText ? {\n              binary: a.response\n            } : {\n              text: a.responseText\n            }, a.getAllResponseHeaders()));\n          };\n        }, a.onload = _n(), r = a.onerror = a.ontimeout = _n(\"error\"), void 0 !== a.onabort ? a.onabort = r : a.onreadystatechange = function () {\n          4 === a.readyState && e.setTimeout(function () {\n            _n && r();\n          });\n        }, _n = _n(\"abort\");\n\n        try {\n          a.send(t.hasContent && t.data || null);\n        } catch (i) {\n          if (_n) throw i;\n        }\n      },\n      abort: function abort() {\n        _n && _n();\n      }\n    };\n  }), w.ajaxPrefilter(function (e) {\n    e.crossDomain && (e.contents.script = !1);\n  }), w.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function textScript(e) {\n        return w.globalEval(e), e;\n      }\n    }\n  }), w.ajaxPrefilter(\"script\", function (e) {\n    void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = \"GET\");\n  }), w.ajaxTransport(\"script\", function (e) {\n    var t, _n2;\n\n    if (e.crossDomain || e.scriptAttrs) return {\n      send: function send(i, o) {\n        t = w(\"<script>\").attr(e.scriptAttrs || {}).prop({\n          charset: e.scriptCharset,\n          src: e.url\n        }).on(\"load error\", _n2 = function n(e) {\n          t.remove(), _n2 = null, e && o(\"error\" === e.type ? 404 : 200, e.type);\n        }), r.head.appendChild(t[0]);\n      },\n      abort: function abort() {\n        _n2 && _n2();\n      }\n    };\n  });\n  var zt,\n      Vt = [],\n      Kt = /(=)\\?(?=&|$)|\\?\\?/;\n  w.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var e = Vt.pop() || w.expando + \"_\" + St++;\n      return this[e] = !0, e;\n    }\n  }), w.ajaxPrefilter(\"json jsonp\", function (t, n, r) {\n    var i,\n        o,\n        s,\n        a = !1 !== t.jsonp && (Kt.test(t.url) ? \"url\" : \"string\" == typeof t.data && 0 === (t.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && Kt.test(t.data) && \"data\");\n    if (a || \"jsonp\" === t.dataTypes[0]) return i = t.jsonpCallback = g(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, a ? t[a] = t[a].replace(Kt, \"$1\" + i) : !1 !== t.jsonp && (t.url += (Lt.test(t.url) ? \"&\" : \"?\") + t.jsonp + \"=\" + i), t.converters[\"script json\"] = function () {\n      return s || w.error(i + \" was not called\"), s[0];\n    }, t.dataTypes[0] = \"json\", o = e[i], e[i] = function () {\n      s = arguments;\n    }, r.always(function () {\n      void 0 === o ? w(e).removeProp(i) : e[i] = o, t[i] && (t.jsonpCallback = n.jsonpCallback, Vt.push(i)), s && g(o) && o(s[0]), s = o = void 0;\n    }), \"script\";\n  }), h.createHTMLDocument = ((zt = r.implementation.createHTMLDocument(\"\").body).innerHTML = \"<form></form><form></form>\", 2 === zt.childNodes.length), w.parseHTML = function (e, t, n) {\n    return \"string\" != typeof e ? [] : (\"boolean\" == typeof t && (n = t, t = !1), t || (h.createHTMLDocument ? ((i = (t = r.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href = r.location.href, t.head.appendChild(i)) : t = r), s = !n && [], (o = D.exec(e)) ? [t.createElement(o[1])] : (o = we([e], t, s), s && s.length && w(s).remove(), w.merge([], o.childNodes)));\n    var i, o, s;\n  }, w.fn.load = function (e, t, n) {\n    var r,\n        i,\n        o,\n        s = this,\n        a = e.indexOf(\" \");\n    return -1 < a && (r = yt(e.slice(a)), e = e.slice(0, a)), g(t) ? (n = t, t = void 0) : t && \"object\" == _typeof(t) && (i = \"POST\"), 0 < s.length && w.ajax({\n      url: e,\n      type: i || \"GET\",\n      dataType: \"html\",\n      data: t\n    }).done(function (e) {\n      o = arguments, s.html(r ? w(\"<div>\").append(w.parseHTML(e)).find(r) : e);\n    }).always(n && function (e, t) {\n      s.each(function () {\n        n.apply(this, o || [e.responseText, t, e]);\n      });\n    }), this;\n  }, w.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (e, t) {\n    w.fn[t] = function (e) {\n      return this.on(t, e);\n    };\n  }), w.expr.pseudos.animated = function (e) {\n    return w.grep(w.timers, function (t) {\n      return e === t.elem;\n    }).length;\n  }, w.offset = {\n    setOffset: function setOffset(e, t, n) {\n      var r,\n          i,\n          o,\n          s,\n          a,\n          l,\n          c = w.css(e, \"position\"),\n          u = w(e),\n          f = {};\n      \"static\" === c && (e.style.position = \"relative\"), a = u.offset(), o = w.css(e, \"top\"), l = w.css(e, \"left\"), (\"absolute\" === c || \"fixed\" === c) && -1 < (o + l).indexOf(\"auto\") ? (s = (r = u.position()).top, i = r.left) : (s = parseFloat(o) || 0, i = parseFloat(l) || 0), g(t) && (t = t.call(e, n, w.extend({}, a))), null != t.top && (f.top = t.top - a.top + s), null != t.left && (f.left = t.left - a.left + i), \"using\" in t ? t.using.call(e, f) : u.css(f);\n    }\n  }, w.fn.extend({\n    offset: function offset(e) {\n      if (arguments.length) return void 0 === e ? this : this.each(function (t) {\n        w.offset.setOffset(this, e, t);\n      });\n      var t,\n          n,\n          r = this[0];\n      return r ? r.getClientRects().length ? (t = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, {\n        top: t.top + n.pageYOffset,\n        left: t.left + n.pageXOffset\n      }) : {\n        top: 0,\n        left: 0\n      } : void 0;\n    },\n    position: function position() {\n      if (this[0]) {\n        var e,\n            t,\n            n,\n            r = this[0],\n            i = {\n          top: 0,\n          left: 0\n        };\n        if (\"fixed\" === w.css(r, \"position\")) t = r.getBoundingClientRect();else {\n          for (t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement; e && (e === n.body || e === n.documentElement) && \"static\" === w.css(e, \"position\");) {\n            e = e.parentNode;\n          }\n\n          e && e !== r && 1 === e.nodeType && ((i = w(e).offset()).top += w.css(e, \"borderTopWidth\", !0), i.left += w.css(e, \"borderLeftWidth\", !0));\n        }\n        return {\n          top: t.top - i.top - w.css(r, \"marginTop\", !0),\n          left: t.left - i.left - w.css(r, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        for (var e = this.offsetParent; e && \"static\" === w.css(e, \"position\");) {\n          e = e.offsetParent;\n        }\n\n        return e || ie;\n      });\n    }\n  }), w.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (e, t) {\n    var n = \"pageYOffset\" === t;\n\n    w.fn[e] = function (r) {\n      return F(this, function (e, r, i) {\n        var o;\n        if (m(e) ? o = e : 9 === e.nodeType && (o = e.defaultView), void 0 === i) return o ? o[t] : e[r];\n        o ? o.scrollTo(n ? o.pageXOffset : i, n ? i : o.pageYOffset) : e[r] = i;\n      }, e, r, arguments.length);\n    };\n  }), w.each([\"top\", \"left\"], function (e, t) {\n    w.cssHooks[t] = $e(h.pixelPosition, function (e, n) {\n      if (n) return n = Fe(e, t), Xe.test(n) ? w(e).position()[t] + \"px\" : n;\n    });\n  }), w.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (e, t) {\n    w.each({\n      padding: \"inner\" + e,\n      content: t,\n      \"\": \"outer\" + e\n    }, function (n, r) {\n      w.fn[r] = function (i, o) {\n        var s = arguments.length && (n || \"boolean\" != typeof i),\n            a = n || (!0 === i || !0 === o ? \"margin\" : \"border\");\n        return F(this, function (t, n, i) {\n          var o;\n          return m(t) ? 0 === r.indexOf(\"outer\") ? t[\"inner\" + e] : t.document.documentElement[\"client\" + e] : 9 === t.nodeType ? (o = t.documentElement, Math.max(t.body[\"scroll\" + e], o[\"scroll\" + e], t.body[\"offset\" + e], o[\"offset\" + e], o[\"client\" + e])) : void 0 === i ? w.css(t, n, a) : w.style(t, n, i, a);\n        }, t, s ? i : void 0, s);\n      };\n    });\n  }), w.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"), function (e, t) {\n    w.fn[t] = function (e, n) {\n      return 0 < arguments.length ? this.on(t, null, e, n) : this.trigger(t);\n    };\n  }), w.fn.extend({\n    hover: function hover(e, t) {\n      return this.mouseenter(e).mouseleave(t || e);\n    }\n  }), w.fn.extend({\n    bind: function bind(e, t, n) {\n      return this.on(e, null, t, n);\n    },\n    unbind: function unbind(e, t) {\n      return this.off(e, null, t);\n    },\n    delegate: function delegate(e, t, n, r) {\n      return this.on(t, e, n, r);\n    },\n    undelegate: function undelegate(e, t, n) {\n      return 1 === arguments.length ? this.off(e, \"**\") : this.off(t, e || \"**\", n);\n    }\n  }), w.proxy = function (e, t) {\n    var n, r, i;\n    if (\"string\" == typeof t && (n = e[t], t = e, e = n), g(e)) return r = o.call(arguments, 2), (i = function i() {\n      return e.apply(t || this, r.concat(o.call(arguments)));\n    }).guid = e.guid = e.guid || w.guid++, i;\n  }, w.holdReady = function (e) {\n    e ? w.readyWait++ : w.ready(!0);\n  }, w.isArray = Array.isArray, w.parseJSON = JSON.parse, w.nodeName = A, w.isFunction = g, w.isWindow = m, w.camelCase = z, w.type = b, w.now = Date.now, w.isNumeric = function (e) {\n    var t = w.type(e);\n    return (\"number\" === t || \"string\" === t) && !isNaN(e - parseFloat(e));\n  },  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return w;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var Gt = e.jQuery,\n      Qt = e.$;\n  return w.noConflict = function (t) {\n    return e.$ === w && (e.$ = Qt), t && e.jQuery === w && (e.jQuery = Gt), w;\n  }, t || (e.jQuery = e.$ = w), w;\n}), function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  function e(e) {\n    return e && \"[object Function]\" === {}.toString.call(e);\n  }\n\n  function t(e, t) {\n    if (1 !== e.nodeType) return [];\n    var n = e.ownerDocument.defaultView.getComputedStyle(e, null);\n    return t ? n[t] : n;\n  }\n\n  function n(e) {\n    return \"HTML\" === e.nodeName ? e : e.parentNode || e.host;\n  }\n\n  function r(e) {\n    if (!e) return document.body;\n\n    switch (e.nodeName) {\n      case \"HTML\":\n      case \"BODY\":\n        return e.ownerDocument.body;\n\n      case \"#document\":\n        return e.body;\n    }\n\n    var i = t(e),\n        o = i.overflow,\n        s = i.overflowX,\n        a = i.overflowY;\n    return /(auto|scroll|overlay)/.test(o + a + s) ? e : r(n(e));\n  }\n\n  function i(e) {\n    return e && e.referenceNode ? e.referenceNode : e;\n  }\n\n  function o(e) {\n    return 11 === e ? U : 10 === e ? z : U || z;\n  }\n\n  function s(e) {\n    if (!e) return document.documentElement;\n\n    for (var n = o(10) ? document.body : null, r = e.offsetParent || null; r === n && e.nextElementSibling;) {\n      r = (e = e.nextElementSibling).offsetParent;\n    }\n\n    var i = r && r.nodeName;\n    return i && \"BODY\" !== i && \"HTML\" !== i ? -1 !== [\"TH\", \"TD\", \"TABLE\"].indexOf(r.nodeName) && \"static\" === t(r, \"position\") ? s(r) : r : e ? e.ownerDocument.documentElement : document.documentElement;\n  }\n\n  function a(e) {\n    return null === e.parentNode ? e : a(e.parentNode);\n  }\n\n  function l(e, t) {\n    if (!(e && e.nodeType && t && t.nodeType)) return document.documentElement;\n    var n = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,\n        r = n ? e : t,\n        i = n ? t : e,\n        o = document.createRange();\n    o.setStart(r, 0), o.setEnd(i, 0);\n    var c = o.commonAncestorContainer;\n    if (e !== c && t !== c || r.contains(i)) return function (e) {\n      var t = e.nodeName;\n      return \"BODY\" !== t && (\"HTML\" === t || s(e.firstElementChild) === e);\n    }(c) ? c : s(c);\n    var u = a(e);\n    return u.host ? l(u.host, t) : l(e, a(t).host);\n  }\n\n  function c(e) {\n    var t = \"top\" === (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : \"top\") ? \"scrollTop\" : \"scrollLeft\",\n        n = e.nodeName;\n\n    if (\"BODY\" === n || \"HTML\" === n) {\n      var r = e.ownerDocument.documentElement;\n      return (e.ownerDocument.scrollingElement || r)[t];\n    }\n\n    return e[t];\n  }\n\n  function u(e, t) {\n    var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        r = c(t, \"top\"),\n        i = c(t, \"left\"),\n        o = n ? -1 : 1;\n    return e.top += r * o, e.bottom += r * o, e.left += i * o, e.right += i * o, e;\n  }\n\n  function f(e, t) {\n    var n = \"x\" === t ? \"Left\" : \"Top\",\n        r = \"Left\" == n ? \"Right\" : \"Bottom\";\n    return parseFloat(e[\"border\" + n + \"Width\"], 10) + parseFloat(e[\"border\" + r + \"Width\"], 10);\n  }\n\n  function p(e, t, n, r) {\n    return I(t[\"offset\" + e], t[\"scroll\" + e], n[\"client\" + e], n[\"offset\" + e], n[\"scroll\" + e], o(10) ? parseInt(n[\"offset\" + e]) + parseInt(r[\"margin\" + (\"Height\" === e ? \"Top\" : \"Left\")]) + parseInt(r[\"margin\" + (\"Height\" === e ? \"Bottom\" : \"Right\")]) : 0);\n  }\n\n  function d(e) {\n    var t = e.body,\n        n = e.documentElement,\n        r = o(10) && getComputedStyle(n);\n    return {\n      height: p(\"Height\", t, n, r),\n      width: p(\"Width\", t, n, r)\n    };\n  }\n\n  function h(e) {\n    return Q({}, e, {\n      right: e.left + e.width,\n      bottom: e.top + e.height\n    });\n  }\n\n  function g(e) {\n    var n = {};\n\n    try {\n      if (o(10)) {\n        n = e.getBoundingClientRect();\n        var r = c(e, \"top\"),\n            i = c(e, \"left\");\n        n.top += r, n.left += i, n.bottom += r, n.right += i;\n      } else n = e.getBoundingClientRect();\n    } catch (e) {}\n\n    var s = {\n      left: n.left,\n      top: n.top,\n      width: n.right - n.left,\n      height: n.bottom - n.top\n    },\n        a = \"HTML\" === e.nodeName ? d(e.ownerDocument) : {},\n        l = a.width || e.clientWidth || s.width,\n        u = a.height || e.clientHeight || s.height,\n        p = e.offsetWidth - l,\n        g = e.offsetHeight - u;\n\n    if (p || g) {\n      var m = t(e);\n      p -= f(m, \"x\"), g -= f(m, \"y\"), s.width -= p, s.height -= g;\n    }\n\n    return h(s);\n  }\n\n  function m(e, n) {\n    var i = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        s = o(10),\n        a = \"HTML\" === n.nodeName,\n        l = g(e),\n        c = g(n),\n        f = r(e),\n        p = t(n),\n        d = parseFloat(p.borderTopWidth, 10),\n        m = parseFloat(p.borderLeftWidth, 10);\n    i && a && (c.top = I(c.top, 0), c.left = I(c.left, 0));\n    var v = h({\n      top: l.top - c.top - d,\n      left: l.left - c.left - m,\n      width: l.width,\n      height: l.height\n    });\n\n    if (v.marginTop = 0, v.marginLeft = 0, !s && a) {\n      var y = parseFloat(p.marginTop, 10),\n          b = parseFloat(p.marginLeft, 10);\n      v.top -= d - y, v.bottom -= d - y, v.left -= m - b, v.right -= m - b, v.marginTop = y, v.marginLeft = b;\n    }\n\n    return (s && !i ? n.contains(f) : n === f && \"BODY\" !== f.nodeName) && (v = u(v, n)), v;\n  }\n\n  function v(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        n = e.ownerDocument.documentElement,\n        r = m(e, n),\n        i = I(n.clientWidth, window.innerWidth || 0),\n        o = I(n.clientHeight, window.innerHeight || 0),\n        s = t ? 0 : c(n),\n        a = t ? 0 : c(n, \"left\");\n    return h({\n      top: s - r.top + r.marginTop,\n      left: a - r.left + r.marginLeft,\n      width: i,\n      height: o\n    });\n  }\n\n  function y(e) {\n    var r = e.nodeName;\n    if (\"BODY\" === r || \"HTML\" === r) return !1;\n    if (\"fixed\" === t(e, \"position\")) return !0;\n    var i = n(e);\n    return !!i && y(i);\n  }\n\n  function b(e) {\n    if (!e || !e.parentElement || o()) return document.documentElement;\n\n    for (var n = e.parentElement; n && \"none\" === t(n, \"transform\");) {\n      n = n.parentElement;\n    }\n\n    return n || document.documentElement;\n  }\n\n  function x(e, t, o, s) {\n    var a = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],\n        c = {\n      top: 0,\n      left: 0\n    },\n        u = a ? b(e) : l(e, i(t));\n    if (\"viewport\" === s) c = v(u, a);else {\n      var f;\n      \"scrollParent\" === s ? \"BODY\" === (f = r(n(t))).nodeName && (f = e.ownerDocument.documentElement) : f = \"window\" === s ? e.ownerDocument.documentElement : s;\n      var p = m(f, u, a);\n      if (\"HTML\" !== f.nodeName || y(u)) c = p;else {\n        var h = d(e.ownerDocument),\n            g = h.height,\n            x = h.width;\n        c.top += p.top - p.marginTop, c.bottom = g + p.top, c.left += p.left - p.marginLeft, c.right = x + p.left;\n      }\n    }\n    var w = \"number\" == typeof (o = o || 0);\n    return c.left += w ? o : o.left || 0, c.top += w ? o : o.top || 0, c.right -= w ? o : o.right || 0, c.bottom -= w ? o : o.bottom || 0, c;\n  }\n\n  function w(e) {\n    return e.width * e.height;\n  }\n\n  function T(e, t, n, r, i) {\n    var o = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === e.indexOf(\"auto\")) return e;\n    var s = x(n, r, o, i),\n        a = {\n      top: {\n        width: s.width,\n        height: t.top - s.top\n      },\n      right: {\n        width: s.right - t.right,\n        height: s.height\n      },\n      bottom: {\n        width: s.width,\n        height: s.bottom - t.bottom\n      },\n      left: {\n        width: t.left - s.left,\n        height: s.height\n      }\n    },\n        l = Object.keys(a).map(function (e) {\n      return Q({\n        key: e\n      }, a[e], {\n        area: w(a[e])\n      });\n    }).sort(function (e, t) {\n      return t.area - e.area;\n    }),\n        c = l.filter(function (e) {\n      var t = e.width,\n          r = e.height;\n      return t >= n.clientWidth && r >= n.clientHeight;\n    }),\n        u = 0 < c.length ? c[0].key : l[0].key,\n        f = e.split(\"-\")[1];\n    return u + (f ? \"-\" + f : \"\");\n  }\n\n  function E(e, t, n) {\n    var r = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n    return m(n, r ? b(t) : l(t, i(n)), r);\n  }\n\n  function C(e) {\n    var t = e.ownerDocument.defaultView.getComputedStyle(e),\n        n = parseFloat(t.marginTop || 0) + parseFloat(t.marginBottom || 0),\n        r = parseFloat(t.marginLeft || 0) + parseFloat(t.marginRight || 0);\n    return {\n      width: e.offsetWidth + r,\n      height: e.offsetHeight + n\n    };\n  }\n\n  function S(e) {\n    var t = {\n      left: \"right\",\n      right: \"left\",\n      bottom: \"top\",\n      top: \"bottom\"\n    };\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return t[e];\n    });\n  }\n\n  function L(e, t, n) {\n    n = n.split(\"-\")[0];\n    var r = C(e),\n        i = {\n      width: r.width,\n      height: r.height\n    },\n        o = -1 !== [\"right\", \"left\"].indexOf(n),\n        s = o ? \"top\" : \"left\",\n        a = o ? \"left\" : \"top\",\n        l = o ? \"height\" : \"width\",\n        c = o ? \"width\" : \"height\";\n    return i[s] = t[s] + t[l] / 2 - r[l] / 2, i[a] = n === a ? t[a] - r[c] : t[S(a)], i;\n  }\n\n  function k(e, t) {\n    return Array.prototype.find ? e.find(t) : e.filter(t)[0];\n  }\n\n  function A(t, n, r) {\n    return (void 0 === r ? t : t.slice(0, function (e, t, n) {\n      if (Array.prototype.findIndex) return e.findIndex(function (e) {\n        return e[t] === n;\n      });\n      var r = k(e, function (e) {\n        return e[t] === n;\n      });\n      return e.indexOf(r);\n    }(t, \"name\", r))).forEach(function (t) {\n      t[\"function\"] && console.warn(\"`modifier.function` is deprecated, use `modifier.fn`!\");\n      var r = t[\"function\"] || t.fn;\n      t.enabled && e(r) && (n.offsets.popper = h(n.offsets.popper), n.offsets.reference = h(n.offsets.reference), n = r(n, t));\n    }), n;\n  }\n\n  function D(e, t) {\n    return e.some(function (e) {\n      var n = e.name;\n      return e.enabled && n === t;\n    });\n  }\n\n  function N(e) {\n    for (var t = [!1, \"ms\", \"Webkit\", \"Moz\", \"O\"], n = e.charAt(0).toUpperCase() + e.slice(1), r = 0; r < t.length; r++) {\n      var i = t[r],\n          o = i ? \"\" + i + n : e;\n      if (void 0 !== document.body.style[o]) return o;\n    }\n\n    return null;\n  }\n\n  function H(e) {\n    var t = e.ownerDocument;\n    return t ? t.defaultView : window;\n  }\n\n  function j(e, t, n, i) {\n    n.updateBound = i, H(e).addEventListener(\"resize\", n.updateBound, {\n      passive: !0\n    });\n    var o = r(e);\n    return function e(t, n, i, o) {\n      var s = \"BODY\" === t.nodeName,\n          a = s ? t.ownerDocument.defaultView : t;\n      a.addEventListener(n, i, {\n        passive: !0\n      }), s || e(r(a.parentNode), n, i, o), o.push(a);\n    }(o, \"scroll\", n.updateBound, n.scrollParents), n.scrollElement = o, n.eventsEnabled = !0, n;\n  }\n\n  function W() {\n    var e, t;\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (e = this.reference, t = this.state, H(e).removeEventListener(\"resize\", t.updateBound), t.scrollParents.forEach(function (e) {\n      e.removeEventListener(\"scroll\", t.updateBound);\n    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t));\n  }\n\n  function R(e) {\n    return \"\" !== e && !isNaN(parseFloat(e)) && isFinite(e);\n  }\n\n  function O(e, t) {\n    Object.keys(t).forEach(function (n) {\n      var r = \"\";\n      -1 !== [\"width\", \"height\", \"top\", \"right\", \"bottom\", \"left\"].indexOf(n) && R(t[n]) && (r = \"px\"), e.style[n] = t[n] + r;\n    });\n  }\n\n  function P(e, t, n) {\n    var r = k(e, function (e) {\n      return e.name === t;\n    }),\n        i = !!r && e.some(function (e) {\n      return e.name === n && e.enabled && e.order < r.order;\n    });\n\n    if (!i) {\n      var o = \"`\" + t + \"`\";\n      console.warn(\"`\" + n + \"` modifier is required by \" + o + \" modifier in order to work, be sure to include it before \" + o + \"!\");\n    }\n\n    return i;\n  }\n\n  function Y(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        n = ee.indexOf(e),\n        r = ee.slice(n + 1).concat(ee.slice(0, n));\n    return t ? r.reverse() : r;\n  }\n\n  function q(e, t, n, r) {\n    var i = [0, 0],\n        o = -1 !== [\"right\", \"left\"].indexOf(r),\n        s = e.split(/(\\+|\\-)/).map(function (e) {\n      return e.trim();\n    }),\n        a = s.indexOf(k(s, function (e) {\n      return -1 !== e.search(/,|\\s/);\n    }));\n    s[a] && -1 === s[a].indexOf(\",\") && console.warn(\"Offsets separated by white space(s) are deprecated, use a comma (,) instead.\");\n    var l = /\\s*,\\s*|\\s+/,\n        c = -1 === a ? [s] : [s.slice(0, a).concat([s[a].split(l)[0]]), [s[a].split(l)[1]].concat(s.slice(a + 1))];\n    return (c = c.map(function (e, r) {\n      var i = (1 === r ? !o : o) ? \"height\" : \"width\",\n          s = !1;\n      return e.reduce(function (e, t) {\n        return \"\" === e[e.length - 1] && -1 !== [\"+\", \"-\"].indexOf(t) ? (e[e.length - 1] = t, s = !0, e) : s ? (e[e.length - 1] += t, s = !1, e) : e.concat(t);\n      }, []).map(function (e) {\n        return function (e, t, n, r) {\n          var i = e.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n              o = +i[1],\n              s = i[2];\n          if (!o) return e;\n\n          if (0 === s.indexOf(\"%\")) {\n            var a;\n\n            switch (s) {\n              case \"%p\":\n                a = n;\n                break;\n\n              case \"%\":\n              case \"%r\":\n              default:\n                a = r;\n            }\n\n            return h(a)[t] / 100 * o;\n          }\n\n          return \"vh\" === s || \"vw\" === s ? (\"vh\" === s ? I(document.documentElement.clientHeight, window.innerHeight || 0) : I(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * o : o;\n        }(e, i, t, n);\n      });\n    })).forEach(function (e, t) {\n      e.forEach(function (n, r) {\n        R(n) && (i[t] += n * (\"-\" === e[r - 1] ? -1 : 1));\n      });\n    }), i;\n  }\n\n  var M = Math.min,\n      X = Math.floor,\n      B = Math.round,\n      I = Math.max,\n      F = \"undefined\" != typeof window && \"undefined\" != typeof document && \"undefined\" != typeof navigator,\n      $ = function () {\n    for (var e = [\"Edge\", \"Trident\", \"Firefox\"], t = 0; t < e.length; t += 1) {\n      if (F && 0 <= navigator.userAgent.indexOf(e[t])) return 1;\n    }\n\n    return 0;\n  }(),\n      _ = F && window.Promise ? function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, window.Promise.resolve().then(function () {\n        t = !1, e();\n      }));\n    };\n  } : function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, setTimeout(function () {\n        t = !1, e();\n      }, $));\n    };\n  },\n      U = F && !(!window.MSInputMethodContext || !document.documentMode),\n      z = F && /MSIE 10/.test(navigator.userAgent),\n      V = function V(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  },\n      K = function () {\n    function e(e, t) {\n      for (var n, r = 0; r < t.length; r++) {\n        (n = t[r]).enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      G = function G(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  },\n      Q = Object.assign || function (e) {\n    for (var t, n = 1; n < arguments.length; n++) {\n      for (var r in t = arguments[n]) {\n        Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);\n      }\n    }\n\n    return e;\n  },\n      J = F && /Firefox/i.test(navigator.userAgent),\n      Z = [\"auto-start\", \"auto\", \"auto-end\", \"top-start\", \"top\", \"top-end\", \"right-start\", \"right\", \"right-end\", \"bottom-end\", \"bottom\", \"bottom-start\", \"left-end\", \"left\", \"left-start\"],\n      ee = Z.slice(3),\n      te = \"flip\",\n      ne = \"clockwise\",\n      re = \"counterclockwise\",\n      ie = function () {\n    function t(n, r) {\n      var i = this,\n          o = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n      V(this, t), this.scheduleUpdate = function () {\n        return requestAnimationFrame(i.update);\n      }, this.update = _(this.update.bind(this)), this.options = Q({}, t.Defaults, o), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = n && n.jquery ? n[0] : n, this.popper = r && r.jquery ? r[0] : r, this.options.modifiers = {}, Object.keys(Q({}, t.Defaults.modifiers, o.modifiers)).forEach(function (e) {\n        i.options.modifiers[e] = Q({}, t.Defaults.modifiers[e] || {}, o.modifiers ? o.modifiers[e] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {\n        return Q({\n          name: e\n        }, i.options.modifiers[e]);\n      }).sort(function (e, t) {\n        return e.order - t.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && e(t.onLoad) && t.onLoad(i.reference, i.popper, i.options, t, i.state);\n      }), this.update();\n      var s = this.options.eventsEnabled;\n      s && this.enableEventListeners(), this.state.eventsEnabled = s;\n    }\n\n    return K(t, [{\n      key: \"update\",\n      value: function value() {\n        return function () {\n          if (!this.state.isDestroyed) {\n            var e = {\n              instance: this,\n              styles: {},\n              arrowStyles: {},\n              attributes: {},\n              flipped: !1,\n              offsets: {}\n            };\n            e.offsets.reference = E(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = T(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = L(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? \"fixed\" : \"absolute\", e = A(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));\n          }\n        }.call(this);\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        return function () {\n          return this.state.isDestroyed = !0, D(this.modifiers, \"applyStyle\") && (this.popper.removeAttribute(\"x-placement\"), this.popper.style.position = \"\", this.popper.style.top = \"\", this.popper.style.left = \"\", this.popper.style.right = \"\", this.popper.style.bottom = \"\", this.popper.style.willChange = \"\", this.popper.style[N(\"transform\")] = \"\"), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n        }.call(this);\n      }\n    }, {\n      key: \"enableEventListeners\",\n      value: function value() {\n        return function () {\n          this.state.eventsEnabled || (this.state = j(this.reference, this.options, this.state, this.scheduleUpdate));\n        }.call(this);\n      }\n    }, {\n      key: \"disableEventListeners\",\n      value: function value() {\n        return W.call(this);\n      }\n    }]), t;\n  }();\n\n  return ie.Utils = (\"undefined\" == typeof window ? __webpack_require__.g : window).PopperUtils, ie.placements = Z, ie.Defaults = {\n    placement: \"bottom\",\n    positionFixed: !1,\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.placement,\n              n = t.split(\"-\")[0],\n              r = t.split(\"-\")[1];\n\n          if (r) {\n            var i = e.offsets,\n                o = i.reference,\n                s = i.popper,\n                a = -1 !== [\"bottom\", \"top\"].indexOf(n),\n                l = a ? \"left\" : \"top\",\n                c = a ? \"width\" : \"height\",\n                u = {\n              start: G({}, l, o[l]),\n              end: G({}, l, o[l] + o[c] - s[c])\n            };\n            e.offsets.popper = Q({}, s, u[r]);\n          }\n\n          return e;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var n,\n              r = t.offset,\n              i = e.placement,\n              o = e.offsets,\n              s = o.popper,\n              a = o.reference,\n              l = i.split(\"-\")[0];\n          return n = R(+r) ? [+r, 0] : q(r, s, a, l), \"left\" === l ? (s.top += n[0], s.left -= n[1]) : \"right\" === l ? (s.top += n[0], s.left += n[1]) : \"top\" === l ? (s.left += n[0], s.top -= n[1]) : \"bottom\" === l && (s.left += n[0], s.top += n[1]), e.popper = s, e;\n        },\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var n = t.boundariesElement || s(e.instance.popper);\n          e.instance.reference === n && (n = s(n));\n          var r = N(\"transform\"),\n              i = e.instance.popper.style,\n              o = i.top,\n              a = i.left,\n              l = i[r];\n          i.top = \"\", i.left = \"\", i[r] = \"\";\n          var c = x(e.instance.popper, e.instance.reference, t.padding, n, e.positionFixed);\n          i.top = o, i.left = a, i[r] = l, t.boundaries = c;\n          var u = t.priority,\n              f = e.offsets.popper,\n              p = {\n            primary: function primary(e) {\n              var n = f[e];\n              return f[e] < c[e] && !t.escapeWithReference && (n = I(f[e], c[e])), G({}, e, n);\n            },\n            secondary: function secondary(e) {\n              var n = \"right\" === e ? \"left\" : \"top\",\n                  r = f[n];\n              return f[e] > c[e] && !t.escapeWithReference && (r = M(f[n], c[e] - (\"right\" === e ? f.width : f.height))), G({}, n, r);\n            }\n          };\n          return u.forEach(function (e) {\n            var t = -1 === [\"left\", \"top\"].indexOf(e) ? \"secondary\" : \"primary\";\n            f = Q({}, f, p[t](e));\n          }), e.offsets.popper = f, e;\n        },\n        priority: [\"left\", \"right\", \"top\", \"bottom\"],\n        padding: 5,\n        boundariesElement: \"scrollParent\"\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.offsets,\n              n = t.popper,\n              r = t.reference,\n              i = e.placement.split(\"-\")[0],\n              o = X,\n              s = -1 !== [\"top\", \"bottom\"].indexOf(i),\n              a = s ? \"right\" : \"bottom\",\n              l = s ? \"left\" : \"top\",\n              c = s ? \"width\" : \"height\";\n          return n[a] < o(r[l]) && (e.offsets.popper[l] = o(r[l]) - n[c]), n[l] > o(r[a]) && (e.offsets.popper[l] = o(r[a])), e;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(e, n) {\n          var r;\n          if (!P(e.instance.modifiers, \"arrow\", \"keepTogether\")) return e;\n          var i = n.element;\n\n          if (\"string\" == typeof i) {\n            if (!(i = e.instance.popper.querySelector(i))) return e;\n          } else if (!e.instance.popper.contains(i)) return console.warn(\"WARNING: `arrow.element` must be child of its popper element!\"), e;\n\n          var o = e.placement.split(\"-\")[0],\n              s = e.offsets,\n              a = s.popper,\n              l = s.reference,\n              c = -1 !== [\"left\", \"right\"].indexOf(o),\n              u = c ? \"height\" : \"width\",\n              f = c ? \"Top\" : \"Left\",\n              p = f.toLowerCase(),\n              d = c ? \"left\" : \"top\",\n              g = c ? \"bottom\" : \"right\",\n              m = C(i)[u];\n          l[g] - m < a[p] && (e.offsets.popper[p] -= a[p] - (l[g] - m)), l[p] + m > a[g] && (e.offsets.popper[p] += l[p] + m - a[g]), e.offsets.popper = h(e.offsets.popper);\n          var v = l[p] + l[u] / 2 - m / 2,\n              y = t(e.instance.popper),\n              b = parseFloat(y[\"margin\" + f], 10),\n              x = parseFloat(y[\"border\" + f + \"Width\"], 10),\n              w = v - e.offsets.popper[p] - b - x;\n          return w = I(M(a[u] - m, w), 0), e.arrowElement = i, e.offsets.arrow = (G(r = {}, p, B(w)), G(r, d, \"\"), r), e;\n        },\n        element: \"[x-arrow]\"\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(e, t) {\n          if (D(e.instance.modifiers, \"inner\")) return e;\n          if (e.flipped && e.placement === e.originalPlacement) return e;\n          var n = x(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement, e.positionFixed),\n              r = e.placement.split(\"-\")[0],\n              i = S(r),\n              o = e.placement.split(\"-\")[1] || \"\",\n              s = [];\n\n          switch (t.behavior) {\n            case te:\n              s = [r, i];\n              break;\n\n            case ne:\n              s = Y(r);\n              break;\n\n            case re:\n              s = Y(r, !0);\n              break;\n\n            default:\n              s = t.behavior;\n          }\n\n          return s.forEach(function (a, l) {\n            if (r !== a || s.length === l + 1) return e;\n            r = e.placement.split(\"-\")[0], i = S(r);\n            var c = e.offsets.popper,\n                u = e.offsets.reference,\n                f = X,\n                p = \"left\" === r && f(c.right) > f(u.left) || \"right\" === r && f(c.left) < f(u.right) || \"top\" === r && f(c.bottom) > f(u.top) || \"bottom\" === r && f(c.top) < f(u.bottom),\n                d = f(c.left) < f(n.left),\n                h = f(c.right) > f(n.right),\n                g = f(c.top) < f(n.top),\n                m = f(c.bottom) > f(n.bottom),\n                v = \"left\" === r && d || \"right\" === r && h || \"top\" === r && g || \"bottom\" === r && m,\n                y = -1 !== [\"top\", \"bottom\"].indexOf(r),\n                b = !!t.flipVariations && (y && \"start\" === o && d || y && \"end\" === o && h || !y && \"start\" === o && g || !y && \"end\" === o && m),\n                x = !!t.flipVariationsByContent && (y && \"start\" === o && h || y && \"end\" === o && d || !y && \"start\" === o && m || !y && \"end\" === o && g),\n                w = b || x;\n            (p || v || w) && (e.flipped = !0, (p || v) && (r = s[l + 1]), w && (o = function (e) {\n              return \"end\" === e ? \"start\" : \"start\" === e ? \"end\" : e;\n            }(o)), e.placement = r + (o ? \"-\" + o : \"\"), e.offsets.popper = Q({}, e.offsets.popper, L(e.instance.popper, e.offsets.reference, e.placement)), e = A(e.instance.modifiers, e, \"flip\"));\n          }), e;\n        },\n        behavior: \"flip\",\n        padding: 5,\n        boundariesElement: \"viewport\",\n        flipVariations: !1,\n        flipVariationsByContent: !1\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(e) {\n          var t = e.placement,\n              n = t.split(\"-\")[0],\n              r = e.offsets,\n              i = r.popper,\n              o = r.reference,\n              s = -1 !== [\"left\", \"right\"].indexOf(n),\n              a = -1 === [\"top\", \"left\"].indexOf(n);\n          return i[s ? \"left\" : \"top\"] = o[n] - (a ? i[s ? \"width\" : \"height\"] : 0), e.placement = S(t), e.offsets.popper = h(i), e;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(e) {\n          if (!P(e.instance.modifiers, \"hide\", \"preventOverflow\")) return e;\n          var t = e.offsets.reference,\n              n = k(e.instance.modifiers, function (e) {\n            return \"preventOverflow\" === e.name;\n          }).boundaries;\n\n          if (t.bottom < n.top || t.left > n.right || t.top > n.bottom || t.right < n.left) {\n            if (!0 === e.hide) return e;\n            e.hide = !0, e.attributes[\"x-out-of-boundaries\"] = \"\";\n          } else {\n            if (!1 === e.hide) return e;\n            e.hide = !1, e.attributes[\"x-out-of-boundaries\"] = !1;\n          }\n\n          return e;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var n = t.x,\n              r = t.y,\n              i = e.offsets.popper,\n              o = k(e.instance.modifiers, function (e) {\n            return \"applyStyle\" === e.name;\n          }).gpuAcceleration;\n          void 0 !== o && console.warn(\"WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!\");\n\n          var a,\n              l,\n              c = void 0 === o ? t.gpuAcceleration : o,\n              u = s(e.instance.popper),\n              f = g(u),\n              p = {\n            position: i.position\n          },\n              d = function (e, t) {\n            var n = e.offsets,\n                r = n.popper,\n                i = n.reference,\n                o = B,\n                s = function s(e) {\n              return e;\n            },\n                a = o(i.width),\n                l = o(r.width),\n                c = -1 !== [\"left\", \"right\"].indexOf(e.placement),\n                u = -1 !== e.placement.indexOf(\"-\"),\n                f = t ? c || u || a % 2 == l % 2 ? o : X : s,\n                p = t ? o : s;\n\n            return {\n              left: f(1 == a % 2 && 1 == l % 2 && !u && t ? r.left - 1 : r.left),\n              top: p(r.top),\n              bottom: p(r.bottom),\n              right: f(r.right)\n            };\n          }(e, 2 > window.devicePixelRatio || !J),\n              h = \"bottom\" === n ? \"top\" : \"bottom\",\n              m = \"right\" === r ? \"left\" : \"right\",\n              v = N(\"transform\");\n\n          if (l = \"bottom\" == h ? \"HTML\" === u.nodeName ? -u.clientHeight + d.bottom : -f.height + d.bottom : d.top, a = \"right\" == m ? \"HTML\" === u.nodeName ? -u.clientWidth + d.right : -f.width + d.right : d.left, c && v) p[v] = \"translate3d(\" + a + \"px, \" + l + \"px, 0)\", p[h] = 0, p[m] = 0, p.willChange = \"transform\";else {\n            var y = \"bottom\" == h ? -1 : 1,\n                b = \"right\" == m ? -1 : 1;\n            p[h] = l * y, p[m] = a * b, p.willChange = h + \", \" + m;\n          }\n          var x = {\n            \"x-placement\": e.placement\n          };\n          return e.attributes = Q({}, x, e.attributes), e.styles = Q({}, p, e.styles), e.arrowStyles = Q({}, e.offsets.arrow, e.arrowStyles), e;\n        },\n        gpuAcceleration: !0,\n        x: \"bottom\",\n        y: \"right\"\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(e) {\n          return O(e.instance.popper, e.styles), function (e, t) {\n            Object.keys(t).forEach(function (n) {\n              !1 === t[n] ? e.removeAttribute(n) : e.setAttribute(n, t[n]);\n            });\n          }(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && O(e.arrowElement, e.arrowStyles), e;\n        },\n        onLoad: function onLoad(e, t, n, r, i) {\n          var o = E(i, t, e, n.positionFixed),\n              s = T(n.placement, o, t, e, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);\n          return t.setAttribute(\"x-placement\", s), O(t, {\n            position: n.positionFixed ? \"fixed\" : \"absolute\"\n          }), n;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  }, ie;\n}), function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  var e = Math.abs,\n      t = Math.floor;\n\n  function n(e) {\n    return getComputedStyle(e);\n  }\n\n  function r(e, t) {\n    for (var n in t) {\n      var r = t[n];\n      \"number\" == typeof r && (r += \"px\"), e.style[n] = r;\n    }\n\n    return e;\n  }\n\n  function i(e) {\n    var t = document.createElement(\"div\");\n    return t.className = e, t;\n  }\n\n  function o(e, t) {\n    if (!b) throw new Error(\"No element matching method supported\");\n    return b.call(e, t);\n  }\n\n  function s(e) {\n    e.remove ? e.remove() : e.parentNode && e.parentNode.removeChild(e);\n  }\n\n  function a(e, t) {\n    return Array.prototype.filter.call(e.children, function (e) {\n      return o(e, t);\n    });\n  }\n\n  function l(e, t) {\n    var n = e.element.classList,\n        r = x.state.scrolling(t);\n    n.contains(r) ? clearTimeout(w[t]) : n.add(r);\n  }\n\n  function c(e, t) {\n    w[t] = setTimeout(function () {\n      return e.isAlive && e.element.classList.remove(x.state.scrolling(t));\n    }, e.settings.scrollingThreshold);\n  }\n\n  function u(e, t) {\n    l(e, t), c(e, t);\n  }\n\n  function f(e) {\n    if (\"function\" == typeof window.CustomEvent) return new CustomEvent(e);\n    var t = document.createEvent(\"CustomEvent\");\n    return t.initCustomEvent(e, !1, !1, void 0), t;\n  }\n\n  function p(e, t, n, r, i) {\n    var o;\n    if (void 0 === r && (r = !0), void 0 === i && (i = !1), \"top\" === t) o = [\"contentHeight\", \"containerHeight\", \"scrollTop\", \"y\", \"up\", \"down\"];else {\n      if (\"left\" !== t) throw new Error(\"A proper axis should be provided\");\n      o = [\"contentWidth\", \"containerWidth\", \"scrollLeft\", \"x\", \"left\", \"right\"];\n    }\n    !function (e, t, n, r, i) {\n      var o = n[0],\n          s = n[1],\n          a = n[2],\n          l = n[3],\n          c = n[4],\n          p = n[5];\n      void 0 === r && (r = !0), void 0 === i && (i = !1);\n      var d = e.element;\n      e.reach[l] = null, 1 > d[a] && (e.reach[l] = \"start\"), d[a] > e[o] - e[s] - 1 && (e.reach[l] = \"end\"), t && (d.dispatchEvent(f(\"ps-scroll-\" + l)), 0 > t ? d.dispatchEvent(f(\"ps-scroll-\" + c)) : 0 < t && d.dispatchEvent(f(\"ps-scroll-\" + p)), r && u(e, l)), e.reach[l] && (t || i) && d.dispatchEvent(f(\"ps-\" + l + \"-reach-\" + e.reach[l]));\n    }(e, n, o, r, i);\n  }\n\n  function d(e) {\n    return parseInt(e, 10) || 0;\n  }\n\n  function h(e) {\n    return o(e, \"input,[contenteditable]\") || o(e, \"select,[contenteditable]\") || o(e, \"textarea,[contenteditable]\") || o(e, \"button,[contenteditable]\");\n  }\n\n  function g(e) {\n    var n = Math.ceil,\n        r = e.element,\n        i = t(r.scrollTop),\n        o = r.getBoundingClientRect();\n    e.containerWidth = n(o.width), e.containerHeight = n(o.height), e.contentWidth = r.scrollWidth, e.contentHeight = r.scrollHeight, r.contains(e.scrollbarXRail) || (a(r, x.element.rail(\"x\")).forEach(function (e) {\n      return s(e);\n    }), r.appendChild(e.scrollbarXRail)), r.contains(e.scrollbarYRail) || (a(r, x.element.rail(\"y\")).forEach(function (e) {\n      return s(e);\n    }), r.appendChild(e.scrollbarYRail)), !e.settings.suppressScrollX && e.containerWidth + e.settings.scrollXMarginOffset < e.contentWidth ? (e.scrollbarXActive = !0, e.railXWidth = e.containerWidth - e.railXMarginWidth, e.railXRatio = e.containerWidth / e.railXWidth, e.scrollbarXWidth = m(e, d(e.railXWidth * e.containerWidth / e.contentWidth)), e.scrollbarXLeft = d((e.negativeScrollAdjustment + r.scrollLeft) * (e.railXWidth - e.scrollbarXWidth) / (e.contentWidth - e.containerWidth))) : e.scrollbarXActive = !1, !e.settings.suppressScrollY && e.containerHeight + e.settings.scrollYMarginOffset < e.contentHeight ? (e.scrollbarYActive = !0, e.railYHeight = e.containerHeight - e.railYMarginHeight, e.railYRatio = e.containerHeight / e.railYHeight, e.scrollbarYHeight = m(e, d(e.railYHeight * e.containerHeight / e.contentHeight)), e.scrollbarYTop = d(i * (e.railYHeight - e.scrollbarYHeight) / (e.contentHeight - e.containerHeight))) : e.scrollbarYActive = !1, e.scrollbarXLeft >= e.railXWidth - e.scrollbarXWidth && (e.scrollbarXLeft = e.railXWidth - e.scrollbarXWidth), e.scrollbarYTop >= e.railYHeight - e.scrollbarYHeight && (e.scrollbarYTop = e.railYHeight - e.scrollbarYHeight), v(r, e), e.scrollbarXActive ? r.classList.add(x.state.active(\"x\")) : (r.classList.remove(x.state.active(\"x\")), e.scrollbarXWidth = 0, e.scrollbarXLeft = 0, r.scrollLeft = !0 === e.isRtl ? e.contentWidth : 0), e.scrollbarYActive ? r.classList.add(x.state.active(\"y\")) : (r.classList.remove(x.state.active(\"y\")), e.scrollbarYHeight = 0, e.scrollbarYTop = 0, r.scrollTop = 0);\n  }\n\n  function m(e, t) {\n    var n = Math.min,\n        r = Math.max;\n    return e.settings.minScrollbarLength && (t = r(t, e.settings.minScrollbarLength)), e.settings.maxScrollbarLength && (t = n(t, e.settings.maxScrollbarLength)), t;\n  }\n\n  function v(e, n) {\n    var i = {\n      width: n.railXWidth\n    },\n        o = t(e.scrollTop);\n    i.left = n.isRtl ? n.negativeScrollAdjustment + e.scrollLeft + n.containerWidth - n.contentWidth : e.scrollLeft, n.isScrollbarXUsingBottom ? i.bottom = n.scrollbarXBottom - o : i.top = n.scrollbarXTop + o, r(n.scrollbarXRail, i);\n    var s = {\n      top: o,\n      height: n.railYHeight\n    };\n    n.isScrollbarYUsingRight ? n.isRtl ? s.right = n.contentWidth - (n.negativeScrollAdjustment + e.scrollLeft) - n.scrollbarYRight - n.scrollbarYOuterWidth - 9 : s.right = n.scrollbarYRight - e.scrollLeft : n.isRtl ? s.left = n.negativeScrollAdjustment + e.scrollLeft + 2 * n.containerWidth - n.contentWidth - n.scrollbarYLeft - n.scrollbarYOuterWidth : s.left = n.scrollbarYLeft + e.scrollLeft, r(n.scrollbarYRail, s), r(n.scrollbarX, {\n      left: n.scrollbarXLeft,\n      width: n.scrollbarXWidth - n.railBorderXWidth\n    }), r(n.scrollbarY, {\n      top: n.scrollbarYTop,\n      height: n.scrollbarYHeight - n.railBorderYWidth\n    });\n  }\n\n  function y(e, t) {\n    function n(t) {\n      t.touches && t.touches[0] && (t[a] = t.touches[0].pageY), v[d] = y + w * (t[a] - b), l(e, h), g(e), t.stopPropagation(), t.preventDefault();\n    }\n\n    function r() {\n      c(e, h), e[m].classList.remove(x.state.clicking), e.event.unbind(e.ownerDocument, \"mousemove\", n);\n    }\n\n    function i(t, i) {\n      y = v[d], i && t.touches && (t[a] = t.touches[0].pageY), b = t[a], w = (e[s] - e[o]) / (e[u] - e[p]), i ? e.event.bind(e.ownerDocument, \"touchmove\", n) : (e.event.bind(e.ownerDocument, \"mousemove\", n), e.event.once(e.ownerDocument, \"mouseup\", r), t.preventDefault()), e[m].classList.add(x.state.clicking), t.stopPropagation();\n    }\n\n    var o = t[0],\n        s = t[1],\n        a = t[2],\n        u = t[3],\n        f = t[4],\n        p = t[5],\n        d = t[6],\n        h = t[7],\n        m = t[8],\n        v = e.element,\n        y = null,\n        b = null,\n        w = null;\n    e.event.bind(e[f], \"mousedown\", function (e) {\n      i(e);\n    }), e.event.bind(e[f], \"touchstart\", function (e) {\n      i(e, !0);\n    });\n  }\n\n  var b = \"undefined\" != typeof Element && (Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector),\n      x = {\n    main: \"ps\",\n    rtl: \"ps__rtl\",\n    element: {\n      thumb: function thumb(e) {\n        return \"ps__thumb-\" + e;\n      },\n      rail: function rail(e) {\n        return \"ps__rail-\" + e;\n      },\n      consuming: \"ps__child--consume\"\n    },\n    state: {\n      focus: \"ps--focus\",\n      clicking: \"ps--clicking\",\n      active: function active(e) {\n        return \"ps--active-\" + e;\n      },\n      scrolling: function scrolling(e) {\n        return \"ps--scrolling-\" + e;\n      }\n    }\n  },\n      w = {\n    x: null,\n    y: null\n  },\n      T = function T(e) {\n    this.element = e, this.handlers = {};\n  },\n      E = {\n    isEmpty: {\n      configurable: !0\n    }\n  };\n\n  T.prototype.bind = function (e, t) {\n    void 0 === this.handlers[e] && (this.handlers[e] = []), this.handlers[e].push(t), this.element.addEventListener(e, t, !1);\n  }, T.prototype.unbind = function (e, t) {\n    var n = this;\n    this.handlers[e] = this.handlers[e].filter(function (r) {\n      return !(!t || r === t) || (n.element.removeEventListener(e, r, !1), !1);\n    });\n  }, T.prototype.unbindAll = function () {\n    for (var e in this.handlers) {\n      this.unbind(e);\n    }\n  }, E.isEmpty.get = function () {\n    var e = this;\n    return Object.keys(this.handlers).every(function (t) {\n      return 0 === e.handlers[t].length;\n    });\n  }, Object.defineProperties(T.prototype, E);\n\n  var C = function C() {\n    this.eventElements = [];\n  };\n\n  C.prototype.eventElement = function (e) {\n    var t = this.eventElements.filter(function (t) {\n      return t.element === e;\n    })[0];\n    return t || (t = new T(e), this.eventElements.push(t)), t;\n  }, C.prototype.bind = function (e, t, n) {\n    this.eventElement(e).bind(t, n);\n  }, C.prototype.unbind = function (e, t, n) {\n    var r = this.eventElement(e);\n    r.unbind(t, n), r.isEmpty && this.eventElements.splice(this.eventElements.indexOf(r), 1);\n  }, C.prototype.unbindAll = function () {\n    this.eventElements.forEach(function (e) {\n      return e.unbindAll();\n    }), this.eventElements = [];\n  }, C.prototype.once = function (e, t, n) {\n    var r = this.eventElement(e),\n        i = function i(e) {\n      r.unbind(t, i), n(e);\n    };\n\n    r.bind(t, i);\n  };\n\n  var S = {\n    isWebKit: \"undefined\" != typeof document && \"WebkitAppearance\" in document.documentElement.style,\n    supportsTouch: \"undefined\" != typeof window && (\"ontouchstart\" in window || \"maxTouchPoints\" in window.navigator && 0 < window.navigator.maxTouchPoints || window.DocumentTouch && document instanceof window.DocumentTouch),\n    supportsIePointer: \"undefined\" != typeof navigator && navigator.msMaxTouchPoints,\n    isChrome: \"undefined\" != typeof navigator && /Chrome/i.test(navigator && navigator.userAgent)\n  },\n      L = {\n    \"click-rail\": function clickRail(e) {\n      e.element, e.event.bind(e.scrollbarY, \"mousedown\", function (e) {\n        return e.stopPropagation();\n      }), e.event.bind(e.scrollbarYRail, \"mousedown\", function (t) {\n        var n = t.pageY - window.pageYOffset - e.scrollbarYRail.getBoundingClientRect().top > e.scrollbarYTop ? 1 : -1;\n        e.element.scrollTop += n * e.containerHeight, g(e), t.stopPropagation();\n      }), e.event.bind(e.scrollbarX, \"mousedown\", function (e) {\n        return e.stopPropagation();\n      }), e.event.bind(e.scrollbarXRail, \"mousedown\", function (t) {\n        var n = t.pageX - window.pageXOffset - e.scrollbarXRail.getBoundingClientRect().left > e.scrollbarXLeft ? 1 : -1;\n        e.element.scrollLeft += n * e.containerWidth, g(e), t.stopPropagation();\n      });\n    },\n    \"drag-thumb\": function dragThumb(e) {\n      y(e, [\"containerWidth\", \"contentWidth\", \"pageX\", \"railXWidth\", \"scrollbarX\", \"scrollbarXWidth\", \"scrollLeft\", \"x\", \"scrollbarXRail\"]), y(e, [\"containerHeight\", \"contentHeight\", \"pageY\", \"railYHeight\", \"scrollbarY\", \"scrollbarYHeight\", \"scrollTop\", \"y\", \"scrollbarYRail\"]);\n    },\n    keyboard: function keyboard(e) {\n      var n = e.element,\n          r = function r() {\n        return o(n, \":hover\");\n      },\n          i = function i() {\n        return o(e.scrollbarX, \":focus\") || o(e.scrollbarY, \":focus\");\n      };\n\n      e.event.bind(e.ownerDocument, \"keydown\", function (o) {\n        if (!(o.isDefaultPrevented && o.isDefaultPrevented() || o.defaultPrevented) && (r() || i())) {\n          var s = document.activeElement ? document.activeElement : e.ownerDocument.activeElement;\n\n          if (s) {\n            if (\"IFRAME\" === s.tagName) s = s.contentDocument.activeElement;else for (; s.shadowRoot;) {\n              s = s.shadowRoot.activeElement;\n            }\n            if (h(s)) return;\n          }\n\n          var a = 0,\n              l = 0;\n\n          switch (o.which) {\n            case 37:\n              a = o.metaKey ? -e.contentWidth : o.altKey ? -e.containerWidth : -30;\n              break;\n\n            case 38:\n              l = o.metaKey ? e.contentHeight : o.altKey ? e.containerHeight : 30;\n              break;\n\n            case 39:\n              a = o.metaKey ? e.contentWidth : o.altKey ? e.containerWidth : 30;\n              break;\n\n            case 40:\n              l = o.metaKey ? -e.contentHeight : o.altKey ? -e.containerHeight : -30;\n              break;\n\n            case 32:\n              l = o.shiftKey ? e.containerHeight : -e.containerHeight;\n              break;\n\n            case 33:\n              l = e.containerHeight;\n              break;\n\n            case 34:\n              l = -e.containerHeight;\n              break;\n\n            case 36:\n              l = e.contentHeight;\n              break;\n\n            case 35:\n              l = -e.contentHeight;\n              break;\n\n            default:\n              return;\n          }\n\n          e.settings.suppressScrollX && 0 !== a || e.settings.suppressScrollY && 0 !== l || (n.scrollTop -= l, n.scrollLeft += a, g(e), function (r, i) {\n            var o = t(n.scrollTop);\n\n            if (0 === r) {\n              if (!e.scrollbarYActive) return !1;\n              if (0 === o && 0 < i || o >= e.contentHeight - e.containerHeight && 0 > i) return !e.settings.wheelPropagation;\n            }\n\n            var s = n.scrollLeft;\n\n            if (0 === i) {\n              if (!e.scrollbarXActive) return !1;\n              if (0 === s && 0 > r || s >= e.contentWidth - e.containerWidth && 0 < r) return !e.settings.wheelPropagation;\n            }\n\n            return !0;\n          }(a, l) && o.preventDefault());\n        }\n      });\n    },\n    wheel: function wheel(r) {\n      function i(e, t, r) {\n        if (!S.isWebKit && s.querySelector(\"select:focus\")) return !0;\n        if (!s.contains(e)) return !1;\n\n        for (var i = e; i && i !== s;) {\n          if (i.classList.contains(x.element.consuming)) return !0;\n          var o = n(i);\n\n          if (r && o.overflowY.match(/(scroll|auto)/)) {\n            var a = i.scrollHeight - i.clientHeight;\n            if (0 < a && (0 < i.scrollTop && 0 > r || i.scrollTop < a && 0 < r)) return !0;\n          }\n\n          if (t && o.overflowX.match(/(scroll|auto)/)) {\n            var l = i.scrollWidth - i.clientWidth;\n            if (0 < l && (0 < i.scrollLeft && 0 > t || i.scrollLeft < l && 0 < t)) return !0;\n          }\n\n          i = i.parentNode;\n        }\n\n        return !1;\n      }\n\n      function o(n) {\n        var o = function (e) {\n          var t = e.deltaX,\n              n = -1 * e.deltaY;\n          return (void 0 === t || void 0 === n) && (t = -1 * e.wheelDeltaX / 6, n = e.wheelDeltaY / 6), e.deltaMode && 1 === e.deltaMode && (t *= 10, n *= 10), t != t && n != n && (t = 0, n = e.wheelDelta), e.shiftKey ? [-n, -t] : [t, n];\n        }(n),\n            a = o[0],\n            l = o[1];\n\n        if (!i(n.target, a, l)) {\n          var c = !1;\n          r.settings.useBothWheelAxes ? r.scrollbarYActive && !r.scrollbarXActive ? (l ? s.scrollTop -= l * r.settings.wheelSpeed : s.scrollTop += a * r.settings.wheelSpeed, c = !0) : r.scrollbarXActive && !r.scrollbarYActive && (a ? s.scrollLeft += a * r.settings.wheelSpeed : s.scrollLeft -= l * r.settings.wheelSpeed, c = !0) : (s.scrollTop -= l * r.settings.wheelSpeed, s.scrollLeft += a * r.settings.wheelSpeed), g(r), (c = c || function (n, i) {\n            var o = t(s.scrollTop),\n                a = 0 === s.scrollTop,\n                l = o + s.offsetHeight === s.scrollHeight,\n                c = 0 === s.scrollLeft,\n                u = s.scrollLeft + s.offsetWidth === s.scrollWidth;\n            return !(e(i) > e(n) ? a || l : c || u) || !r.settings.wheelPropagation;\n          }(a, l)) && !n.ctrlKey && (n.stopPropagation(), n.preventDefault());\n        }\n      }\n\n      var s = r.element;\n      void 0 === window.onwheel ? void 0 !== window.onmousewheel && r.event.bind(s, \"mousewheel\", o) : r.event.bind(s, \"wheel\", o);\n    },\n    touch: function touch(r) {\n      function i(n, i) {\n        var o = t(p.scrollTop),\n            s = p.scrollLeft,\n            a = e(n),\n            l = e(i);\n\n        if (l > a) {\n          if (0 > i && o === r.contentHeight - r.containerHeight || 0 < i && 0 === o) return 0 === window.scrollY && 0 < i && S.isChrome;\n        } else if (a > l && (0 > n && s === r.contentWidth - r.containerWidth || 0 < n && 0 === s)) return !0;\n\n        return !0;\n      }\n\n      function o(e, t) {\n        p.scrollTop -= t, p.scrollLeft -= e, g(r);\n      }\n\n      function s(e) {\n        return e.targetTouches ? e.targetTouches[0] : e;\n      }\n\n      function a(e) {\n        return !(e.pointerType && \"pen\" === e.pointerType && 0 === e.buttons || (!e.targetTouches || 1 !== e.targetTouches.length) && (!e.pointerType || \"mouse\" === e.pointerType || e.pointerType === e.MSPOINTER_TYPE_MOUSE));\n      }\n\n      function l(e) {\n        if (a(e)) {\n          var t = s(e);\n          d.pageX = t.pageX, d.pageY = t.pageY, h = new Date().getTime(), null !== v && clearInterval(v);\n        }\n      }\n\n      function c(e, t, r) {\n        if (!p.contains(e)) return !1;\n\n        for (var i = e; i && i !== p;) {\n          if (i.classList.contains(x.element.consuming)) return !0;\n          var o = n(i);\n\n          if (r && o.overflowY.match(/(scroll|auto)/)) {\n            var s = i.scrollHeight - i.clientHeight;\n            if (0 < s && (0 < i.scrollTop && 0 > r || i.scrollTop < s && 0 < r)) return !0;\n          }\n\n          if (t && o.overflowX.match(/(scroll|auto)/)) {\n            var a = i.scrollWidth - i.clientWidth;\n            if (0 < a && (0 < i.scrollLeft && 0 > t || i.scrollLeft < a && 0 < t)) return !0;\n          }\n\n          i = i.parentNode;\n        }\n\n        return !1;\n      }\n\n      function u(e) {\n        if (a(e)) {\n          var t = s(e),\n              n = {\n            pageX: t.pageX,\n            pageY: t.pageY\n          },\n              r = n.pageX - d.pageX,\n              l = n.pageY - d.pageY;\n          if (c(e.target, r, l)) return;\n          o(r, l), d = n;\n          var u = new Date().getTime(),\n              f = u - h;\n          0 < f && (m.x = r / f, m.y = l / f, h = u), i(r, l) && e.preventDefault();\n        }\n      }\n\n      function f() {\n        r.settings.swipeEasing && (clearInterval(v), v = setInterval(function () {\n          return r.isInitialized ? void clearInterval(v) : m.x || m.y ? .01 > e(m.x) && .01 > e(m.y) ? void clearInterval(v) : (o(30 * m.x, 30 * m.y), m.x *= .8, void (m.y *= .8)) : void clearInterval(v);\n        }, 10));\n      }\n\n      if (S.supportsTouch || S.supportsIePointer) {\n        var p = r.element,\n            d = {},\n            h = 0,\n            m = {},\n            v = null;\n        S.supportsTouch ? (r.event.bind(p, \"touchstart\", l), r.event.bind(p, \"touchmove\", u), r.event.bind(p, \"touchend\", f)) : S.supportsIePointer && (window.PointerEvent ? (r.event.bind(p, \"pointerdown\", l), r.event.bind(p, \"pointermove\", u), r.event.bind(p, \"pointerup\", f)) : window.MSPointerEvent && (r.event.bind(p, \"MSPointerDown\", l), r.event.bind(p, \"MSPointerMove\", u), r.event.bind(p, \"MSPointerUp\", f)));\n      }\n    }\n  },\n      k = function k(e, o) {\n    var s = this;\n    if (void 0 === o && (o = {}), \"string\" == typeof e && (e = document.querySelector(e)), !e || !e.nodeName) throw new Error(\"no element is specified to initialize PerfectScrollbar\");\n\n    for (var a in this.element = e, e.classList.add(x.main), this.settings = {\n      handlers: [\"click-rail\", \"drag-thumb\", \"keyboard\", \"wheel\", \"touch\"],\n      maxScrollbarLength: null,\n      minScrollbarLength: null,\n      scrollingThreshold: 1e3,\n      scrollXMarginOffset: 0,\n      scrollYMarginOffset: 0,\n      suppressScrollX: !1,\n      suppressScrollY: !1,\n      swipeEasing: !0,\n      useBothWheelAxes: !1,\n      wheelPropagation: !0,\n      wheelSpeed: 1\n    }, o) {\n      this.settings[a] = o[a];\n    }\n\n    this.containerWidth = null, this.containerHeight = null, this.contentWidth = null, this.contentHeight = null;\n\n    var l = function l() {\n      return e.classList.add(x.state.focus);\n    },\n        c = function c() {\n      return e.classList.remove(x.state.focus);\n    };\n\n    this.isRtl = \"rtl\" === n(e).direction, !0 === this.isRtl && e.classList.add(x.rtl), this.isNegativeScroll = function () {\n      var t,\n          n = e.scrollLeft;\n      return e.scrollLeft = -1, t = 0 > e.scrollLeft, e.scrollLeft = n, t;\n    }(), this.negativeScrollAdjustment = this.isNegativeScroll ? e.scrollWidth - e.clientWidth : 0, this.event = new C(), this.ownerDocument = e.ownerDocument || document, this.scrollbarXRail = i(x.element.rail(\"x\")), e.appendChild(this.scrollbarXRail), this.scrollbarX = i(x.element.thumb(\"x\")), this.scrollbarXRail.appendChild(this.scrollbarX), this.scrollbarX.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarX, \"focus\", l), this.event.bind(this.scrollbarX, \"blur\", c), this.scrollbarXActive = null, this.scrollbarXWidth = null, this.scrollbarXLeft = null;\n    var u = n(this.scrollbarXRail);\n    this.scrollbarXBottom = parseInt(u.bottom, 10), isNaN(this.scrollbarXBottom) ? (this.isScrollbarXUsingBottom = !1, this.scrollbarXTop = d(u.top)) : this.isScrollbarXUsingBottom = !0, this.railBorderXWidth = d(u.borderLeftWidth) + d(u.borderRightWidth), r(this.scrollbarXRail, {\n      display: \"block\"\n    }), this.railXMarginWidth = d(u.marginLeft) + d(u.marginRight), r(this.scrollbarXRail, {\n      display: \"\"\n    }), this.railXWidth = null, this.railXRatio = null, this.scrollbarYRail = i(x.element.rail(\"y\")), e.appendChild(this.scrollbarYRail), this.scrollbarY = i(x.element.thumb(\"y\")), this.scrollbarYRail.appendChild(this.scrollbarY), this.scrollbarY.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarY, \"focus\", l), this.event.bind(this.scrollbarY, \"blur\", c), this.scrollbarYActive = null, this.scrollbarYHeight = null, this.scrollbarYTop = null;\n    var f = n(this.scrollbarYRail);\n    this.scrollbarYRight = parseInt(f.right, 10), isNaN(this.scrollbarYRight) ? (this.isScrollbarYUsingRight = !1, this.scrollbarYLeft = d(f.left)) : this.isScrollbarYUsingRight = !0, this.scrollbarYOuterWidth = this.isRtl ? function (e) {\n      var t = n(e);\n      return d(t.width) + d(t.paddingLeft) + d(t.paddingRight) + d(t.borderLeftWidth) + d(t.borderRightWidth);\n    }(this.scrollbarY) : null, this.railBorderYWidth = d(f.borderTopWidth) + d(f.borderBottomWidth), r(this.scrollbarYRail, {\n      display: \"block\"\n    }), this.railYMarginHeight = d(f.marginTop) + d(f.marginBottom), r(this.scrollbarYRail, {\n      display: \"\"\n    }), this.railYHeight = null, this.railYRatio = null, this.reach = {\n      x: 0 >= e.scrollLeft ? \"start\" : e.scrollLeft >= this.contentWidth - this.containerWidth ? \"end\" : null,\n      y: 0 >= e.scrollTop ? \"start\" : e.scrollTop >= this.contentHeight - this.containerHeight ? \"end\" : null\n    }, this.isAlive = !0, this.settings.handlers.forEach(function (e) {\n      return L[e](s);\n    }), this.lastScrollTop = t(e.scrollTop), this.lastScrollLeft = e.scrollLeft, this.event.bind(this.element, \"scroll\", function (e) {\n      return s.onScroll(e);\n    }), g(this);\n  };\n\n  return k.prototype.update = function () {\n    this.isAlive && (this.negativeScrollAdjustment = this.isNegativeScroll ? this.element.scrollWidth - this.element.clientWidth : 0, r(this.scrollbarXRail, {\n      display: \"block\"\n    }), r(this.scrollbarYRail, {\n      display: \"block\"\n    }), this.railXMarginWidth = d(n(this.scrollbarXRail).marginLeft) + d(n(this.scrollbarXRail).marginRight), this.railYMarginHeight = d(n(this.scrollbarYRail).marginTop) + d(n(this.scrollbarYRail).marginBottom), r(this.scrollbarXRail, {\n      display: \"none\"\n    }), r(this.scrollbarYRail, {\n      display: \"none\"\n    }), g(this), p(this, \"top\", 0, !1, !0), p(this, \"left\", 0, !1, !0), r(this.scrollbarXRail, {\n      display: \"\"\n    }), r(this.scrollbarYRail, {\n      display: \"\"\n    }));\n  }, k.prototype.onScroll = function () {\n    this.isAlive && (g(this), p(this, \"top\", this.element.scrollTop - this.lastScrollTop), p(this, \"left\", this.element.scrollLeft - this.lastScrollLeft), this.lastScrollTop = t(this.element.scrollTop), this.lastScrollLeft = this.element.scrollLeft);\n  }, k.prototype.destroy = function () {\n    this.isAlive && (this.event.unbindAll(), s(this.scrollbarX), s(this.scrollbarY), s(this.scrollbarXRail), s(this.scrollbarYRail), this.removePsClasses(), this.element = null, this.scrollbarX = null, this.scrollbarY = null, this.scrollbarXRail = null, this.scrollbarYRail = null, this.isAlive = !1);\n  }, k.prototype.removePsClasses = function () {\n    this.element.className = this.element.className.split(\" \").filter(function (e) {\n      return !e.match(/^ps([-_].+|)$/);\n    }).join(\" \");\n  }, k;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/dashboardkit/js/vendor-all.min.js\n");

/***/ }),

/***/ "./resources/ts/app.ts":
/*!*****************************!*\
  !*** ./resources/ts/app.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")); //window.$ = jQuery;\n\n\nvar bootstrap = __importStar(__webpack_require__(/*! bootstrap */ \"./node_modules/bootstrap/dist/js/bootstrap.esm.js\"));\n\n__webpack_require__(/*! datatables.net */ \"./node_modules/datatables.net/js/jquery.dataTables.js\");\n\n__webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n\nvar perfect_scrollbar_1 = __importDefault(__webpack_require__(/*! perfect-scrollbar */ \"./node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js\"));\n\nvar apexcharts_1 = __importDefault(__webpack_require__(/*! apexcharts */ \"./node_modules/apexcharts/dist/apexcharts.common.js\"));\n\nvar sweetalert2_1 = __importDefault(__webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\"));\n\n'use strict';\n\nvar flg = \"0\";\n(0, jquery_1[\"default\"])(document).ready(function () {\n  // Main configuration for body\n  if ((0, jquery_1[\"default\"])(document).ready(function () {\n    function e(e) {\n      try {\n        e.attr(\"placeholder\").length;\n      } catch (e) {\n        0;\n      }\n\n      e.val().length > 0 ? e.parent(\".form-group\").addClass(\"fill\") : e.parent(\".form-group\").removeClass(\"fill\");\n    } //feather.replace(),\n\n\n    setTimeout(function () {\n      (0, jquery_1[\"default\"])(\".loader-bg\").fadeOut(\"slow\", function () {\n        (0, jquery_1[\"default\"])(this).remove();\n      });\n    }, 400), (0, jquery_1[\"default\"])(\"body\").hasClass(\"pc-horizontal\") || addscroller(), (0, jquery_1[\"default\"])(\".pc-horizontal\").hasClass(\"navbar-overlay\") && addscroller(), (0, jquery_1[\"default\"])(\".hamburger:not(.is-active)\").on(\"click\", function () {\n      (0, jquery_1[\"default\"])(this).hasClass(\"is-active\") ? (0, jquery_1[\"default\"])(this).removeClass(\"is-active\") : (0, jquery_1[\"default\"])(this).addClass(\"is-active\");\n    }), (0, jquery_1[\"default\"])(\"#overlay-menu\").on(\"click\", function () {\n      menuclick(), (0, jquery_1[\"default\"])(\".pc-sidebar\").hasClass(\"pc-over-menu-active\") ? rmovermenu() : ((0, jquery_1[\"default\"])(\".pc-sidebar\").addClass(\"pc-over-menu-active\"), (0, jquery_1[\"default\"])(\".pc-sidebar\").append('<div class=\"pc-menu-overlay\"></div>'), (0, jquery_1[\"default\"])(\".pc-menu-overlay\").on(\"click\", function () {\n        rmovermenu(), (0, jquery_1[\"default\"])(\".hamburger\").removeClass(\"is-active\");\n      }));\n    }), (0, jquery_1[\"default\"])(\"#vertical-nav-toggle\").on(\"click\", function () {\n      console.log(\"123\"), (0, jquery_1[\"default\"])(\"body\").hasClass(\"minimenu\") ? ((0, jquery_1[\"default\"])(\"body\").removeClass(\"minimenu\"), menuclick()) : ((0, jquery_1[\"default\"])(\"body\").addClass(\"minimenu\"), (0, jquery_1[\"default\"])(\".pc-navbar li:not(.pc-trigger) .pc-submenu\").removeAttr(\"style\"), collapseedge());\n    }), (0, jquery_1[\"default\"])(\"#mobile-collapse\").on(\"click\", function () {\n      (0, jquery_1[\"default\"])(\"body\").hasClass(\"pc-horizontal\") || menuclick(), (0, jquery_1[\"default\"])(\".pc-sidebar\").hasClass(\"mob-sidebar-active\") ? rmmenu() : ((0, jquery_1[\"default\"])(\".pc-sidebar\").addClass(\"mob-sidebar-active\"), (0, jquery_1[\"default\"])(\".pc-sidebar\").append('<div class=\"pc-menu-overlay\"></div>'), (0, jquery_1[\"default\"])(\".pc-menu-overlay\").on(\"click\", function () {\n        rmmenu(), (0, jquery_1[\"default\"])(\".hamburger\").removeClass(\"is-active\");\n      }));\n    }), (0, jquery_1[\"default\"])(\".pc-horizontal #mobile-collapse\").on(\"click\", function () {\n      (0, jquery_1[\"default\"])(\".topbar\").hasClass(\"mob-sidebar-active\") ? rmmenu() : ((0, jquery_1[\"default\"])(\".topbar\").addClass(\"mob-sidebar-active\"), (0, jquery_1[\"default\"])(\".topbar\").append('<div class=\"pc-menu-overlay\"></div>'), (0, jquery_1[\"default\"])(\".pc-menu-overlay\").on(\"click\", function () {\n        rmmenu(), (0, jquery_1[\"default\"])(\".hamburger\").removeClass(\"is-active\");\n      }));\n    }), (0, jquery_1[\"default\"])(\"#header-collapse\").on(\"click\", function () {\n      (0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header)\").hasClass(\"mob-header-active\") ? rmthead() : ((0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header)\").addClass(\"mob-header-active\"), (0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header)\").append('<div class=\"pc-md-overlay\"></div>'), (0, jquery_1[\"default\"])(\".pc-md-overlay\").on(\"click\", function () {\n        rmthead();\n      }));\n    }), (0, jquery_1[\"default\"])(\"#headerdrp-collapse\").on(\"click\", function () {\n      (0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header) .pc-mob-drp\").hasClass(\"mob-drp-active\") ? rmdrp() : ((0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header) .pc-mob-drp\").addClass(\"mob-drp-active\"), (0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header)\").append('<div class=\"pc-md-overlay\"></div>'), (0, jquery_1[\"default\"])(\".pc-md-overlay\").on(\"click\", function () {\n        rmdrp();\n      }));\n    }), (0, jquery_1[\"default\"])(\".pc-horizontal .topbar .pc-navbar>li>a\").on(\"click\", function (e) {\n      setTimeout(function () {\n        (0, jquery_1[\"default\"])(this).parents(\".dropdown\").children(\".dropdown-menu\").removeAttr(\"style\");\n      }, 1e3);\n    }), (0, jquery_1[\"default\"])(\".form-v2 .form-control\").each(function () {\n      e((0, jquery_1[\"default\"])(this));\n    }), (0, jquery_1[\"default\"])(\".form-v2 .form-control\").on(\"blur\", function () {\n      e((0, jquery_1[\"default\"])(this));\n    }), (0, jquery_1[\"default\"])(\".form-v2 .form-control\").on(\"focus\", function () {\n      (0, jquery_1[\"default\"])(this).parent(\".form-group\").addClass(\"fill\");\n    }), (0, jquery_1[\"default\"])(\"body\").hasClass(\"pc-horizontal\") && horizontalmobilemenuclick(), (0, jquery_1[\"default\"])(\"body\").hasClass(\"minimenu\") && collapseedge();\n  }), (0, jquery_1[\"default\"])(\".email-more-link\").on(\"click\", function (e) {\n    (0, jquery_1[\"default\"])(this).children(\"span\").slideToggle(1);\n  }), (0, jquery_1[\"default\"])(window).resize(function () {\n    (0, jquery_1[\"default\"])(\"body\").hasClass(\"pc-horizontal\") || (rmmini(), menuclick()), (0, jquery_1[\"default\"])(\"body\").hasClass(\"pc-horizontal\") && rmactive();\n  }), (0, jquery_1[\"default\"])(window).scroll(function () {}), (0, jquery_1[\"default\"])(window).on(\"load\", function () {\n    var e = [].slice.call(document.querySelectorAll('[data-toggle=\"tooltip\"]')),\n        a = (e.map(function (e) {\n      return new bootstrap.Tooltip(e);\n    }), [].slice.call(document.querySelectorAll('[data-toggle=\"popover\"]')));\n    a.map(function (e) {\n      return new bootstrap.Popover(e);\n    });\n  }), (0, jquery_1[\"default\"])(\".pc-sidebar .pc-navbar a\").each(function () {\n    var e = window.location.href.split(/[?#]/)[0];\n\n    if (this.href == e && \"\" != (0, jquery_1[\"default\"])(this).attr(\"href\") && ((0, jquery_1[\"default\"])(this).parent(\"li\").addClass(\"active\"), (0, jquery_1[\"default\"])(this).parent(\"li\").parent().parent(\".pc-hasmenu\").addClass(\"active\").addClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).parent(\"li\").parent().parent(\".pc-hasmenu\").parent().parent(\".pc-hasmenu\").addClass(\"active\").addClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).parent(\"li\").parent().parent(\".sidelink\").addClass(\"active\"), (0, jquery_1[\"default\"])(this).parents(\".pc-tabcontent\").addClass(\"active\"), (0, jquery_1[\"default\"])(\"body\").hasClass(\"tab-layout\"))) {\n      var a = (0, jquery_1[\"default\"])(\".pc-tabcontent.active\").attr(\"data-value\");\n      (0, jquery_1[\"default\"])(\".tab-sidemenu > li\").removeClass(\"active\"), (0, jquery_1[\"default\"])('.tab-sidemenu > li > a[data-cont=\"' + a + '\"]').parent(\"li\").addClass(\"active\");\n    }\n  }), (0, jquery_1[\"default\"])(\".tab-sidemenu > ul >li\").on(\"click\", function () {\n    var e = (0, jquery_1[\"default\"])(this).children(\"a\").attr(\"data-cont\");\n    (0, jquery_1[\"default\"])(\".navbar-content .pc-tabcontent\").removeClass(\"active\"), (0, jquery_1[\"default\"])(\".tab-sidemenu > ul > li\").removeClass(\"active\"), (0, jquery_1[\"default\"])(this).addClass(\"active\"), (0, jquery_1[\"default\"])('.navbar-content .pc-tabcontent[data-value=\"' + e + '\"]').addClass(\"active\");\n  }), (0, jquery_1[\"default\"])(\".pc-toggle-sidemenu\").click(function () {\n    (0, jquery_1[\"default\"])(\".pc-toggle-sidemenu\").hasClass(\"active\") ? (0, jquery_1[\"default\"])(\".pc-sideoverlay,.page-sidebar,.pc-toggle-sidemenu\").removeClass(\"active\") : (0, jquery_1[\"default\"])(\".pc-sideoverlay,.page-sidebar,.pc-toggle-sidemenu\").addClass(\"active\");\n  }), (0, jquery_1[\"default\"])(\".pc-sideoverlay, .pc-toggle-sidemenu.active\").click(function () {\n    (0, jquery_1[\"default\"])(\".pc-sideoverlay,.page-sidebar,.pc-toggle-sidemenu\").removeClass(\"active\");\n  }), (0, jquery_1[\"default\"])(\"body\").hasClass(\"layout-topbar\") && (0, jquery_1[\"default\"])(\".pc-header .list-unstyled > .dropdown\").hover(function () {\n    (0, jquery_1[\"default\"])(this).children(\".dropdown-menu\").addClass(\"show\");\n  }, function () {\n    (0, jquery_1[\"default\"])(this).children(\".dropdown-menu\").removeClass(\"show\");\n  }), (0, jquery_1[\"default\"])(\"body\").hasClass(\"pc-horizontal\")) {\n    var hpx,\n        docH = (0, jquery_1[\"default\"])(window).height(),\n        docW = (0, jquery_1[\"default\"])(window).width();\n    docW > 1024 && (0, jquery_1[\"default\"])(\".pc-horizontal .topbar .pc-submenu .pc-hasmenu\").hover(function () {\n      var e = (0, jquery_1[\"default\"])(this).children(\".pc-submenu\"),\n          a = e.offset(),\n          s = a.left,\n          i = a.top,\n          o = e.width(),\n          r = e.height(),\n          c = (0, jquery_1[\"default\"])(window).scrollTop();\n\n      if (s + o <= docW || e.addClass(\"edge\"), !(i + r <= docH)) {\n        var n = i - c;\n        e.addClass(\"scroll-menu\"), e.css(\"max-height\", \"calc(100vh - \" + n + \"px)\"), hpx = new perfect_scrollbar_1[\"default\"](\".scroll-menu\", {\n          wheelSpeed: .5,\n          swipeEasing: false,\n          suppressScrollX: !0,\n          wheelPropagation: true,\n          minScrollbarLength: 40\n        });\n      }\n    }, function () {\n      hpx.destroy(), (0, jquery_1[\"default\"])(\".scroll-menu\").removeAttr(\"style\"), (0, jquery_1[\"default\"])(\".scroll-menu\").removeClass(\"scroll-menu\");\n    });\n  }\n\n  (0, jquery_1[\"default\"])(\".prod-likes .form-check-input\").change(function () {\n    (0, jquery_1[\"default\"])(this).is(\":checked\") ? ((0, jquery_1[\"default\"])(this).parent(\".prod-likes\").append('<div class=\"pc-like\"><div class=\"like-wrapper\"><span><span class=\"pc-group\"><span class=\"pc-dots\"></span><span class=\"pc-dots\"></span><span class=\"pc-dots\"></span><span class=\"pc-dots\"></span></span></span></div></div>'), (0, jquery_1[\"default\"])(this).parent(\".prod-likes\").find(\".pc-like\").addClass(\"pc-like-animate\"), setTimeout(function () {\n      (0, jquery_1[\"default\"])(this).parent(\".prod-likes\").find(\".pc-like\").remove();\n    }, 3e3)) : (0, jquery_1[\"default\"])(this).parent(\".prod-likes\").find(\".pc-like\").remove();\n  }); // Timeout for floatchart\n\n  setTimeout(function () {\n    floatchart();\n  }, 700); // [ campaign-scroll ] start\n\n  var fs = new perfect_scrollbar_1[\"default\"]('.feed-scroll', {\n    wheelSpeed: .5,\n    swipeEasing: false,\n    wheelPropagation: true,\n    minScrollbarLength: 40\n  });\n  var ps = new perfect_scrollbar_1[\"default\"]('.pro-scroll', {\n    wheelSpeed: .5,\n    swipeEasing: false,\n    wheelPropagation: true,\n    minScrollbarLength: 40\n  }); // [ campaign-scroll ] end\n});\n\nfunction horizontalmobilemenuclick() {\n  (0, jquery_1[\"default\"])(window)[0].innerWidth;\n  (0, jquery_1[\"default\"])(\".pc-navbar li\").off(\"click\"), (0, jquery_1[\"default\"])(\".pc-navbar > li:not(.pc-caption)\").on(\"click\", function () {\n    (0, jquery_1[\"default\"])(this).children(\".pc-submenu\").removeAttr(\"style\"), (0, jquery_1[\"default\"])(this).hasClass(\"pc-trigger\") ? (0, jquery_1[\"default\"])(this).removeClass(\"pc-trigger\") : ((0, jquery_1[\"default\"])(\"li.pc-trigger\").removeClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).addClass(\"pc-trigger\"));\n  }), (0, jquery_1[\"default\"])(\".pc-navbar > li:not(.pc-caption) li\").on(\"click\", function (e) {\n    e.stopPropagation(), (0, jquery_1[\"default\"])(this).hasClass(\"pc-trigger\") ? (0, jquery_1[\"default\"])(this).removeClass(\"pc-trigger\") : ((0, jquery_1[\"default\"])(this).parent(\".pc-submenu\").find(\"li.pc-trigger\").removeClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).addClass(\"pc-trigger\"));\n  });\n}\n\nfunction addscroller() {\n  if (rmmini(), menuclick(), (0, jquery_1[\"default\"])(\".navbar-content\")[0]) {\n    new perfect_scrollbar_1[\"default\"](\".navbar-content\", {\n      wheelSpeed: .5,\n      swipeEasing: false,\n      suppressScrollX: !0,\n      wheelPropagation: true,\n      minScrollbarLength: 40\n    });\n  }\n}\n\nfunction menuclick() {\n  (0, jquery_1[\"default\"])(window)[0].innerWidth;\n  (0, jquery_1[\"default\"])(\".pc-navbar li\").off(\"click\"), (0, jquery_1[\"default\"])(\"body\").hasClass(\"minimenu\") || ((0, jquery_1[\"default\"])(\".pc-navbar li:not(.pc-trigger) .pc-submenu\").slideUp(), (0, jquery_1[\"default\"])(\".pc-navbar > li:not(.pc-caption)\").on(\"click\", function () {\n    (0, jquery_1[\"default\"])(this).hasClass(\"pc-trigger\") ? ((0, jquery_1[\"default\"])(this).removeClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).children(\".pc-submenu\").slideUp(\"fast\")) : ((0, jquery_1[\"default\"])(\"li.pc-trigger\").children(\".pc-submenu\").slideUp(\"fast\"), (0, jquery_1[\"default\"])(\"li.pc-trigger\").removeClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).addClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).children(\".pc-submenu\").slideDown(\"fast\"));\n  }), (0, jquery_1[\"default\"])(\".pc-navbar > li:not(.pc-caption) li\").on(\"click\", function (e) {\n    e.stopPropagation(), (0, jquery_1[\"default\"])(this).hasClass(\"pc-trigger\") ? ((0, jquery_1[\"default\"])(this).removeClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).children(\".pc-submenu\").slideUp(\"fast\")) : ((0, jquery_1[\"default\"])(this).parent(\".pc-submenu\").find(\"li.pc-trigger\").children(\".pc-submenu\").slideUp(\"fast\"), (0, jquery_1[\"default\"])(this).parent(\".pc-submenu\").find(\"li.pc-trigger\").removeClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).addClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(this).children(\".pc-submenu\").slideDown(\"fast\"));\n  }));\n}\n\nfunction rmdrp() {\n  (0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header) .pc-mob-drp\").removeClass(\"mob-drp-active\"), (0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header) .pc-md-overlay\").remove();\n}\n\nfunction rmthead() {\n  (0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header)\").removeClass(\"mob-header-active\"), (0, jquery_1[\"default\"])(\".pc-header:not(.pc-mob-header) .pc-md-overlay\").remove();\n}\n\nfunction rmmenu() {\n  (0, jquery_1[\"default\"])(\".pc-sidebar\").removeClass(\"mob-sidebar-active\"), (0, jquery_1[\"default\"])(\".topbar\").removeClass(\"mob-sidebar-active\"), (0, jquery_1[\"default\"])(\".pc-sidebar .pc-menu-overlay\").remove(), (0, jquery_1[\"default\"])(\".topbar .pc-menu-overlay\").remove();\n}\n\nfunction rmovermenu() {\n  (0, jquery_1[\"default\"])(\".pc-sidebar\").removeClass(\"pc-over-menu-active\"), (0, jquery_1[\"default\"])(\".topbar\").removeClass(\"mob-sidebar-active\"), (0, jquery_1[\"default\"])(\".pc-sidebar .pc-menu-overlay\").remove(), (0, jquery_1[\"default\"])(\".topbar .pc-menu-overlay\").remove();\n}\n\nfunction rmactive() {\n  (0, jquery_1[\"default\"])(\".pc-sidebar .pc-navbar li\").removeClass(\"active\"), (0, jquery_1[\"default\"])(\".pc-sidebar .pc-navbar li\").removeClass(\"pc-trigger\"), (0, jquery_1[\"default\"])(\".topbar .dropdown\").removeClass(\"show\"), (0, jquery_1[\"default\"])(\".topbar .dropdown-menu\").removeClass(\"show\"), (0, jquery_1[\"default\"])(\".pc-sidebar .pc-menu-overlay\").remove(), (0, jquery_1[\"default\"])(\".topbar .pc-menu-overlay\").remove();\n}\n\nfunction rmmini() {\n  var e = (0, jquery_1[\"default\"])(window)[0].innerWidth;\n  e <= 1024 ? (0, jquery_1[\"default\"])(\"body\").hasClass(\"minimenu\") && ((0, jquery_1[\"default\"])(\"body\").removeClass(\"minimenu\"), flg = \"1\") : e > 1024 && \"1\" == flg && ((0, jquery_1[\"default\"])(\"body\").addClass(\"minimenu\"), flg = \"0\");\n}\n\nfunction collapseedge() {\n  var e,\n      a = (0, jquery_1[\"default\"])(window).height();\n  (0, jquery_1[\"default\"])(window).width() > 1024 && (0, jquery_1[\"default\"])(\".minimenu .pc-sidebar .pc-submenu .pc-hasmenu\").hover(function () {\n    var s = (0, jquery_1[\"default\"])(this).children(\".pc-submenu\"),\n        i = s.offset(),\n        o = (i.left, i.top),\n        r = (s.width(), s.height()),\n        c = (0, jquery_1[\"default\"])(window).scrollTop();\n\n    if (!(o + r <= a)) {\n      var n = o - c;\n      s.addClass(\"scroll-menu\"), s.css(\"max-height\", \"calc(100vh - \" + n + \"px)\"), e = new perfect_scrollbar_1[\"default\"](\".scroll-menu\", {\n        wheelSpeed: .5,\n        swipeEasing: false,\n        suppressScrollX: !0,\n        wheelPropagation: true,\n        minScrollbarLength: 40\n      });\n    }\n  }, function () {\n    e.destroy(), (0, jquery_1[\"default\"])(\".scroll-menu\").removeAttr(\"style\"), (0, jquery_1[\"default\"])(\".scroll-menu\").removeClass(\"scroll-menu\");\n  });\n}\n\nfunction floatchart() {\n  // [ support-chart ] start\n  (0, jquery_1[\"default\"])(function () {\n    var options1 = {\n      chart: {\n        type: 'area',\n        height: 85,\n        sparkline: {\n          enabled: true\n        }\n      },\n      colors: [\"#7267EF\"],\n      stroke: {\n        curve: 'smooth',\n        width: 2\n      },\n      series: [{\n        data: [0, 20, 10, 45, 30, 55, 20, 30, 0]\n      }],\n      tooltip: {\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(seriesName) {\n              if (seriesName === void 0) {\n                seriesName = 'Ticket';\n              }\n\n              return seriesName;\n            }\n          }\n        },\n        marker: {\n          show: false\n        }\n      }\n    };\n    new apexcharts_1[\"default\"](document.querySelector(\"#support-chart\"), options1).render();\n    var options2 = {\n      chart: {\n        type: 'bar',\n        height: 85,\n        sparkline: {\n          enabled: true\n        }\n      },\n      colors: [\"#7267EF\"],\n      plotOptions: {\n        bar: {\n          columnWidth: '70%'\n        }\n      },\n      series: [{\n        data: [25, 66, 41, 89, 63, 25, 44, 12, 36, 9, 54, 44, 12, 36, 9, 54, 25, 66, 41, 89, 63, 25, 44, 12, 36, 9, 25, 44, 12, 36, 9, 54]\n      }],\n      xaxis: {\n        crosshairs: {\n          width: 1\n        }\n      },\n      tooltip: {\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(seriesName) {\n              if (seriesName === void 0) {\n                seriesName = 'seriesName';\n              }\n\n              return seriesName;\n            }\n          }\n        },\n        marker: {\n          show: false\n        }\n      }\n    };\n    new apexcharts_1[\"default\"](document.querySelector(\"#support-chart1\"), options2).render();\n  }); // [ support-chart ] end\n  // [ account-chart ] start\n\n  (0, jquery_1[\"default\"])(function () {\n    (0, jquery_1[\"default\"])(function () {\n      var options = {\n        chart: {\n          height: 350,\n          type: 'line',\n          stacked: false\n        },\n        stroke: {\n          width: [0, 3],\n          curve: 'smooth'\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: '50%'\n          }\n        },\n        colors: ['#7267EF', '#c7d9ff'],\n        series: [{\n          name: 'Total Sales',\n          type: 'column',\n          data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30]\n        }, {\n          name: 'Average',\n          type: 'line',\n          data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39]\n        }],\n        fill: {\n          opacity: [0.85, 1]\n        },\n        labels: ['01/01/2003', '02/01/2003', '03/01/2003', '04/01/2003', '05/01/2003', '06/01/2003', '07/01/2003', '08/01/2003', '09/01/2003', '10/01/2003', '11/01/2003'],\n        markers: {\n          size: 0\n        },\n        xaxis: {\n          type: 'datetime'\n        },\n        yaxis: {\n          min: 0\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function formatter(y) {\n              if (typeof y !== \"undefined\") {\n                return \"$ \" + y.toFixed(0);\n              }\n\n              return y;\n            }\n          }\n        },\n        legend: {\n          labels: {\n            useSeriesColors: true\n          },\n          markers: {\n            customHTML: [function () {\n              return '';\n            }, function () {\n              return '';\n            }]\n          }\n        }\n      };\n      var chart = new apexcharts_1[\"default\"](document.querySelector(\"#account-chart\"), options);\n      chart.render();\n    });\n  }); // [ account-chart ] end\n  // [ satisfaction-chart ] start\n\n  (0, jquery_1[\"default\"])(function () {\n    var options = {\n      chart: {\n        height: 260,\n        type: 'pie'\n      },\n      series: [66, 50, 40, 30],\n      labels: [\"extremely Satisfied\", \"Satisfied\", \"Poor\", \"Very Poor\"],\n      legend: {\n        show: true,\n        offsetY: 50\n      },\n      dataLabels: {\n        enabled: true,\n        dropShadow: {\n          enabled: false\n        }\n      },\n      theme: {\n        monochrome: {\n          enabled: true,\n          color: '#7267EF'\n        }\n      },\n      responsive: [{\n        breakpoint: 768,\n        options: {\n          chart: {\n            height: 320\n          },\n          legend: {\n            position: 'bottom',\n            offsetY: 0\n          }\n        }\n      }]\n    };\n    var chart = new apexcharts_1[\"default\"](document.querySelector(\"#satisfaction-chart\"), options);\n    chart.render();\n  }); // [ satisfaction-chart ] end\n}\n/**\r\n * Custom\r\n */\n\n\nvar boortapModal = document.getElementById('bootstrapModal');\nboortapModal === null || boortapModal === void 0 ? void 0 : boortapModal.addEventListener('show.bs.modal', function (event) {\n  var recipient = 'Ibnu'; // If necessary, you could initiate an AJAX request here\n  // and then do the updating in a callback.\n  // Update the modal's content.\n\n  var modalTitle = boortapModal.querySelector('.modal-title');\n  var modalBodyInput = boortapModal.querySelector('.modal-body input'); // Change value\n\n  modalTitle.textContent = 'New message to ' + recipient;\n  modalBodyInput.value = recipient || '';\n});\nvar sweetalertButton = document.getElementById('sweetalertButton');\nsweetalertButton === null || sweetalertButton === void 0 ? void 0 : sweetalertButton.addEventListener('click', function () {\n  sweetalert2_1[\"default\"].fire({\n    title: 'Error!',\n    text: 'Do you want to continue',\n    icon: 'error',\n    confirmButtonText: 'Cool'\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/ts/app.ts\n");

/***/ }),

/***/ "./resources/dashboardkit/fonts/feather.css":
/*!**************************************************!*\
  !*** ./resources/dashboardkit/fonts/feather.css ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvZGFzaGJvYXJka2l0L2ZvbnRzL2ZlYXRoZXIuY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9kYXNoYm9hcmRraXQvZm9udHMvZmVhdGhlci5jc3M/MTVkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/dashboardkit/fonts/feather.css\n");

/***/ }),

/***/ "./resources/dashboardkit/fonts/material.css":
/*!***************************************************!*\
  !*** ./resources/dashboardkit/fonts/material.css ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvZGFzaGJvYXJka2l0L2ZvbnRzL21hdGVyaWFsLmNzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvZGFzaGJvYXJka2l0L2ZvbnRzL21hdGVyaWFsLmNzcz9jZmEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/dashboardkit/fonts/material.css\n");

/***/ }),

/***/ "./resources/dashboardkit/css/style.css":
/*!**********************************************!*\
  !*** ./resources/dashboardkit/css/style.css ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvZGFzaGJvYXJka2l0L2Nzcy9zdHlsZS5jc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Rhc2hib2FyZGtpdC9jc3Mvc3R5bGUuY3NzPzg5MzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/dashboardkit/css/style.css\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9kNDNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["assets/css/main","assets/css/style","/assets/js/vendor"], () => (__webpack_exec__("./node_modules/jquery/dist/jquery.min.js"), __webpack_exec__("./node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"), __webpack_exec__("./node_modules/sweetalert2/dist/sweetalert2.all.min.js"), __webpack_exec__("./resources/dashboardkit/js/vendor-all.min.js"), __webpack_exec__("./resources/dashboardkit/js/pcoded.min.js"), __webpack_exec__("./resources/ts/app.ts"), __webpack_exec__("./resources/sass/app.scss"), __webpack_exec__("./node_modules/bootstrap/dist/css/bootstrap.min.css"), __webpack_exec__("./node_modules/sweetalert2/dist/sweetalert2.min.css"), __webpack_exec__("./resources/dashboardkit/fonts/feather.css"), __webpack_exec__("./resources/dashboardkit/fonts/material.css"), __webpack_exec__("./resources/dashboardkit/css/style.css")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);